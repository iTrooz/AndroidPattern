<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="214" onload="init(evt)" viewBox="0 0 1200 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="214.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="197" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="197" > </text>
<g id="frames">
<g >
<title>~:0:&lt;method 'keys' of 'dict' objects&gt; (24,000 samples, 0.32%)</title><rect x="1186.2" y="85" width="3.8" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1189.23" y="95.5" ></text>
</g>
<g >
<title>~:0:&lt;method 'copy' of 'dict' objects&gt; (13,996 samples, 0.19%)</title><rect x="825.4" y="69" width="2.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="828.42" y="79.5" ></text>
</g>
<g >
<title>attempt3.py:24:to_number (149,030 samples, 1.98%)</title><rect x="902.2" y="37" width="23.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="905.24" y="47.5" >a..</text>
</g>
<g >
<title>~:0:&lt;built-in method builtins.exec&gt; (7,508,289 samples, 100.00%)</title><rect x="10.0" y="149" width="1180.0" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >~:0:&lt;built-in method builtins.exec&gt;</text>
</g>
<g >
<title>~:0:&lt;method 'copy' of 'dict' objects&gt; (33,383 samples, 0.44%)</title><rect x="947.1" y="85" width="5.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="950.13" y="95.5" ></text>
</g>
<g >
<title>attempt3.py:7:is_close_int (39,432 samples, 0.53%)</title><rect x="194.8" y="69" width="6.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="197.84" y="79.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method builtins.min&gt; (48,745 samples, 0.65%)</title><rect x="207.3" y="69" width="7.7" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="210.31" y="79.5" ></text>
</g>
<g >
<title>~:0:&lt;method 'join' of 'str' objects&gt; (1,487,974 samples, 19.82%)</title><rect x="952.4" y="85" width="233.8" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="955.38" y="95.5" >~:0:&lt;method 'join' of 'str' obj..</text>
</g>
<g >
<title>attempt3.py:24:to_number (142,267 samples, 1.89%)</title><rect x="610.0" y="69" width="22.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="613.01" y="79.5" >a..</text>
</g>
<g >
<title>attempt3.py:1:&lt;module&gt; (7,508,151 samples, 100.00%)</title><rect x="10.0" y="133" width="1180.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="13.02" y="143.5" >attempt3.py:1:&lt;module&gt;</text>
</g>
<g >
<title>attempt3.py:53:genAllPoints (360,721 samples, 4.80%)</title><rect x="663.9" y="69" width="56.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="666.92" y="79.5" >attemp..</text>
</g>
<g >
<title>&lt;string&gt;:2:__init__ (233,813 samples, 3.11%)</title><rect x="313.4" y="69" width="36.8" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="316.44" y="79.5" >&lt;st..</text>
</g>
<g >
<title>attempt3.py:58:chooseNextPoint (3,671,810 samples, 48.90%)</title><rect x="350.2" y="85" width="577.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="353.18" y="95.5" >attempt3.py:58:chooseNextPoint</text>
</g>
<g >
<title>~:0:&lt;built-in method builtins.len&gt; (40,989 samples, 0.55%)</title><rect x="927.2" y="85" width="6.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="930.24" y="95.5" ></text>
</g>
<g >
<title>attempt3.py:58:chooseNextPoint (613,795 samples, 8.17%)</title><rect x="720.6" y="69" width="96.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="723.61" y="79.5" >attempt3.py..</text>
</g>
<g >
<title>&lt;string&gt;:2:__eq__ (451,575 samples, 6.01%)</title><rect x="15.4" y="85" width="71.0" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="18.42" y="95.5" >&lt;string&gt;..</text>
</g>
<g >
<title>~:0:&lt;built-in method builtins.len&gt; (17,185 samples, 0.23%)</title><rect x="817.1" y="69" width="2.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="820.08" y="79.5" ></text>
</g>
<g >
<title>attempt3.py:7:is_close_int (16,532 samples, 0.22%)</title><rect x="655.5" y="53" width="2.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="658.48" y="63.5" ></text>
</g>
<g >
<title>&lt;string&gt;:2:__eq__ (189,331 samples, 2.52%)</title><rect x="580.3" y="69" width="29.7" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="583.26" y="79.5" >&lt;s..</text>
</g>
<g >
<title>attempt3.py:58:chooseNextPoint (7,473,978 samples, 99.54%)</title><rect x="15.4" y="101" width="1174.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="18.39" y="111.5" >attempt3.py:58:chooseNextPoint</text>
</g>
<g >
<title>attempt3.py:30:getInbetweenPoints (200,748 samples, 2.67%)</title><rect x="632.4" y="69" width="31.5" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="635.37" y="79.5" >at..</text>
</g>
<g >
<title>attempt3.py:60:&lt;genexpr&gt; (492,924 samples, 6.57%)</title><rect x="848.2" y="53" width="77.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="851.19" y="63.5" >attempt3..</text>
</g>
<g >
<title>attempt3.py:30:getInbetweenPoints (478,807 samples, 6.38%)</title><rect x="139.7" y="85" width="75.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="142.72" y="95.5" >attempt3..</text>
</g>
<g >
<title>~:0:&lt;method 'add' of 'set' objects&gt; (60,778 samples, 0.81%)</title><rect x="937.6" y="85" width="9.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="940.58" y="95.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method builtins.max&gt; (16,732 samples, 0.22%)</title><rect x="658.1" y="53" width="2.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="661.08" y="63.5" ></text>
</g>
<g >
<title>&lt;string&gt;:2:__init__ (98,031 samples, 1.31%)</title><rect x="705.2" y="53" width="15.4" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="708.21" y="63.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method builtins.next&gt; (24,791 samples, 0.33%)</title><rect x="933.7" y="85" width="3.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="936.68" y="95.5" ></text>
</g>
<g >
<title>~:0:&lt;method 'join' of 'str' objects&gt; (623,861 samples, 8.31%)</title><rect x="827.6" y="69" width="98.1" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="830.62" y="79.5" >~:0:&lt;method..</text>
</g>
<g >
<title>attempt3.py:24:to_number (355,452 samples, 4.73%)</title><rect x="1130.4" y="53" width="55.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1133.37" y="63.5" >attem..</text>
</g>
<g >
<title>attempt3.py:60:&lt;genexpr&gt; (1,175,676 samples, 15.66%)</title><rect x="1001.5" y="69" width="184.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1004.46" y="79.5" >attempt3.py:60:&lt;genexpr&gt;</text>
</g>
<g >
<title>~:0:&lt;method 'add' of 'set' objects&gt; (25,482 samples, 0.34%)</title><rect x="821.4" y="69" width="4.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="824.41" y="79.5" ></text>
</g>
<g >
<title>attempt3.py:82:main (7,474,342 samples, 99.55%)</title><rect x="15.3" y="117" width="1174.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="18.34" y="127.5" >attempt3.py:82:main</text>
</g>
<g >
<title>~:0:&lt;built-in method builtins.next&gt; (10,394 samples, 0.14%)</title><rect x="819.8" y="69" width="1.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="822.78" y="79.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method builtins.max&gt; (39,907 samples, 0.53%)</title><rect x="201.0" y="69" width="6.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="204.04" y="79.5" ></text>
</g>
<g >
<title>attempt3.py:53:genAllPoints (860,356 samples, 11.46%)</title><rect x="215.0" y="85" width="135.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="217.97" y="95.5" >attempt3.py:53:ge..</text>
</g>
<g >
<title>attempt3.py:24:to_number (339,322 samples, 4.52%)</title><rect x="86.4" y="85" width="53.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="89.39" y="95.5" >attem..</text>
</g>
<g >
<title>&lt;string&gt;:2:__init__ (12,403 samples, 0.17%)</title><rect x="192.9" y="69" width="1.9" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="195.89" y="79.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method builtins.min&gt; (20,437 samples, 0.27%)</title><rect x="660.7" y="53" width="3.2" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="663.71" y="63.5" ></text>
</g>
<g >
<title>all (7,508,289 samples, 100%)</title><rect x="10.0" y="165" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>~:0:&lt;method 'keys' of 'dict' objects&gt; (10,062 samples, 0.13%)</title><rect x="925.7" y="69" width="1.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="928.66" y="79.5" ></text>
</g>
</g>
</svg>
