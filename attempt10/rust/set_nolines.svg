<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::remove_entry&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (24 samples, 2.41%)</title><rect x="1145.0" y="229" width="28.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1147.98" y="239.5" >ha..</text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::remove&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (24 samples, 2.41%)</title><rect x="1145.0" y="245" width="28.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1147.98" y="255.5" >ha..</text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::insert_in_slot&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (7 samples, 0.70%)</title><rect x="839.3" y="213" width="8.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="842.32" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_byte   (8 samples, 0.80%)</title><rect x="621.3" y="133" width="9.5" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="624.33" y="143.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (36 samples, 3.61%)</title><rect x="748.1" y="133" width="42.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="751.09" y="143.5" >core..</text>
</g>
<g >
<title>malloc   (1 samples, 0.10%)</title><rect x="98.9" y="69" width="1.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="101.86" y="79.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#5   (1 samples, 0.10%)</title><rect x="1184.1" y="197" width="1.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1187.08" y="207.5" ></text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_byte   (3 samples, 0.30%)</title><rect x="835.8" y="181" width="3.5" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="838.76" y="191.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::remove_entry&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (173 samples, 17.37%)</title><rect x="847.6" y="213" width="205.0" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="850.61" y="223.5" >hashbrown::map::HashMap&lt;(i..</text>
</g>
<g >
<title>core::hash::sip::{impl#5   (48 samples, 4.82%)</title><rect x="910.4" y="133" width="56.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="913.40" y="143.5" >core::..</text>
</g>
<g >
<title>attempt10::is_close_int   (1 samples, 0.10%)</title><rect x="102.4" y="53" width="1.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="105.41" y="63.5" ></text>
</g>
<g >
<title>alloc::raw_vec::{impl#3   (11 samples, 1.10%)</title><rect x="179.4" y="181" width="13.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="182.42" y="191.5" ></text>
</g>
<g >
<title>core::cmp::Ord::min&lt;isize&gt;   (1 samples, 0.10%)</title><rect x="79.9" y="245" width="1.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="82.90" y="255.5" ></text>
</g>
<g >
<title>core::cmp::min_by&lt;isize, fn(&amp;isize, &amp;isize) -&gt; core::cmp::Ordering&gt;   (1 samples, 0.10%)</title><rect x="1056.1" y="245" width="1.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1059.12" y="255.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (2 samples, 0.20%)</title><rect x="1059.7" y="165" width="2.3" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1062.68" y="175.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (2 samples, 0.20%)</title><rect x="1133.1" y="149" width="2.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1136.13" y="159.5" ></text>
</g>
<g >
<title>core::hash::sip::u8to64_le   (1 samples, 0.10%)</title><rect x="696.0" y="53" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="698.96" y="63.5" ></text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;((isize, isize), ())&gt;::as_ptr&lt;((isize, isize), ())&gt;   (5 samples, 0.50%)</title><rect x="632.0" y="117" width="5.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="634.99" y="127.5" ></text>
</g>
<g >
<title>attempt10::choose_next_point   (996 samples, 100.00%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >attempt10::choose_next_point  </text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (5 samples, 0.50%)</title><rect x="632.0" y="85" width="5.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="634.99" y="95.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (22 samples, 2.21%)</title><rect x="1118.9" y="245" width="26.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1121.92" y="255.5" >h..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt10::get_inbetween_points::{closure_env#0   (10 samples, 1.00%)</title><rect x="164.0" y="245" width="11.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="167.02" y="255.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::insert_in_slot&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (1 samples, 0.10%)</title><rect x="1143.8" y="229" width="1.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1146.80" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (11 samples, 1.10%)</title><rect x="179.4" y="213" width="13.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="182.42" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::fix_insert_slot   (1 samples, 0.10%)</title><rect x="1136.7" y="197" width="1.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1139.69" y="207.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (27 samples, 2.71%)</title><rect x="316.8" y="37" width="32.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="319.85" y="47.5" >co..</text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (38 samples, 3.82%)</title><rect x="672.3" y="101" width="45.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="675.27" y="111.5" >std:..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (41 samples, 4.12%)</title><rect x="115.4" y="133" width="48.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="118.44" y="143.5" >core..</text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::get&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (4 samples, 0.40%)</title><rect x="1178.2" y="229" width="4.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1181.15" y="239.5" ></text>
</g>
<g >
<title>core::core_arch::x86::sse2::_mm_movemask_epi8   (6 samples, 0.60%)</title><rect x="614.2" y="133" width="7.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="617.22" y="143.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::{impl#3   (3 samples, 0.30%)</title><rect x="1109.4" y="165" width="3.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1112.44" y="175.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (109 samples, 10.94%)</title><rect x="219.7" y="117" width="129.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="222.70" y="127.5" >core::hash::Hash..</text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::get&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (9 samples, 0.90%)</title><rect x="1108.3" y="213" width="10.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1111.25" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::{impl#3   (1 samples, 0.10%)</title><rect x="991.0" y="149" width="1.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="993.96" y="159.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (1 samples, 0.10%)</title><rect x="1182.9" y="229" width="1.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1185.89" y="239.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (8 samples, 0.80%)</title><rect x="1158.0" y="165" width="9.5" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1161.01" y="175.5" ></text>
</g>
<g >
<title>fmodf64   (2 samples, 0.20%)</title><rect x="1070.3" y="85" width="2.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1073.34" y="95.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset&lt;core::hash::sip::Sip13Rounds&gt;   (1 samples, 0.10%)</title><rect x="909.2" y="117" width="1.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="912.22" y="127.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::get_inner&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (376 samples, 37.75%)</title><rect x="192.4" y="213" width="445.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="195.45" y="223.5" >hashbrown::map::HashMap&lt;(isize, isize), (), std::collections..</text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (1 samples, 0.10%)</title><rect x="1188.8" y="213" width="1.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1191.82" y="223.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#18   (8 samples, 0.80%)</title><rect x="1122.5" y="165" width="9.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1125.47" y="175.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (1 samples, 0.10%)</title><rect x="1182.9" y="261" width="1.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1185.89" y="271.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (3 samples, 0.30%)</title><rect x="101.2" y="117" width="3.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="104.22" y="127.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (38 samples, 3.82%)</title><rect x="863.0" y="85" width="45.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="866.01" y="95.5" >std:..</text>
</g>
<g >
<title>core::ptr::write&lt;((isize, isize), ())&gt;   (1 samples, 0.10%)</title><rect x="1143.8" y="181" width="1.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1146.80" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::{impl#8   (8 samples, 0.80%)</title><rect x="1009.9" y="149" width="9.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1012.92" y="159.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6   (1 samples, 0.10%)</title><rect x="174.7" y="165" width="1.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="177.68" y="175.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (7 samples, 0.70%)</title><rect x="1100.0" y="133" width="8.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1102.96" y="143.5" ></text>
</g>
<g >
<title>core::core_arch::x86::sse2::_mm_movemask_epi8   (2 samples, 0.20%)</title><rect x="1007.6" y="133" width="2.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1010.55" y="143.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (1 samples, 0.10%)</title><rect x="178.2" y="229" width="1.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="181.23" y="239.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (11 samples, 1.10%)</title><rect x="179.4" y="261" width="13.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="182.42" y="271.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#5   (120 samples, 12.05%)</title><rect x="206.7" y="165" width="142.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="209.67" y="175.5" >core::hash::impls:..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt10::get_inbetween_points::{closure_env#1   (50 samples, 5.02%)</title><rect x="104.8" y="165" width="59.2" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="107.78" y="175.5" >core::..</text>
</g>
<g >
<title>attempt10::get_inbetween_points   (2 samples, 0.20%)</title><rect x="1173.4" y="293" width="2.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1176.41" y="303.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys&lt;core::hash::sip::Sip13Rounds&gt;   (1 samples, 0.10%)</title><rect x="1091.7" y="149" width="1.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1094.67" y="159.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt10::get_inbetween_points::{closure_env#1   (1 samples, 0.10%)</title><rect x="1174.6" y="277" width="1.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1177.60" y="287.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (8 samples, 0.80%)</title><rect x="1009.9" y="85" width="9.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1012.92" y="95.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (52 samples, 5.22%)</title><rect x="729.1" y="165" width="61.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="732.14" y="175.5" >core::..</text>
</g>
<g >
<title>core::iter::adapters::map::{impl#2   (1 samples, 0.10%)</title><rect x="174.7" y="181" width="1.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="177.68" y="191.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (1 samples, 0.10%)</title><rect x="1184.1" y="133" width="1.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1187.08" y="143.5" ></text>
</g>
<g >
<title>attempt10::get_inbetween_points::{closure#1   (41 samples, 4.12%)</title><rect x="115.4" y="101" width="48.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="118.44" y="111.5" >atte..</text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (2 samples, 0.20%)</title><rect x="1175.8" y="133" width="2.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1178.78" y="143.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::remove_entry&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (2 samples, 0.20%)</title><rect x="1186.4" y="229" width="2.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1189.45" y="239.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#18   (13 samples, 1.31%)</title><rect x="1075.1" y="149" width="15.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1078.08" y="159.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (38 samples, 3.82%)</title><rect x="672.3" y="85" width="45.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="675.27" y="95.5" >core..</text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (1 samples, 0.10%)</title><rect x="1182.9" y="293" width="1.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1185.89" y="303.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::adapters::map::map_fold::{closure_env#0   (1 samples, 0.10%)</title><rect x="173.5" y="117" width="1.2" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="176.49" y="127.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys&lt;core::hash::sip::Sip13Rounds&gt;   (1 samples, 0.10%)</title><rect x="1182.9" y="181" width="1.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1185.89" y="191.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (2 samples, 0.20%)</title><rect x="97.7" y="117" width="2.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="100.67" y="127.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::erase_no_drop&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (28 samples, 2.81%)</title><rect x="1019.4" y="165" width="33.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1022.40" y="175.5" >ha..</text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_empty   (7 samples, 0.70%)</title><rect x="1044.3" y="133" width="8.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1047.28" y="143.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::remove&lt;(isize, isize), std::collections::hash::map::RandomState, (isize, isize)&gt;   (4 samples, 0.40%)</title><rect x="1184.1" y="293" width="4.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1187.08" y="303.5" ></text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (39 samples, 3.92%)</title><rect x="1072.7" y="261" width="46.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1075.71" y="271.5" >hash..</text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::remove&lt;(isize, isize), std::collections::hash::map::RandomState, (isize, isize)&gt;   (173 samples, 17.37%)</title><rect x="847.6" y="261" width="205.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="850.61" y="271.5" >std::collections::hash::se..</text>
</g>
<g >
<title>attempt10::get_inbetween_points::{closure#1   (7 samples, 0.70%)</title><rect x="1064.4" y="117" width="8.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1067.42" y="127.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (13 samples, 1.31%)</title><rect x="1092.9" y="165" width="15.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1095.85" y="175.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (7 samples, 0.70%)</title><rect x="165.2" y="133" width="8.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="168.20" y="143.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (9 samples, 0.90%)</title><rect x="1062.0" y="165" width="10.7" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1065.05" y="175.5" ></text>
</g>
<g >
<title>attempt10::choose_next_point   (979 samples, 98.29%)</title><rect x="13.6" y="293" width="1159.8" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="16.55" y="303.5" >attempt10::choose_next_point  </text>
</g>
<g >
<title>alloc::vec::{impl#19   (1 samples, 0.10%)</title><rect x="173.5" y="69" width="1.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="176.49" y="79.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (3 samples, 0.30%)</title><rect x="1113.0" y="165" width="3.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1115.99" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::set_ctrl   (1 samples, 0.10%)</title><rect x="1027.7" y="133" width="1.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1030.69" y="143.5" ></text>
</g>
<g >
<title>all (996 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (2 samples, 0.20%)</title><rect x="97.7" y="149" width="2.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="100.67" y="159.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (38 samples, 3.82%)</title><rect x="863.0" y="53" width="45.0" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="866.01" y="63.5" >core..</text>
</g>
<g >
<title>core::num::{impl#7   (1 samples, 0.10%)</title><rect x="1172.2" y="133" width="1.2" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1175.23" y="143.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (1 samples, 0.10%)</title><rect x="1185.3" y="165" width="1.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1188.26" y="175.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (3 samples, 0.30%)</title><rect x="1153.3" y="53" width="3.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1156.27" y="63.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (1 samples, 0.10%)</title><rect x="1174.6" y="229" width="1.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1177.60" y="239.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#23   (1 samples, 0.10%)</title><rect x="1184.1" y="181" width="1.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1187.08" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;((isize, isize), ())&gt;::as_ref&lt;((isize, isize), ())&gt;   (5 samples, 0.50%)</title><rect x="632.0" y="133" width="5.9" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="634.99" y="143.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (2 samples, 0.20%)</title><rect x="1184.1" y="213" width="2.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1187.08" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner   (7 samples, 0.70%)</title><rect x="1135.5" y="213" width="8.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1138.50" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::{impl#8   (6 samples, 0.60%)</title><rect x="630.8" y="149" width="7.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="633.80" y="159.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (38 samples, 3.82%)</title><rect x="863.0" y="69" width="45.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="866.01" y="79.5" >core..</text>
</g>
<g >
<title>core::hash::sip::{impl#4   (1 samples, 0.10%)</title><rect x="1185.3" y="181" width="1.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1188.26" y="191.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt10::get_inbetween_points::{closure_env#1   (2 samples, 0.20%)</title><rect x="1059.7" y="149" width="2.3" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1062.68" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (10 samples, 1.00%)</title><rect x="164.0" y="213" width="11.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="167.02" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::is_bucket_full   (1 samples, 0.10%)</title><rect x="1136.7" y="181" width="1.2" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1139.69" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;((isize, isize), ())&gt;::as_ptr&lt;((isize, isize), ())&gt;   (8 samples, 0.80%)</title><rect x="1009.9" y="117" width="9.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1012.92" y="127.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (1 samples, 0.10%)</title><rect x="1174.6" y="245" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.60" y="255.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (22 samples, 2.21%)</title><rect x="1118.9" y="277" width="26.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1121.92" y="287.5" >s..</text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (270 samples, 27.11%)</title><rect x="192.4" y="181" width="319.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="195.45" y="191.5" >core::hash::BuildHasher::hash_one&lt;std::coll..</text>
</g>
<g >
<title>core::core_arch::x86::sse2::_mm_movemask_epi8   (2 samples, 0.20%)</title><rect x="1116.5" y="149" width="2.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1119.55" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;((isize, isize), ())&gt;::write&lt;((isize, isize), ())&gt;   (1 samples, 0.10%)</title><rect x="1143.8" y="213" width="1.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1146.80" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (16 samples, 1.61%)</title><rect x="816.8" y="181" width="19.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="819.81" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner   (40 samples, 4.02%)</title><rect x="791.9" y="197" width="47.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="794.93" y="207.5" >hash..</text>
</g>
<g >
<title>core::hash::sip::SipHasher13::new_with_keys   (1 samples, 0.10%)</title><rect x="1091.7" y="165" width="1.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1094.67" y="175.5" ></text>
</g>
<g >
<title>core::ptr::write&lt;((isize, isize), ())&gt;   (1 samples, 0.10%)</title><rect x="839.3" y="165" width="1.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="842.32" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::{impl#3   (4 samples, 0.40%)</title><rect x="812.1" y="181" width="4.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="815.07" y="191.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (8 samples, 0.80%)</title><rect x="1158.0" y="181" width="9.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1161.01" y="191.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (41 samples, 4.12%)</title><rect x="859.5" y="101" width="48.5" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="862.46" y="111.5" >core..</text>
</g>
<g >
<title>std::f64::{impl#0   (3 samples, 0.30%)</title><rect x="160.5" y="85" width="3.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="163.46" y="95.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (13 samples, 1.31%)</title><rect x="1057.3" y="229" width="15.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1060.31" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::extend_desugared&lt;(isize, isize), alloc::alloc::Global, core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt10::get_inbetween_points::{closure_env#1   (4 samples, 0.40%)</title><rect x="100.0" y="165" width="4.8" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="103.04" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::record_item_insert_at   (6 samples, 0.60%)</title><rect x="840.5" y="197" width="7.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="843.50" y="207.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (2 samples, 0.20%)</title><rect x="1175.8" y="101" width="2.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1178.78" y="111.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (4 samples, 0.40%)</title><rect x="167.6" y="117" width="4.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="170.57" y="127.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset&lt;core::hash::sip::Sip13Rounds&gt;   (8 samples, 0.80%)</title><rect x="351.2" y="117" width="9.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="354.20" y="127.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (1 samples, 0.10%)</title><rect x="1187.6" y="181" width="1.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1190.63" y="191.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#83   (10 samples, 1.00%)</title><rect x="717.3" y="181" width="11.8" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="720.29" y="191.5" ></text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (6 samples, 0.60%)</title><rect x="1175.8" y="277" width="7.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1178.78" y="287.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (5 samples, 0.50%)</title><rect x="1137.9" y="197" width="5.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1140.87" y="207.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::remove&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (28 samples, 2.81%)</title><rect x="1019.4" y="181" width="33.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1022.40" y="191.5" >ha..</text>
</g>
<g >
<title>core::hash::sip::{impl#5   (52 samples, 5.22%)</title><rect x="729.1" y="149" width="61.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="732.14" y="159.5" >core::..</text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (9 samples, 0.90%)</title><rect x="1108.3" y="197" width="10.6" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1111.25" y="207.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::remove_entry&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (4 samples, 0.40%)</title><rect x="1184.1" y="245" width="4.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1187.08" y="255.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (128 samples, 12.85%)</title><rect x="360.7" y="133" width="151.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="363.68" y="143.5" >core::hash::sip::{i..</text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (30 samples, 3.01%)</title><rect x="1072.7" y="213" width="35.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1075.71" y="223.5" >has..</text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (1 samples, 0.10%)</title><rect x="1188.8" y="245" width="1.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1191.82" y="255.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_inner   (2 samples, 0.20%)</title><rect x="1186.4" y="197" width="2.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1189.45" y="207.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (2 samples, 0.20%)</title><rect x="1167.5" y="197" width="2.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1170.49" y="207.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains_key&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (39 samples, 3.92%)</title><rect x="1072.7" y="245" width="46.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1075.71" y="255.5" >hash..</text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (120 samples, 12.05%)</title><rect x="648.6" y="213" width="142.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="651.57" y="223.5" >hashbrown::map::ma..</text>
</g>
<g >
<title>core::hash::sip::u8to64_le   (2 samples, 0.20%)</title><rect x="891.4" y="37" width="2.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="894.45" y="47.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (10 samples, 1.00%)</title><rect x="164.0" y="229" width="11.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="167.02" y="239.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (11 samples, 1.10%)</title><rect x="179.4" y="165" width="13.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="182.42" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::erase   (28 samples, 2.81%)</title><rect x="1019.4" y="149" width="33.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1022.40" y="159.5" >ha..</text>
</g>
<g >
<title>core::hash::sip::{impl#8   (17 samples, 1.71%)</title><rect x="697.1" y="53" width="20.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="700.15" y="63.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (2 samples, 0.20%)</title><rect x="1059.7" y="133" width="2.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1062.68" y="143.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (1 samples, 0.10%)</title><rect x="1174.6" y="149" width="1.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1177.60" y="159.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (45 samples, 4.52%)</title><rect x="664.0" y="117" width="53.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="666.98" y="127.5" >core:..</text>
</g>
<g >
<title>core::hash::impls::{impl#18   (114 samples, 11.45%)</title><rect x="213.8" y="133" width="135.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="216.78" y="143.5" >core::hash::impls..</text>
</g>
<g >
<title>core::alloc::layout::{impl#0   (1 samples, 0.10%)</title><rect x="172.3" y="101" width="1.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="175.31" y="111.5" ></text>
</g>
<g >
<title>core::iter::adapters::map::map_fold::{closure#0   (1 samples, 0.10%)</title><rect x="173.5" y="101" width="1.2" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="176.49" y="111.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (2 samples, 0.20%)</title><rect x="1175.8" y="229" width="2.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1178.78" y="239.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#23   (116 samples, 11.65%)</title><rect x="211.4" y="149" width="137.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="214.41" y="159.5" >core::hash::impls..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (1 samples, 0.10%)</title><rect x="1174.6" y="181" width="1.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1177.60" y="191.5" ></text>
</g>
<g >
<title>core::hash::sip::u8to64_le   (8 samples, 0.80%)</title><rect x="307.4" y="37" width="9.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="310.37" y="47.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::is_bucket_full   (7 samples, 0.70%)</title><rect x="803.8" y="165" width="8.3" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="806.78" y="175.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (100 samples, 10.04%)</title><rect x="848.8" y="197" width="118.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="851.80" y="207.5" >hashbrown::map..</text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#1   (10 samples, 1.00%)</title><rect x="164.0" y="197" width="11.9" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="167.02" y="207.5" ></text>
</g>
<g >
<title>core::mem::manually_drop::ManuallyDrop&lt;alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;::new&lt;alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (4 samples, 0.40%)</title><rect x="39.6" y="245" width="4.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="42.62" y="255.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (2 samples, 0.20%)</title><rect x="1186.4" y="213" width="2.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1189.45" y="223.5" ></text>
</g>
<g >
<title>core::hash::sip::SipHasher13::new_with_keys   (8 samples, 0.80%)</title><rect x="351.2" y="149" width="9.5" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="354.20" y="159.5" ></text>
</g>
<g >
<title>core::core_arch::x86::sse2::_mm_movemask_epi8   (8 samples, 0.80%)</title><rect x="621.3" y="117" width="9.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="624.33" y="127.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (1 samples, 0.10%)</title><rect x="1185.3" y="197" width="1.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1188.26" y="207.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (3 samples, 0.30%)</title><rect x="1131.9" y="197" width="3.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1134.95" y="207.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, (isize, isize)&gt;   (376 samples, 37.75%)</title><rect x="192.4" y="261" width="445.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="195.45" y="271.5" >std::collections::hash::set::HashSet&lt;(isize, isize), std::co..</text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;((isize, isize), ())&gt;::as_ref&lt;((isize, isize), ())&gt;   (8 samples, 0.80%)</title><rect x="1009.9" y="133" width="9.5" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="1012.92" y="143.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_inner   (2 samples, 0.20%)</title><rect x="1167.5" y="181" width="2.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1170.49" y="191.5" ></text>
</g>
<g >
<title>core::hash::sip::SipHasher13::new_with_keys   (1 samples, 0.10%)</title><rect x="1182.9" y="197" width="1.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1185.89" y="207.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit   (2 samples, 0.20%)</title><rect x="1110.6" y="149" width="2.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1113.62" y="159.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt10::get_inbetween_points::{closure_env#1   (3 samples, 0.30%)</title><rect x="101.2" y="133" width="3.6" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="104.22" y="143.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (2 samples, 0.20%)</title><rect x="1175.8" y="149" width="2.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1178.78" y="159.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.10%)</title><rect x="1143.8" y="197" width="1.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1146.80" y="207.5" ></text>
</g>
<g >
<title>core::core_arch::x86::sse2::_mm_movemask_epi8   (6 samples, 0.60%)</title><rect x="1045.5" y="101" width="7.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1048.46" y="111.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (7 samples, 0.70%)</title><rect x="1148.5" y="101" width="8.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1151.53" y="111.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity&lt;(isize, isize)&gt;   (2 samples, 0.20%)</title><rect x="97.7" y="181" width="2.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="100.67" y="191.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset&lt;core::hash::sip::Sip13Rounds&gt;   (4 samples, 0.40%)</title><rect x="724.4" y="133" width="4.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="727.40" y="143.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::{impl#14   (11 samples, 1.10%)</title><rect x="179.4" y="229" width="13.0" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="182.42" y="239.5" ></text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::remove&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (4 samples, 0.40%)</title><rect x="1184.1" y="277" width="4.7" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1187.08" y="287.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (7 samples, 0.70%)</title><rect x="165.2" y="149" width="8.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="168.20" y="159.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::remove&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (173 samples, 17.37%)</title><rect x="847.6" y="229" width="205.0" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="850.61" y="239.5" >hashbrown::map::HashMap&lt;(i..</text>
</g>
<g >
<title>??   (8 samples, 0.80%)</title><rect x="183.0" y="117" width="9.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="185.97" y="127.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::BitMask::leading_zeros   (13 samples, 1.31%)</title><rect x="1028.9" y="133" width="15.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1031.88" y="143.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::remove&lt;(isize, isize), std::collections::hash::map::RandomState, (isize, isize)&gt;   (1 samples, 0.10%)</title><rect x="1188.8" y="309" width="1.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1191.82" y="319.5" ></text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (177 samples, 17.77%)</title><rect x="637.9" y="245" width="209.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="640.91" y="255.5" >hashbrown::set::HashSet&lt;(is..</text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (70 samples, 7.03%)</title><rect x="81.1" y="213" width="82.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="84.08" y="223.5" >alloc::ve..</text>
</g>
<g >
<title>core::hash::sip::{impl#5   (13 samples, 1.31%)</title><rect x="1092.9" y="149" width="15.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1095.85" y="159.5" ></text>
</g>
<g >
<title>__rust_alloc   (1 samples, 0.10%)</title><rect x="168.8" y="69" width="1.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="171.76" y="79.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::get&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (106 samples, 10.64%)</title><rect x="512.3" y="197" width="125.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="515.33" y="207.5" >hashbrown::raw:..</text>
</g>
<g >
<title>core::hash::sip::{impl#5   (1 samples, 0.10%)</title><rect x="1184.1" y="85" width="1.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1187.08" y="95.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::remove_entry&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (1 samples, 0.10%)</title><rect x="1188.8" y="261" width="1.2" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1191.82" y="271.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#5   (14 samples, 1.41%)</title><rect x="1073.9" y="181" width="16.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1076.90" y="191.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset&lt;core::hash::sip::Sip13Rounds&gt;   (1 samples, 0.10%)</title><rect x="1091.7" y="133" width="1.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1094.67" y="143.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::{impl#3   (25 samples, 2.51%)</title><rect x="531.3" y="149" width="29.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="534.29" y="159.5" >ha..</text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_byte   (6 samples, 0.60%)</title><rect x="614.2" y="149" width="7.1" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="617.22" y="159.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (12 samples, 1.20%)</title><rect x="893.8" y="37" width="14.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="896.82" y="47.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (38 samples, 3.82%)</title><rect x="672.3" y="69" width="45.0" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="675.27" y="79.5" >core..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (7 samples, 0.70%)</title><rect x="1064.4" y="149" width="8.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1067.42" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find_or_find_insert_slot&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (40 samples, 4.02%)</title><rect x="791.9" y="213" width="47.4" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="794.93" y="223.5" >hash..</text>
</g>
<g >
<title>alloc::vec::spec_extend::{impl#1   (1 samples, 0.10%)</title><rect x="173.5" y="181" width="1.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="176.49" y="191.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt10::get_inbetween_points::{closure_env#1   (13 samples, 1.31%)</title><rect x="1057.3" y="261" width="15.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1060.31" y="271.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (1 samples, 0.10%)</title><rect x="1188.8" y="181" width="1.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1191.82" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;((isize, isize), ())&gt;::write&lt;((isize, isize), ())&gt;   (1 samples, 0.10%)</title><rect x="839.3" y="197" width="1.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="842.32" y="207.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (6 samples, 0.60%)</title><rect x="1083.4" y="53" width="7.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1086.37" y="63.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (176 samples, 17.67%)</title><rect x="639.1" y="229" width="208.5" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="642.10" y="239.5" >hashbrown::map::HashMap&lt;(is..</text>
</g>
<g >
<title>core::hash::sip::{impl#8   (4 samples, 0.40%)</title><rect x="1127.2" y="69" width="4.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1130.21" y="79.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (128 samples, 12.85%)</title><rect x="360.7" y="165" width="151.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="363.68" y="175.5" >std::collections::h..</text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (177 samples, 17.77%)</title><rect x="637.9" y="261" width="209.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="640.91" y="271.5" >std::collections::hash::set..</text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (11 samples, 1.10%)</title><rect x="179.4" y="245" width="13.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="182.42" y="255.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::remove_entry&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (5 samples, 0.50%)</title><rect x="1167.5" y="213" width="5.9" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1170.49" y="223.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (81 samples, 8.13%)</title><rect x="416.4" y="117" width="95.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="419.37" y="127.5" >core::hash:..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (11 samples, 1.10%)</title><rect x="179.4" y="197" width="13.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="182.42" y="207.5" ></text>
</g>
<g >
<title>core::hash::sip::SipHasher13::new_with_keys   (4 samples, 0.40%)</title><rect x="724.4" y="165" width="4.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="727.40" y="175.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#5   (51 samples, 5.12%)</title><rect x="656.9" y="181" width="60.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="659.87" y="191.5" >core::..</text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (13 samples, 1.31%)</title><rect x="1092.9" y="181" width="15.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1095.85" y="191.5" ></text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::remove&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (1 samples, 0.10%)</title><rect x="1188.8" y="293" width="1.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1191.82" y="303.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (8 samples, 0.80%)</title><rect x="1122.5" y="133" width="9.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1125.47" y="143.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (106 samples, 10.64%)</title><rect x="512.3" y="181" width="125.6" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="515.33" y="191.5" >hashbrown::raw:..</text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_byte   (7 samples, 0.70%)</title><rect x="1044.3" y="117" width="8.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1047.28" y="127.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (1 samples, 0.10%)</title><rect x="1184.1" y="149" width="1.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1187.08" y="159.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (19 samples, 1.91%)</title><rect x="1145.0" y="213" width="22.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1147.98" y="223.5" >h..</text>
</g>
<g >
<title>core::hash::impls::{impl#18   (1 samples, 0.10%)</title><rect x="1184.1" y="165" width="1.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1187.08" y="175.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#18   (7 samples, 0.70%)</title><rect x="1148.5" y="149" width="8.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1151.53" y="159.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#83   (1 samples, 0.10%)</title><rect x="1182.9" y="213" width="1.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1185.89" y="223.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::remove&lt;(isize, isize), std::collections::hash::map::RandomState, (isize, isize)&gt;   (24 samples, 2.41%)</title><rect x="1145.0" y="277" width="28.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1147.98" y="287.5" >st..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (2 samples, 0.20%)</title><rect x="102.4" y="101" width="2.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="105.41" y="111.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#18   (49 samples, 4.92%)</title><rect x="659.2" y="149" width="58.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="662.24" y="159.5" >core::..</text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::remove&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (1 samples, 0.10%)</title><rect x="1188.8" y="277" width="1.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1191.82" y="287.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (7 samples, 0.70%)</title><rect x="1123.7" y="85" width="8.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1126.65" y="95.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (70 samples, 7.03%)</title><rect x="81.1" y="229" width="82.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="84.08" y="239.5" >alloc::ve..</text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (376 samples, 37.75%)</title><rect x="192.4" y="245" width="445.5" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="195.45" y="255.5" >hashbrown::set::HashSet&lt;(isize, isize), std::collections::ha..</text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (1 samples, 0.10%)</title><rect x="1188.8" y="229" width="1.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1191.82" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (2 samples, 0.20%)</title><rect x="97.7" y="165" width="2.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="100.67" y="175.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (61 samples, 6.12%)</title><rect x="91.7" y="197" width="72.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="94.75" y="207.5" >alloc::v..</text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::erase_no_drop&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (3 samples, 0.30%)</title><rect x="1169.9" y="181" width="3.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1172.86" y="191.5" ></text>
</g>
<g >
<title>attempt10::choose_next_point   (5 samples, 0.50%)</title><rect x="44.4" y="261" width="5.9" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="47.36" y="271.5" ></text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_byte   (2 samples, 0.20%)</title><rect x="1007.6" y="149" width="2.3" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1010.55" y="159.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (48 samples, 4.82%)</title><rect x="910.4" y="149" width="56.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="913.40" y="159.5" >core::..</text>
</g>
<g >
<title>attempt10::choose_next_point   (876 samples, 87.95%)</title><rect x="14.7" y="277" width="1037.9" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="17.74" y="287.5" >attempt10::choose_next_point  </text>
</g>
<g >
<title>roundf64   (1 samples, 0.10%)</title><rect x="103.6" y="37" width="1.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="106.59" y="47.5" ></text>
</g>
<g >
<title>alloc::vec::spec_extend::{impl#0   (4 samples, 0.40%)</title><rect x="100.0" y="181" width="4.8" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="103.04" y="191.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (19 samples, 1.91%)</title><rect x="1145.0" y="197" width="22.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1147.98" y="207.5" >c..</text>
</g>
<g >
<title>core::hash::impls::{impl#5   (9 samples, 0.90%)</title><rect x="1146.2" y="181" width="10.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1149.16" y="191.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (8 samples, 0.80%)</title><rect x="1158.0" y="149" width="9.5" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1161.01" y="159.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (4 samples, 0.40%)</title><rect x="167.6" y="101" width="4.7" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="170.57" y="111.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (11 samples, 1.10%)</title><rect x="1077.4" y="69" width="13.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1080.45" y="79.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::BitMask::leading_zeros   (1 samples, 0.10%)</title><rect x="1172.2" y="149" width="1.2" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1175.23" y="159.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (2 samples, 0.20%)</title><rect x="1175.8" y="85" width="2.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1178.78" y="95.5" ></text>
</g>
<g >
<title>attempt10::get_inbetween_points::{closure#1   (2 samples, 0.20%)</title><rect x="102.4" y="69" width="2.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="105.41" y="79.5" ></text>
</g>
<g >
<title>attempt10::choose_next_point   (996 samples, 100.00%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >attempt10::choose_next_point  </text>
</g>
<g >
<title>core::iter::range::{impl#6   (4 samples, 0.40%)</title><rect x="110.7" y="133" width="4.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="113.70" y="143.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (14 samples, 1.41%)</title><rect x="1118.9" y="229" width="16.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1121.92" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (1 samples, 0.10%)</title><rect x="1174.6" y="261" width="1.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1177.60" y="271.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::{impl#3   (2 samples, 0.20%)</title><rect x="1178.2" y="181" width="2.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1181.15" y="191.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (128 samples, 12.85%)</title><rect x="360.7" y="149" width="151.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="363.68" y="159.5" >core::hash::sip::{i..</text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (1 samples, 0.10%)</title><rect x="1182.9" y="277" width="1.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1185.89" y="287.5" ></text>
</g>
<g >
<title>fmodf64   (23 samples, 2.31%)</title><rect x="133.2" y="69" width="27.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="136.21" y="79.5" >f..</text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (9 samples, 0.90%)</title><rect x="1062.0" y="197" width="10.7" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1065.05" y="207.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (103 samples, 10.34%)</title><rect x="226.8" y="85" width="122.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="229.81" y="95.5" >std::collection..</text>
</g>
<g >
<title>alloc::alloc::alloc   (2 samples, 0.20%)</title><rect x="97.7" y="85" width="2.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="100.67" y="95.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.10%)</title><rect x="790.7" y="181" width="1.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="793.74" y="191.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (2 samples, 0.20%)</title><rect x="97.7" y="133" width="2.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="100.67" y="143.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::remove_entry&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (72 samples, 7.23%)</title><rect x="967.3" y="197" width="85.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="970.27" y="207.5" >hashbrown:..</text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (50 samples, 5.02%)</title><rect x="104.8" y="181" width="59.2" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="107.78" y="191.5" >core::..</text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;((isize, isize), ())&gt;::as_ptr&lt;((isize, isize), ())&gt;   (1 samples, 0.10%)</title><rect x="790.7" y="197" width="1.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="793.74" y="207.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (3 samples, 0.30%)</title><rect x="1131.9" y="165" width="3.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1134.95" y="175.5" ></text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (22 samples, 2.21%)</title><rect x="1118.9" y="261" width="26.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1121.92" y="271.5" >h..</text>
</g>
<g >
<title>free   (10 samples, 1.00%)</title><rect x="180.6" y="133" width="11.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="183.60" y="143.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (3 samples, 0.30%)</title><rect x="101.2" y="149" width="3.6" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="104.22" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_inner   (9 samples, 0.90%)</title><rect x="1108.3" y="181" width="10.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1111.25" y="191.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (7 samples, 0.70%)</title><rect x="1064.4" y="133" width="8.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1067.42" y="143.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (3 samples, 0.30%)</title><rect x="1131.9" y="181" width="3.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1134.95" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_insert_slot_in_group   (3 samples, 0.30%)</title><rect x="800.2" y="181" width="3.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="803.22" y="191.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#23   (8 samples, 0.80%)</title><rect x="1122.5" y="181" width="9.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1125.47" y="191.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each::call::{closure#0   (1 samples, 0.10%)</title><rect x="173.5" y="85" width="1.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="176.49" y="95.5" ></text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;((isize, isize), ())&gt;::as_mut&lt;((isize, isize), ())&gt;   (1 samples, 0.10%)</title><rect x="790.7" y="213" width="1.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="793.74" y="223.5" ></text>
</g>
<g >
<title>core::iter::adapters::map::{impl#2   (1 samples, 0.10%)</title><rect x="173.5" y="133" width="1.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="176.49" y="143.5" ></text>
</g>
<g >
<title>core::num::{impl#9   (1 samples, 0.10%)</title><rect x="789.6" y="117" width="1.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="792.56" y="127.5" ></text>
</g>
<g >
<title>roundf64   (3 samples, 0.30%)</title><rect x="160.5" y="69" width="3.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="163.46" y="79.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::remove&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (3 samples, 0.30%)</title><rect x="1169.9" y="197" width="3.5" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1172.86" y="207.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::remove&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (4 samples, 0.40%)</title><rect x="1184.1" y="261" width="4.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1187.08" y="271.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (2 samples, 0.20%)</title><rect x="1175.8" y="117" width="2.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1178.78" y="127.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (7 samples, 0.70%)</title><rect x="1148.5" y="69" width="8.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1151.53" y="79.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (103 samples, 10.34%)</title><rect x="226.8" y="69" width="122.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="229.81" y="79.5" >core::hash::sip..</text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (5 samples, 0.50%)</title><rect x="632.0" y="101" width="5.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="634.99" y="111.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#23   (9 samples, 0.90%)</title><rect x="1146.2" y="165" width="10.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1149.16" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (4 samples, 0.40%)</title><rect x="1178.2" y="213" width="4.7" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1181.15" y="223.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (3 samples, 0.30%)</title><rect x="175.9" y="261" width="3.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="178.86" y="271.5" ></text>
</g>
<g >
<title>attempt10::is_close_int   (3 samples, 0.30%)</title><rect x="1069.2" y="101" width="3.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1072.16" y="111.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (50 samples, 5.02%)</title><rect x="104.8" y="149" width="59.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="107.78" y="159.5" >core::..</text>
</g>
<g >
<title>core::hash::sip::{impl#4   (1 samples, 0.10%)</title><rect x="1188.8" y="197" width="1.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1191.82" y="207.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#83   (10 samples, 1.00%)</title><rect x="348.8" y="165" width="11.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="351.84" y="175.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::extend_desugared&lt;(isize, isize), alloc::alloc::Global, core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt10::get_inbetween_points::{closure_env#1   (2 samples, 0.20%)</title><rect x="1059.7" y="181" width="2.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1062.68" y="191.5" ></text>
</g>
<g >
<title>core::num::{impl#7   (13 samples, 1.31%)</title><rect x="1028.9" y="117" width="15.4" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1031.88" y="127.5" ></text>
</g>
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (1 samples, 0.10%)</title><rect x="178.2" y="245" width="1.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="181.23" y="255.5" ></text>
</g>
<g >
<title>std::f64::{impl#0   (1 samples, 0.10%)</title><rect x="103.6" y="53" width="1.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="106.59" y="63.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::get_inner&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (6 samples, 0.60%)</title><rect x="1175.8" y="245" width="7.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1178.78" y="255.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit   (15 samples, 1.51%)</title><rect x="543.1" y="133" width="17.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="546.13" y="143.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, (isize, isize)&gt;   (6 samples, 0.60%)</title><rect x="1175.8" y="293" width="7.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1178.78" y="303.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity&lt;(isize, isize)&gt;   (7 samples, 0.70%)</title><rect x="165.2" y="181" width="8.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="168.20" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (7 samples, 0.70%)</title><rect x="165.2" y="165" width="8.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="168.20" y="175.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (30 samples, 3.01%)</title><rect x="1072.7" y="197" width="35.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1075.71" y="207.5" >cor..</text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (13 samples, 1.31%)</title><rect x="1075.1" y="117" width="15.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1078.08" y="127.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (13 samples, 1.31%)</title><rect x="1057.3" y="245" width="15.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1060.31" y="255.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (40 samples, 4.02%)</title><rect x="972.0" y="181" width="47.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="975.01" y="191.5" >hash..</text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (13 samples, 1.31%)</title><rect x="1057.3" y="213" width="15.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1060.31" y="223.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset&lt;core::hash::sip::Sip13Rounds&gt;   (1 samples, 0.10%)</title><rect x="1182.9" y="165" width="1.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1185.89" y="175.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, (isize, isize)&gt;   (39 samples, 3.92%)</title><rect x="1072.7" y="277" width="46.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1075.71" y="287.5" >std:..</text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (48 samples, 4.82%)</title><rect x="910.4" y="165" width="56.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="913.40" y="175.5" >std::c..</text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::remove&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (173 samples, 17.37%)</title><rect x="847.6" y="245" width="205.0" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="850.61" y="255.5" >hashbrown::set::HashSet&lt;(i..</text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_byte   (2 samples, 0.20%)</title><rect x="1116.5" y="165" width="2.4" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1119.55" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_inner   (106 samples, 10.64%)</title><rect x="512.3" y="165" width="125.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="515.33" y="175.5" >hashbrown::raw:..</text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (13 samples, 1.31%)</title><rect x="1075.1" y="133" width="15.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1078.08" y="143.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (52 samples, 5.22%)</title><rect x="729.1" y="181" width="61.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="732.14" y="191.5" >std::c..</text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (2 samples, 0.20%)</title><rect x="1184.1" y="229" width="2.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1187.08" y="239.5" ></text>
</g>
<g >
<title>core::num::{impl#9   (1 samples, 0.10%)</title><rect x="966.1" y="101" width="1.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="969.08" y="111.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#23   (42 samples, 4.22%)</title><rect x="858.3" y="149" width="49.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="861.27" y="159.5" >core:..</text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys&lt;core::hash::sip::Sip13Rounds&gt;   (4 samples, 0.40%)</title><rect x="724.4" y="149" width="4.7" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="727.40" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find_or_find_insert_slot&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (7 samples, 0.70%)</title><rect x="1135.5" y="229" width="8.3" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1138.50" y="239.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (1 samples, 0.10%)</title><rect x="1188.8" y="165" width="1.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1191.82" y="175.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains_key&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (6 samples, 0.60%)</title><rect x="1175.8" y="261" width="7.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1178.78" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::new&lt;(isize, isize)&gt;   (2 samples, 0.20%)</title><rect x="95.3" y="181" width="2.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="98.30" y="191.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (109 samples, 10.94%)</title><rect x="219.7" y="101" width="129.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="222.70" y="111.5" >core::hash::Hash..</text>
</g>
<g >
<title>alloc::alloc::dealloc   (11 samples, 1.10%)</title><rect x="179.4" y="149" width="13.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="182.42" y="159.5" ></text>
</g>
<g >
<title>??   (6 samples, 0.60%)</title><rect x="31.3" y="261" width="7.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="34.33" y="271.5" ></text>
</g>
<g >
<title>core::ops::index_range::{impl#1   (1 samples, 0.10%)</title><rect x="177.0" y="245" width="1.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="180.05" y="255.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (11 samples, 1.10%)</title><rect x="1077.4" y="85" width="13.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1080.45" y="95.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#83   (1 samples, 0.10%)</title><rect x="1156.8" y="181" width="1.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1159.83" y="191.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each&lt;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt10::get_inbetween_points::{closure_env#0   (1 samples, 0.10%)</title><rect x="173.5" y="149" width="1.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="176.49" y="159.5" ></text>
</g>
<g >
<title>core::alloc::layout::Layout::array&lt;(isize, isize)&gt;   (1 samples, 0.10%)</title><rect x="172.3" y="117" width="1.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="175.31" y="127.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (7 samples, 0.70%)</title><rect x="1148.5" y="85" width="8.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1151.53" y="95.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (13 samples, 1.31%)</title><rect x="1120.1" y="213" width="15.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1123.10" y="223.5" ></text>
</g>
<g >
<title>alloc::vec::spec_extend::{impl#0   (2 samples, 0.20%)</title><rect x="1059.7" y="197" width="2.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1062.68" y="207.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt10::get_inbetween_points::{closure_env#1   (9 samples, 0.90%)</title><rect x="1062.0" y="181" width="10.7" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1065.05" y="191.5" ></text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::remove&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (24 samples, 2.41%)</title><rect x="1145.0" y="261" width="28.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1147.98" y="271.5" >ha..</text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_inner   (40 samples, 4.02%)</title><rect x="972.0" y="165" width="47.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="975.01" y="175.5" >hash..</text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::erase   (3 samples, 0.30%)</title><rect x="1169.9" y="165" width="3.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1172.86" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_empty   (8 samples, 0.80%)</title><rect x="621.3" y="149" width="9.5" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="624.33" y="159.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#23   (2 samples, 0.20%)</title><rect x="1175.8" y="181" width="2.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1178.78" y="191.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#5   (43 samples, 4.32%)</title><rect x="857.1" y="165" width="50.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="860.09" y="175.5" >core:..</text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (1 samples, 0.10%)</title><rect x="1174.6" y="213" width="1.2" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1177.60" y="223.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (1 samples, 0.10%)</title><rect x="1184.1" y="101" width="1.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1187.08" y="111.5" ></text>
</g>
<g >
<title>attempt10::get_inbetween_points   (106 samples, 10.64%)</title><rect x="50.3" y="261" width="125.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="53.28" y="271.5" >attempt10::get_..</text>
</g>
<g >
<title>core::hash::impls::{impl#23   (50 samples, 5.02%)</title><rect x="658.1" y="165" width="59.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="661.05" y="175.5" >core::..</text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (41 samples, 4.12%)</title><rect x="115.4" y="117" width="48.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="118.44" y="127.5" >core..</text>
</g>
<g >
<title>core::iter::range::{impl#5   (4 samples, 0.40%)</title><rect x="110.7" y="117" width="4.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="113.70" y="127.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (270 samples, 27.11%)</title><rect x="192.4" y="197" width="319.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="195.45" y="207.5" >hashbrown::map::make_hash&lt;(isize, isize), s..</text>
</g>
<g >
<title>core::hash::impls::{impl#23   (13 samples, 1.31%)</title><rect x="1075.1" y="165" width="15.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1078.08" y="175.5" ></text>
</g>
<g >
<title>malloc   (2 samples, 0.20%)</title><rect x="169.9" y="69" width="2.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="172.94" y="79.5" ></text>
</g>
<g >
<title>core::cmp::min_by&lt;isize, fn(&amp;isize, &amp;isize) -&gt; core::cmp::Ordering&gt;   (1 samples, 0.10%)</title><rect x="79.9" y="229" width="1.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="82.90" y="239.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys&lt;core::hash::sip::Sip13Rounds&gt;   (1 samples, 0.10%)</title><rect x="909.2" y="133" width="1.2" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="912.22" y="143.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (45 samples, 4.52%)</title><rect x="560.9" y="149" width="53.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="563.90" y="159.5" >hashb..</text>
</g>
<g >
<title>attempt10::choose_next_point   (996 samples, 100.00%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >attempt10::choose_next_point  </text>
</g>
<g >
<title>attempt10::get_inbetween_points   (17 samples, 1.71%)</title><rect x="1052.6" y="277" width="20.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1055.57" y="287.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys&lt;core::hash::sip::Sip13Rounds&gt;   (8 samples, 0.80%)</title><rect x="351.2" y="133" width="9.5" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="354.20" y="143.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (2 samples, 0.20%)</title><rect x="1180.5" y="181" width="2.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1183.52" y="191.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#5   (8 samples, 0.80%)</title><rect x="1122.5" y="197" width="9.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1125.47" y="207.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc   (4 samples, 0.40%)</title><rect x="167.6" y="85" width="4.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="170.57" y="95.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_inner   (4 samples, 0.40%)</title><rect x="1178.2" y="197" width="4.7" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1181.15" y="207.5" ></text>
</g>
<g >
<title>core::ptr::write&lt;(isize, isize)&gt;   (1 samples, 0.10%)</title><rect x="173.5" y="53" width="1.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="176.49" y="63.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::fix_insert_slot   (7 samples, 0.70%)</title><rect x="803.8" y="181" width="8.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="806.78" y="191.5" ></text>
</g>
<g >
<title>attempt10::is_close_int   (25 samples, 2.51%)</title><rect x="130.8" y="85" width="29.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="133.84" y="95.5" >at..</text>
</g>
<g >
<title>core::hash::sip::{impl#8   (31 samples, 3.11%)</title><rect x="930.5" y="117" width="36.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="933.54" y="127.5" >cor..</text>
</g>
<g >
<title>attempt10::main   (996 samples, 100.00%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >attempt10::main  </text>
</g>
<g >
<title>core::cmp::Ord::min&lt;isize&gt;   (1 samples, 0.10%)</title><rect x="1056.1" y="261" width="1.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1059.12" y="271.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (1 samples, 0.10%)</title><rect x="1174.6" y="165" width="1.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1177.60" y="175.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#18   (2 samples, 0.20%)</title><rect x="1175.8" y="165" width="2.4" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1178.78" y="175.5" ></text>
</g>
<g >
<title>core::core_arch::x86::sse2::_mm_movemask_epi8   (3 samples, 0.30%)</title><rect x="835.8" y="165" width="3.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="838.76" y="175.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (8 samples, 0.80%)</title><rect x="1009.9" y="101" width="9.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1012.92" y="111.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#5   (1 samples, 0.10%)</title><rect x="38.4" y="261" width="1.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="41.43" y="271.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (2 samples, 0.20%)</title><rect x="102.4" y="85" width="2.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="105.41" y="95.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (11 samples, 1.10%)</title><rect x="1077.4" y="101" width="13.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1080.45" y="111.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt10::get_inbetween_points::{closure_env#1   (1 samples, 0.10%)</title><rect x="1174.6" y="197" width="1.2" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1177.60" y="207.5" ></text>
</g>
<g >
<title>attempt10::get_inbetween_points::{closure#1   (1 samples, 0.10%)</title><rect x="1174.6" y="133" width="1.2" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1177.60" y="143.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#5   (2 samples, 0.20%)</title><rect x="1175.8" y="197" width="2.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1178.78" y="207.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains_key&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (376 samples, 37.75%)</title><rect x="192.4" y="229" width="445.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="195.45" y="239.5" >hashbrown::map::HashMap&lt;(isize, isize), (), std::collections..</text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (41 samples, 4.12%)</title><rect x="859.5" y="117" width="48.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="862.46" y="127.5" >core..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt10::get_inbetween_points::{closure_env#1   (70 samples, 7.03%)</title><rect x="81.1" y="245" width="82.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="84.08" y="255.5" >core::ite..</text>
</g>
<g >
<title>core::hash::sip::{impl#5   (103 samples, 10.34%)</title><rect x="226.8" y="53" width="122.0" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="229.81" y="63.5" >core::hash::sip..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::extend_trusted&lt;(isize, isize), alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt10::get_inbetween_points::{closure_env#0   (1 samples, 0.10%)</title><rect x="173.5" y="165" width="1.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="176.49" y="175.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (100 samples, 10.04%)</title><rect x="848.8" y="181" width="118.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="851.80" y="191.5" >core::hash::Bu..</text>
</g>
<g >
<title>hashbrown::raw::h2   (13 samples, 1.31%)</title><rect x="992.1" y="149" width="15.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="995.15" y="159.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (2 samples, 0.20%)</title><rect x="97.7" y="101" width="2.3" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="100.67" y="111.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (5 samples, 0.50%)</title><rect x="1161.6" y="133" width="5.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1164.57" y="143.5" ></text>
</g>
<g >
<title>core::hash::sip::SipHasher13::new_with_keys   (1 samples, 0.10%)</title><rect x="909.2" y="149" width="1.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="912.22" y="159.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::get_inner&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (39 samples, 3.92%)</title><rect x="1072.7" y="229" width="46.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1075.71" y="239.5" >hash..</text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.10%)</title><rect x="839.3" y="181" width="1.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="842.32" y="191.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (45 samples, 4.52%)</title><rect x="664.0" y="133" width="53.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="666.98" y="143.5" >core:..</text>
</g>
<g >
<title>core::hash::impls::{impl#18   (42 samples, 4.22%)</title><rect x="858.3" y="133" width="49.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="861.27" y="143.5" >core:..</text>
</g>
<g >
<title>std::collections::hash::map::{impl#83   (2 samples, 0.20%)</title><rect x="1090.5" y="181" width="2.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1093.48" y="191.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#83   (2 samples, 0.20%)</title><rect x="908.0" y="165" width="2.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="911.03" y="175.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (1 samples, 0.10%)</title><rect x="1182.9" y="245" width="1.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1185.89" y="255.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (1 samples, 0.10%)</title><rect x="1185.3" y="149" width="1.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1188.26" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#15   (4 samples, 0.40%)</title><rect x="39.6" y="261" width="4.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="42.62" y="271.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.10%)</title><rect x="790.7" y="165" width="1.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="793.74" y="175.5" ></text>
</g>
<g >
<title>attempt10::choose_next_point   (994 samples, 99.80%)</title><rect x="11.2" y="309" width="1177.6" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="14.18" y="319.5" >attempt10::choose_next_point  </text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (8 samples, 0.80%)</title><rect x="1122.5" y="149" width="9.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1125.47" y="159.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (7 samples, 0.70%)</title><rect x="1148.5" y="117" width="8.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1151.53" y="127.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (2 samples, 0.20%)</title><rect x="1175.8" y="213" width="2.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1178.78" y="223.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (7 samples, 0.70%)</title><rect x="1123.7" y="101" width="8.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1126.65" y="111.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (118 samples, 11.85%)</title><rect x="650.9" y="197" width="139.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="653.94" y="207.5" >core::hash::Build..</text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (7 samples, 0.70%)</title><rect x="1148.5" y="133" width="8.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1151.53" y="143.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (1 samples, 0.10%)</title><rect x="1184.1" y="117" width="1.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1187.08" y="127.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (7 samples, 0.70%)</title><rect x="1123.7" y="117" width="8.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1126.65" y="127.5" ></text>
</g>
</g>
</svg>
