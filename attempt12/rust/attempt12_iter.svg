<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="406.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="389" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="389" > </text>
<g id="frames">
<g >
<title>std::io::buffered::linewriter::{impl#2   (1 samples, 0.02%)</title><rect x="1189.8" y="197" width="0.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1192.82" y="207.5" ></text>
</g>
<g >
<title>free   (2 samples, 0.03%)</title><rect x="1180.4" y="117" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1183.42" y="127.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc   (5 samples, 0.08%)</title><rect x="1174.6" y="85" width="0.9" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1177.57" y="95.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#15   (1 samples, 0.02%)</title><rect x="1177.9" y="229" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1180.94" y="239.5" ></text>
</g>
<g >
<title>core::slice::cmp::{impl#10   (37 samples, 0.56%)</title><rect x="1181.3" y="229" width="6.6" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1184.31" y="239.5" ></text>
</g>
<g >
<title>std::sys::unix::fd::FileDesc::write   (1 samples, 0.02%)</title><rect x="1189.8" y="117" width="0.2" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1192.82" y="127.5" ></text>
</g>
<g >
<title>core::slice::{impl#0   (1,691 samples, 25.42%)</title><rect x="768.9" y="213" width="300.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="771.94" y="223.5" >core::slice::{impl#0  </text>
</g>
<g >
<title>alloc::slice::hack::to_vec&lt;(isize, isize), alloc::alloc::Global&gt;   (139 samples, 2.09%)</title><rect x="1083.0" y="181" width="24.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1086.05" y="191.5" >a..</text>
</g>
<g >
<title>alloc::vec::{impl#8   (24 samples, 0.36%)</title><rect x="298.7" y="213" width="4.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="301.75" y="223.5" ></text>
</g>
<g >
<title>all (6,653 samples, 100%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.02%)</title><rect x="1188.8" y="117" width="0.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1191.76" y="127.5" ></text>
</g>
<g >
<title>std::io::stdio::{impl#1   (1 samples, 0.02%)</title><rect x="1189.8" y="149" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1192.82" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::pop&lt;(isize, isize), alloc::alloc::Global&gt;   (62 samples, 0.93%)</title><rect x="185.9" y="213" width="11.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="188.94" y="223.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (5 samples, 0.08%)</title><rect x="1174.6" y="117" width="0.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1177.57" y="127.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (10 samples, 0.15%)</title><rect x="1179.5" y="181" width="1.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1182.54" y="191.5" ></text>
</g>
<g >
<title>free   (40 samples, 0.60%)</title><rect x="1125.8" y="101" width="7.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1128.79" y="111.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc   (471 samples, 7.08%)</title><rect x="681.5" y="101" width="83.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="684.50" y="111.5" >alloc::al..</text>
</g>
<g >
<title>__rust_dealloc   (5 samples, 0.08%)</title><rect x="1179.5" y="117" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1182.54" y="127.5" ></text>
</g>
<g >
<title>core::slice::cmp::{impl#10   (214 samples, 3.22%)</title><rect x="1133.4" y="213" width="38.0" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1136.42" y="223.5" >cor..</text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (10 samples, 0.15%)</title><rect x="1179.5" y="197" width="1.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1182.54" y="207.5" ></text>
</g>
<g >
<title>core::alloc::layout::Layout::array&lt;(isize, isize)&gt;   (19 samples, 0.29%)</title><rect x="1095.3" y="101" width="3.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1098.29" y="111.5" ></text>
</g>
<g >
<title>__rust_alloc   (7 samples, 0.11%)</title><rect x="1085.9" y="53" width="1.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1088.89" y="63.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (3 samples, 0.05%)</title><rect x="1179.0" y="165" width="0.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1182.00" y="175.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (1 samples, 0.02%)</title><rect x="286.5" y="197" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="289.51" y="207.5" ></text>
</g>
<g >
<title>core::fmt::write   (1 samples, 0.02%)</title><rect x="1189.8" y="245" width="0.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1192.82" y="255.5" ></text>
</g>
<g >
<title>core::slice::cmp::{impl#10   (3 samples, 0.05%)</title><rect x="1188.9" y="245" width="0.6" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1191.94" y="255.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (37 samples, 0.56%)</title><rect x="1181.3" y="213" width="6.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1184.31" y="223.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (1 samples, 0.02%)</title><rect x="1188.2" y="181" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1191.23" y="191.5" ></text>
</g>
<g >
<title>alloc::slice::hack::to_vec&lt;(isize, isize), alloc::alloc::Global&gt;   (750 samples, 11.27%)</title><rect x="467.2" y="165" width="133.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="470.24" y="175.5" >alloc::slice::ha..</text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (259 samples, 3.89%)</title><rect x="554.3" y="133" width="46.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="557.33" y="143.5" >core..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::current_memory&lt;(isize, isize), alloc::alloc::Global&gt;   (22 samples, 0.33%)</title><rect x="765.0" y="117" width="3.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="768.04" y="127.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#10   (2 samples, 0.03%)</title><rect x="1188.0" y="245" width="0.4" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="1191.05" y="255.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (1 samples, 0.02%)</title><rect x="1188.8" y="165" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1191.76" y="175.5" ></text>
</g>
<g >
<title>core::ops::index_range::{impl#1   (166 samples, 2.50%)</title><rect x="614.6" y="197" width="29.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="617.63" y="207.5" >co..</text>
</g>
<g >
<title>core::slice::iter::{impl#181   (10 samples, 0.15%)</title><rect x="1186.1" y="197" width="1.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1189.10" y="207.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (452 samples, 6.79%)</title><rect x="988.7" y="165" width="80.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="991.69" y="175.5" >core::sli..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (82 samples, 1.23%)</title><rect x="1084.1" y="117" width="14.6" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1087.11" y="127.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (1 samples, 0.02%)</title><rect x="1188.8" y="245" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1191.76" y="255.5" ></text>
</g>
<g >
<title>write   (1 samples, 0.02%)</title><rect x="1189.8" y="101" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1192.82" y="111.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (6 samples, 0.09%)</title><rect x="1174.6" y="149" width="1.0" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1177.57" y="159.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping&lt;(isize, isize)&gt;   (1 samples, 0.02%)</title><rect x="1188.2" y="165" width="0.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1191.23" y="175.5" ></text>
</g>
<g >
<title>attempt12::choose_next_point   (6,504 samples, 97.76%)</title><rect x="17.8" y="245" width="1153.6" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="20.80" y="255.5" >attempt12::choose_next_point  </text>
</g>
<g >
<title>core::ops::index_range::IndexRange::next_unchecked   (8 samples, 0.12%)</title><rect x="642.7" y="181" width="1.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="645.66" y="191.5" ></text>
</g>
<g >
<title>attempt12::choose_next_point   (6,637 samples, 99.76%)</title><rect x="10.7" y="261" width="1177.2" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="13.71" y="271.5" >attempt12::choose_next_point  </text>
</g>
<g >
<title>core::slice::cmp::{impl#10   (1,691 samples, 25.42%)</title><rect x="768.9" y="197" width="300.0" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="771.94" y="207.5" >core::slice::cmp::{impl#10  </text>
</g>
<g >
<title>attempt12::get_inbetween_points   (3 samples, 0.05%)</title><rect x="1187.9" y="261" width="0.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1190.87" y="271.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::{impl#14   (1 samples, 0.02%)</title><rect x="1188.8" y="229" width="0.1" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1191.76" y="239.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (1 samples, 0.02%)</title><rect x="1188.6" y="229" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1191.58" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (493 samples, 7.41%)</title><rect x="681.5" y="165" width="87.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="684.50" y="175.5" >alloc::vec..</text>
</g>
<g >
<title>attempt12::choose_next_point   (6,649 samples, 99.94%)</title><rect x="10.2" y="277" width="1179.3" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="13.18" y="287.5" >attempt12::choose_next_point  </text>
</g>
<g >
<title>core::ptr::write&lt;(isize, isize)&gt;   (26 samples, 0.39%)</title><rect x="52.0" y="213" width="4.6" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="55.04" y="223.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (471 samples, 7.08%)</title><rect x="681.5" y="117" width="83.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="684.50" y="127.5" >alloc::al..</text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_alloc   (1 samples, 0.02%)</title><rect x="1175.3" y="69" width="0.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1178.28" y="79.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (2 samples, 0.03%)</title><rect x="1189.5" y="277" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1192.47" y="287.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (1 samples, 0.02%)</title><rect x="1188.8" y="197" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1191.76" y="207.5" ></text>
</g>
<g >
<title>alloc::slice::hack::to_vec&lt;(isize, isize), alloc::alloc::Global&gt;   (2 samples, 0.03%)</title><rect x="1188.0" y="213" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1191.05" y="223.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::push&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.02%)</title><rect x="10.5" y="261" width="0.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="13.53" y="271.5" ></text>
</g>
<g >
<title>core::alloc::layout::{impl#0   (1 samples, 0.02%)</title><rect x="1175.5" y="101" width="0.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1178.46" y="111.5" ></text>
</g>
<g >
<title>std::io::Write::write_fmt::{impl#0   (1 samples, 0.02%)</title><rect x="1189.8" y="229" width="0.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1192.82" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::push&lt;(isize, isize), alloc::alloc::Global&gt;   (5 samples, 0.08%)</title><rect x="16.6" y="245" width="0.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="19.56" y="255.5" ></text>
</g>
<g >
<title>alloc::raw_vec::{impl#3   (10 samples, 0.15%)</title><rect x="1179.5" y="165" width="1.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1182.54" y="175.5" ></text>
</g>
<g >
<title>??   (12 samples, 0.18%)</title><rect x="1175.8" y="133" width="2.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1178.81" y="143.5" ></text>
</g>
<g >
<title>core::ptr::non_null::{impl#12   (2 samples, 0.03%)</title><rect x="1171.0" y="165" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1174.02" y="175.5" ></text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;(isize, isize)&gt;::assume_init_read&lt;(isize, isize)&gt;   (37 samples, 0.56%)</title><rect x="1115.7" y="181" width="6.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1118.68" y="191.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc   (56 samples, 0.84%)</title><rect x="1085.4" y="69" width="9.9" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1088.36" y="79.5" ></text>
</g>
<g >
<title>attempt12::choose_next_point   (6,652 samples, 99.98%)</title><rect x="10.0" y="293" width="1179.8" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >attempt12::choose_next_point  </text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_alloc   (5 samples, 0.08%)</title><rect x="1094.4" y="53" width="0.9" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1097.40" y="63.5" ></text>
</g>
<g >
<title>free   (334 samples, 5.02%)</title><rect x="704.6" y="85" width="59.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="707.56" y="95.5" >free  </text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::push&lt;(isize, isize), alloc::alloc::Global&gt;   (48 samples, 0.72%)</title><rect x="48.1" y="229" width="8.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="51.13" y="239.5" ></text>
</g>
<g >
<title>core::alloc::layout::{impl#0   (62 samples, 0.93%)</title><rect x="543.3" y="69" width="11.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="546.33" y="79.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::current_memory&lt;(isize, isize), alloc::alloc::Global&gt;   (2 samples, 0.03%)</title><rect x="1133.1" y="133" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1136.07" y="143.5" ></text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;(isize, isize)&gt;::assume_init_read&lt;(isize, isize)&gt;   (1 samples, 0.02%)</title><rect x="1188.6" y="213" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1191.58" y="223.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (63 samples, 0.95%)</title><rect x="1122.2" y="181" width="11.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1125.25" y="191.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (37 samples, 0.56%)</title><rect x="1115.7" y="149" width="6.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1118.68" y="159.5" ></text>
</g>
<g >
<title>__rust_dealloc   (121 samples, 1.82%)</title><rect x="683.1" y="85" width="21.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="686.09" y="95.5" >_..</text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping&lt;(isize, isize)&gt;   (51 samples, 0.77%)</title><rect x="1098.7" y="133" width="9.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1101.66" y="143.5" ></text>
</g>
<g >
<title>malloc   (3 samples, 0.05%)</title><rect x="1174.7" y="69" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1177.75" y="79.5" ></text>
</g>
<g >
<title>std::io::buffered::bufwriter::BufWriter::flush_buf&lt;std::io::stdio::StdoutRaw&gt;   (1 samples, 0.02%)</title><rect x="1189.8" y="165" width="0.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1192.82" y="175.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.02%)</title><rect x="1188.2" y="149" width="0.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1191.23" y="159.5" ></text>
</g>
<g >
<title>attempt12::main   (6,653 samples, 100.00%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >attempt12::main  </text>
</g>
<g >
<title>alloc::alloc::dealloc   (8 samples, 0.12%)</title><rect x="1179.5" y="133" width="1.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1182.54" y="143.5" ></text>
</g>
<g >
<title>malloc   (1 samples, 0.02%)</title><rect x="1188.0" y="85" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1191.05" y="95.5" ></text>
</g>
<g >
<title>core::ops::index_range::{impl#1   (2 samples, 0.03%)</title><rect x="1178.3" y="229" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1181.29" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#15   (1 samples, 0.02%)</title><rect x="1107.7" y="213" width="0.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1110.70" y="223.5" ></text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_dealloc   (1 samples, 0.02%)</title><rect x="1180.8" y="117" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1183.78" y="127.5" ></text>
</g>
<g >
<title>alloc::slice::{impl#0   (750 samples, 11.27%)</title><rect x="467.2" y="181" width="133.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="470.24" y="191.5" >alloc::slice::{i..</text>
</g>
<g >
<title>alloc::slice::hack::{impl#1   (750 samples, 11.27%)</title><rect x="467.2" y="149" width="133.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="470.24" y="159.5" >alloc::slice::ha..</text>
</g>
<g >
<title>core::slice::{impl#0   (3 samples, 0.05%)</title><rect x="1188.9" y="261" width="0.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1191.94" y="271.5" ></text>
</g>
<g >
<title>attempt12::get_inbetween_points   (220 samples, 3.31%)</title><rect x="1068.9" y="229" width="39.0" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1071.86" y="239.5" >att..</text>
</g>
<g >
<title>core::array::iter::{impl#2   (2 samples, 0.03%)</title><rect x="1189.5" y="245" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1192.47" y="255.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.02%)</title><rect x="1188.0" y="149" width="0.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1191.05" y="159.5" ></text>
</g>
<g >
<title>??   (258 samples, 3.88%)</title><rect x="554.5" y="101" width="45.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="557.51" y="111.5" >??  </text>
</g>
<g >
<title>core::slice::iter::{impl#181   (2 samples, 0.03%)</title><rect x="1189.1" y="213" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1192.11" y="223.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#10   (139 samples, 2.09%)</title><rect x="1083.0" y="213" width="24.7" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="1086.05" y="223.5" >a..</text>
</g>
<g >
<title>core::ops::index_range::{impl#1   (1 samples, 0.02%)</title><rect x="1188.4" y="245" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1191.40" y="255.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc   (1 samples, 0.02%)</title><rect x="1188.0" y="101" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1191.05" y="111.5" ></text>
</g>
<g >
<title>alloc::slice::{impl#0   (2 samples, 0.03%)</title><rect x="1188.0" y="229" width="0.4" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1191.05" y="239.5" ></text>
</g>
<g >
<title>std::io::stdio::_print   (1 samples, 0.02%)</title><rect x="1189.8" y="325" width="0.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1192.82" y="335.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (398 samples, 5.98%)</title><rect x="472.7" y="85" width="70.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="475.74" y="95.5" >alloc::..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (493 samples, 7.41%)</title><rect x="681.5" y="213" width="87.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="684.50" y="223.5" >core::ptr:..</text>
</g>
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (2 samples, 0.03%)</title><rect x="1189.5" y="261" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1192.47" y="271.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (63 samples, 0.95%)</title><rect x="1122.2" y="229" width="11.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1125.25" y="239.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (82 samples, 1.23%)</title><rect x="1084.1" y="133" width="14.6" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1087.11" y="143.5" ></text>
</g>
<g >
<title>malloc   (302 samples, 4.54%)</title><rect x="487.1" y="37" width="53.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="490.11" y="47.5" >mallo..</text>
</g>
<g >
<title>alloc::alloc::{impl#1   (61 samples, 0.92%)</title><rect x="1122.2" y="133" width="10.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1125.25" y="143.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (464 samples, 6.97%)</title><rect x="472.0" y="117" width="82.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="475.03" y="127.5" >alloc::ra..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (1 samples, 0.02%)</title><rect x="1188.8" y="261" width="0.1" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1191.76" y="271.5" ></text>
</g>
<g >
<title>core::alloc::layout::{impl#0   (19 samples, 0.29%)</title><rect x="1095.3" y="85" width="3.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1098.29" y="95.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (209 samples, 3.14%)</title><rect x="644.4" y="133" width="37.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="647.43" y="143.5" >cor..</text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (63 samples, 0.95%)</title><rect x="1122.2" y="213" width="11.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1125.25" y="223.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc   (61 samples, 0.92%)</title><rect x="1122.2" y="117" width="10.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1125.25" y="127.5" ></text>
</g>
<g >
<title>??   (51 samples, 0.77%)</title><rect x="1098.7" y="117" width="9.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1101.66" y="127.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (1 samples, 0.02%)</title><rect x="1188.8" y="213" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1191.76" y="223.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::{impl#14   (493 samples, 7.41%)</title><rect x="681.5" y="181" width="87.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="684.50" y="191.5" >core::ptr:..</text>
</g>
<g >
<title>alloc::alloc::dealloc   (1 samples, 0.02%)</title><rect x="1188.8" y="149" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1191.76" y="159.5" ></text>
</g>
<g >
<title>malloc   (41 samples, 0.62%)</title><rect x="1087.1" y="53" width="7.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1090.13" y="63.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (5 samples, 0.08%)</title><rect x="1178.6" y="213" width="0.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1181.65" y="223.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (8 samples, 0.12%)</title><rect x="1179.5" y="149" width="1.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1182.54" y="159.5" ></text>
</g>
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (39 samples, 0.59%)</title><rect x="1115.3" y="213" width="6.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1118.33" y="223.5" ></text>
</g>
<g >
<title>alloc::slice::{impl#0   (23 samples, 0.35%)</title><rect x="1173.9" y="213" width="4.0" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1176.86" y="223.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (209 samples, 3.14%)</title><rect x="644.4" y="149" width="37.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="647.43" y="159.5" >cor..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::current_memory&lt;(isize, isize), alloc::alloc::Global&gt;   (2 samples, 0.03%)</title><rect x="1181.0" y="149" width="0.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1183.95" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (10 samples, 0.15%)</title><rect x="1179.5" y="229" width="1.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1182.54" y="239.5" ></text>
</g>
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (5 samples, 0.08%)</title><rect x="1178.6" y="229" width="0.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1181.65" y="239.5" ></text>
</g>
<g >
<title>alloc::slice::hack::{impl#1   (139 samples, 2.09%)</title><rect x="1083.0" y="165" width="24.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1086.05" y="175.5" >a..</text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (37 samples, 0.56%)</title><rect x="1115.7" y="165" width="6.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1118.68" y="175.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (493 samples, 7.41%)</title><rect x="681.5" y="149" width="87.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="684.50" y="159.5" >core::ptr:..</text>
</g>
<g >
<title>alloc::vec::{impl#10   (750 samples, 11.27%)</title><rect x="467.2" y="197" width="133.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="470.24" y="207.5" >alloc::vec::{imp..</text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (16 samples, 0.24%)</title><rect x="600.3" y="181" width="2.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="603.27" y="191.5" ></text>
</g>
<g >
<title>core::ops::index_range::IndexRange::next_unchecked   (1 samples, 0.02%)</title><rect x="1115.2" y="197" width="0.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1118.15" y="207.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (442 samples, 6.64%)</title><rect x="603.1" y="213" width="78.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="606.10" y="223.5" >core::arr..</text>
</g>
<g >
<title>__rust_dealloc   (20 samples, 0.30%)</title><rect x="1122.2" y="101" width="3.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1125.25" y="111.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (2 samples, 0.03%)</title><rect x="59.7" y="213" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="62.66" y="223.5" ></text>
</g>
<g >
<title>core::alloc::layout::Layout::array&lt;(isize, isize)&gt;   (1 samples, 0.02%)</title><rect x="1175.5" y="117" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1178.46" y="127.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::push&lt;(isize, isize), alloc::alloc::Global&gt;   (353 samples, 5.31%)</title><rect x="196.9" y="213" width="62.7" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="199.94" y="223.5" >alloc:..</text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (13 samples, 0.20%)</title><rect x="1175.6" y="165" width="2.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1178.63" y="175.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#15   (16 samples, 0.24%)</title><rect x="600.3" y="197" width="2.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="603.27" y="207.5" ></text>
</g>
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (1 samples, 0.02%)</title><rect x="1188.6" y="245" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1191.58" y="255.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (5 samples, 0.08%)</title><rect x="1174.6" y="101" width="0.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1177.57" y="111.5" ></text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;(isize, isize)&gt;::assume_init_read&lt;(isize, isize)&gt;   (209 samples, 3.14%)</title><rect x="644.4" y="165" width="37.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="647.43" y="175.5" >cor..</text>
</g>
<g >
<title>core::array::iter::{impl#2   (211 samples, 3.17%)</title><rect x="644.1" y="181" width="37.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="647.07" y="191.5" >cor..</text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (398 samples, 5.98%)</title><rect x="472.7" y="69" width="70.6" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="475.74" y="79.5" >alloc::..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::pop&lt;(isize, isize), alloc::alloc::Global&gt;   (6 samples, 0.09%)</title><rect x="15.5" y="245" width="1.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="18.50" y="255.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (51 samples, 0.77%)</title><rect x="1098.7" y="149" width="9.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1101.66" y="159.5" ></text>
</g>
<g >
<title>attempt12::choose_next_point   (5,688 samples, 85.50%)</title><rect x="60.0" y="229" width="1008.9" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="63.02" y="239.5" >attempt12::choose_next_point  </text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (464 samples, 6.97%)</title><rect x="472.0" y="101" width="82.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="475.03" y="111.5" >alloc::ra..</text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (59 samples, 0.89%)</title><rect x="1084.8" y="85" width="10.5" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1087.82" y="95.5" ></text>
</g>
<g >
<title>std::io::stdio::{impl#13   (1 samples, 0.02%)</title><rect x="1189.8" y="277" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1192.82" y="287.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc   (384 samples, 5.77%)</title><rect x="475.2" y="53" width="68.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="478.22" y="63.5" >alloc::..</text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (1 samples, 0.02%)</title><rect x="1188.6" y="181" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1191.58" y="191.5" ></text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_dealloc   (1 samples, 0.02%)</title><rect x="1132.9" y="101" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1135.89" y="111.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#10   (23 samples, 0.35%)</title><rect x="1173.9" y="229" width="4.0" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="1176.86" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (493 samples, 7.41%)</title><rect x="681.5" y="197" width="87.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="684.50" y="207.5" >alloc::vec..</text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (2 samples, 0.03%)</title><rect x="1189.5" y="197" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1192.47" y="207.5" ></text>
</g>
<g >
<title>attempt12::choose_next_point   (304 samples, 4.57%)</title><rect x="303.0" y="213" width="53.9" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="306.00" y="223.5" >attem..</text>
</g>
<g >
<title>core::slice::{impl#0   (214 samples, 3.22%)</title><rect x="1133.4" y="229" width="38.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1136.42" y="239.5" >cor..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::{impl#14   (63 samples, 0.95%)</title><rect x="1122.2" y="197" width="11.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1125.25" y="207.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (3 samples, 0.05%)</title><rect x="1179.0" y="181" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1182.00" y="191.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (8 samples, 0.12%)</title><rect x="1178.1" y="245" width="1.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1181.12" y="255.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#5   (221 samples, 3.32%)</title><rect x="259.6" y="213" width="39.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="262.55" y="223.5" >all..</text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping&lt;(isize, isize)&gt;   (259 samples, 3.89%)</title><rect x="554.3" y="117" width="46.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="557.33" y="127.5" >core..</text>
</g>
<g >
<title>core::array::iter::{impl#2   (81 samples, 1.22%)</title><rect x="1107.9" y="229" width="14.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1110.88" y="239.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::{impl#14   (10 samples, 0.15%)</title><rect x="1179.5" y="213" width="1.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1182.54" y="223.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (2 samples, 0.03%)</title><rect x="1189.5" y="213" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1192.47" y="223.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (1 samples, 0.02%)</title><rect x="1188.6" y="197" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1191.58" y="207.5" ></text>
</g>
<g >
<title>std::io::buffered::linewritershim::{impl#1   (1 samples, 0.02%)</title><rect x="1189.8" y="181" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1192.82" y="191.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (3 samples, 0.05%)</title><rect x="1188.9" y="229" width="0.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1191.94" y="239.5" ></text>
</g>
<g >
<title>attempt12::choose_next_point   (6,652 samples, 99.98%)</title><rect x="10.0" y="309" width="1179.8" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >attempt12::choose_next_point  </text>
</g>
<g >
<title>std::io::stdio::print_to&lt;std::io::stdio::Stdout&gt;   (1 samples, 0.02%)</title><rect x="1189.8" y="309" width="0.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1192.82" y="319.5" ></text>
</g>
<g >
<title>alloc::raw_vec::{impl#3   (493 samples, 7.41%)</title><rect x="681.5" y="133" width="87.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="684.50" y="143.5" >alloc::raw..</text>
</g>
<g >
<title>attempt12::get_inbetween_points   (1,388 samples, 20.86%)</title><rect x="356.9" y="213" width="246.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="359.92" y="223.5" >attempt12::get_inbetween_points  </text>
</g>
<g >
<title>std::io::stdio::{impl#14   (1 samples, 0.02%)</title><rect x="1189.8" y="213" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.82" y="223.5" ></text>
</g>
<g >
<title>alloc::slice::{impl#0   (139 samples, 2.09%)</title><rect x="1083.0" y="197" width="24.7" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1086.05" y="207.5" >a..</text>
</g>
<g >
<title>alloc::slice::hack::to_vec&lt;(isize, isize), alloc::alloc::Global&gt;   (23 samples, 0.35%)</title><rect x="1173.9" y="197" width="4.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1176.86" y="207.5" ></text>
</g>
<g >
<title>core::ptr::non_null::{impl#12   (2 samples, 0.03%)</title><rect x="1068.5" y="149" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1071.51" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.02%)</title><rect x="1188.0" y="181" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1191.05" y="191.5" ></text>
</g>
<g >
<title>??   (183 samples, 2.75%)</title><rect x="731.3" y="69" width="32.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="734.34" y="79.5" >??  </text>
</g>
<g >
<title>core::slice::iter::{impl#181   (214 samples, 3.22%)</title><rect x="1133.4" y="197" width="38.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1136.42" y="207.5" >cor..</text>
</g>
<g >
<title>core::array::iter::{impl#2   (2 samples, 0.03%)</title><rect x="1188.4" y="261" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1191.40" y="271.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (67 samples, 1.01%)</title><rect x="1159.5" y="181" width="11.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1162.49" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#5   (2 samples, 0.03%)</title><rect x="17.4" y="245" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="20.45" y="255.5" ></text>
</g>
<g >
<title>attempt12::choose_next_point   (6,652 samples, 99.98%)</title><rect x="10.0" y="325" width="1179.8" height="15.0" fill="rgb(221,78,18)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >attempt12::choose_next_point  </text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;(isize, isize)&gt;::assume_init_read&lt;(isize, isize)&gt;   (2 samples, 0.03%)</title><rect x="1189.5" y="229" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1192.47" y="239.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.02%)</title><rect x="1177.9" y="213" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1180.94" y="223.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (39 samples, 0.59%)</title><rect x="1115.3" y="197" width="6.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1118.33" y="207.5" ></text>
</g>
<g >
<title>std::io::Write::write_fmt&lt;std::io::stdio::StdoutLock&gt;   (1 samples, 0.02%)</title><rect x="1189.8" y="261" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1192.82" y="271.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (1 samples, 0.02%)</title><rect x="1188.0" y="117" width="0.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1191.05" y="127.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (59 samples, 0.89%)</title><rect x="1084.8" y="101" width="10.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1087.82" y="111.5" ></text>
</g>
<g >
<title>core::ops::index_range::{impl#1   (29 samples, 0.44%)</title><rect x="1110.2" y="213" width="5.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1113.19" y="223.5" ></text>
</g>
<g >
<title>core::ptr::write&lt;(isize, isize)&gt;   (155 samples, 2.33%)</title><rect x="232.1" y="197" width="27.5" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="235.06" y="207.5" >c..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (6 samples, 0.09%)</title><rect x="1174.6" y="133" width="1.0" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1177.57" y="143.5" ></text>
</g>
<g >
<title>??   (2 samples, 0.03%)</title><rect x="1180.4" y="101" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1183.42" y="111.5" ></text>
</g>
<g >
<title>free   (1 samples, 0.02%)</title><rect x="1188.8" y="133" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1191.76" y="143.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (10 samples, 0.15%)</title><rect x="1179.5" y="245" width="1.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1182.54" y="255.5" ></text>
</g>
<g >
<title>attempt12::get_inbetween_points   (38 samples, 0.57%)</title><rect x="1171.4" y="245" width="6.7" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1174.38" y="255.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (63 samples, 0.95%)</title><rect x="1122.2" y="165" width="11.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1125.25" y="175.5" ></text>
</g>
<g >
<title>alloc::raw_vec::{impl#3   (63 samples, 0.95%)</title><rect x="1122.2" y="149" width="11.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1125.25" y="159.5" ></text>
</g>
<g >
<title>alloc::raw_vec::{impl#3   (1 samples, 0.02%)</title><rect x="1188.8" y="181" width="0.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1191.76" y="191.5" ></text>
</g>
<g >
<title>alloc::slice::hack::{impl#1   (2 samples, 0.03%)</title><rect x="1188.0" y="197" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1191.05" y="207.5" ></text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;(isize, isize)&gt;::assume_init_read&lt;(isize, isize)&gt;   (3 samples, 0.05%)</title><rect x="1179.0" y="197" width="0.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1182.00" y="207.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::pop&lt;(isize, isize), alloc::alloc::Global&gt;   (15 samples, 0.23%)</title><rect x="45.5" y="229" width="2.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="48.47" y="239.5" ></text>
</g>
<g >
<title>__rust_alloc   (46 samples, 0.69%)</title><rect x="478.9" y="37" width="8.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="481.95" y="47.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.02%)</title><rect x="1107.7" y="197" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1110.70" y="207.5" ></text>
</g>
<g >
<title>std::io::stdio::{impl#12   (1 samples, 0.02%)</title><rect x="1189.8" y="293" width="0.2" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1192.82" y="303.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (68 samples, 1.02%)</title><rect x="286.7" y="197" width="12.0" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="289.69" y="207.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (6 samples, 0.09%)</title><rect x="1174.6" y="165" width="1.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1177.57" y="175.5" ></text>
</g>
<g >
<title>alloc::slice::hack::{impl#1   (23 samples, 0.35%)</title><rect x="1173.9" y="181" width="4.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1176.86" y="191.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (1 samples, 0.02%)</title><rect x="1188.0" y="133" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1191.05" y="143.5" ></text>
</g>
<g >
<title>??   (20 samples, 0.30%)</title><rect x="1129.3" y="85" width="3.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1132.34" y="95.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (464 samples, 6.97%)</title><rect x="472.0" y="133" width="82.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="475.03" y="143.5" >alloc::ve..</text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_dealloc   (7 samples, 0.11%)</title><rect x="763.8" y="85" width="1.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="766.80" y="95.5" ></text>
</g>
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (211 samples, 3.17%)</title><rect x="644.1" y="197" width="37.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="647.07" y="207.5" >cor..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.02%)</title><rect x="1188.0" y="165" width="0.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1191.05" y="175.5" ></text>
</g>
<g >
<title>core::alloc::layout::Layout::array&lt;(isize, isize)&gt;   (62 samples, 0.93%)</title><rect x="543.3" y="85" width="11.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="546.33" y="95.5" ></text>
</g>
<g >
<title>core::slice::{impl#0   (37 samples, 0.56%)</title><rect x="1181.3" y="245" width="6.6" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1184.31" y="255.5" ></text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_alloc   (15 samples, 0.23%)</title><rect x="540.7" y="37" width="2.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="543.67" y="47.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping&lt;(isize, isize)&gt;   (13 samples, 0.20%)</title><rect x="1175.6" y="149" width="2.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1178.63" y="159.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (1,691 samples, 25.42%)</title><rect x="768.9" y="181" width="300.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="771.94" y="191.5" >core::slice::iter::{impl#181  </text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (82 samples, 1.23%)</title><rect x="1084.1" y="149" width="14.6" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1087.11" y="159.5" ></text>
</g>
<g >
<title>??   (82 samples, 1.23%)</title><rect x="171.4" y="213" width="14.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="174.40" y="223.5" ></text>
</g>
<g >
<title>std::sys::unix::stdio::{impl#3   (1 samples, 0.02%)</title><rect x="1189.8" y="133" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1192.82" y="143.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#5   (19 samples, 0.29%)</title><rect x="56.6" y="229" width="3.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="59.65" y="239.5" ></text>
</g>
<g >
<title>??   (13 samples, 0.20%)</title><rect x="43.2" y="229" width="2.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="46.17" y="239.5" ></text>
</g>
</g>
</svg>
