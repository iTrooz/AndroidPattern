<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="374.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="357" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="357" > </text>
<g id="frames">
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (26 samples, 0.41%)</title><rect x="1087.8" y="181" width="4.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1090.78" y="191.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt11::get_inbetween_points::{closure_env#1   (155 samples, 2.42%)</title><rect x="1092.6" y="149" width="28.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1095.57" y="159.5" >co..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (965 samples, 15.09%)</title><rect x="498.6" y="117" width="178.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="501.61" y="127.5" >core::iter::traits::ite..</text>
</g>
<g >
<title>core::array::iter::{impl#2   (3 samples, 0.05%)</title><rect x="1173.4" y="181" width="0.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1176.39" y="191.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (10 samples, 0.16%)</title><rect x="1172.1" y="213" width="1.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1175.10" y="223.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#2   (26 samples, 0.41%)</title><rect x="1173.9" y="197" width="4.8" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1176.95" y="207.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (3 samples, 0.05%)</title><rect x="1173.4" y="149" width="0.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1176.39" y="159.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (54 samples, 0.84%)</title><rect x="1082.6" y="197" width="10.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1085.61" y="207.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (257 samples, 4.02%)</title><rect x="1121.2" y="165" width="47.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1124.17" y="175.5" >core..</text>
</g>
<g >
<title>core::ops::index_range::{impl#1   (6 samples, 0.09%)</title><rect x="1086.7" y="181" width="1.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1089.67" y="191.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (26 samples, 0.41%)</title><rect x="1087.8" y="133" width="4.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1090.78" y="143.5" ></text>
</g>
<g >
<title>core::slice::cmp::{impl#10   (257 samples, 4.02%)</title><rect x="1121.2" y="181" width="47.4" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1124.17" y="191.5" >core..</text>
</g>
<g >
<title>core::slice::iter::{impl#181   (47 samples, 0.73%)</title><rect x="1178.7" y="181" width="8.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1181.74" y="191.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (958 samples, 14.98%)</title><rect x="499.9" y="85" width="176.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="502.90" y="95.5" >core::ops::function::i..</text>
</g>
<g >
<title>core::slice::iter::{impl#181   (4 samples, 0.06%)</title><rect x="1189.3" y="181" width="0.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1192.26" y="191.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#44   (7 samples, 0.11%)</title><rect x="497.3" y="69" width="1.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="500.32" y="79.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#1   (958 samples, 14.98%)</title><rect x="499.9" y="69" width="176.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="502.90" y="79.5" >attempt11::get_inbetwe..</text>
</g>
<g >
<title>fmodf64   (89 samples, 1.39%)</title><rect x="1103.5" y="53" width="16.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1106.46" y="63.5" ></text>
</g>
<g >
<title>attempt11::choose_next_point   (5,483 samples, 85.74%)</title><rect x="35.5" y="197" width="1011.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="38.46" y="207.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>attempt11::is_close_int   (91 samples, 1.42%)</title><rect x="1103.1" y="69" width="16.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1106.09" y="79.5" ></text>
</g>
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (1 samples, 0.02%)</title><rect x="1188.5" y="213" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1191.52" y="223.5" ></text>
</g>
<g >
<title>attempt11::is_close_int   (515 samples, 8.05%)</title><rect x="572.4" y="53" width="95.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="575.41" y="63.5" >attempt11::..</text>
</g>
<g >
<title>core::slice::iter::{impl#181   (2,008 samples, 31.40%)</title><rect x="676.7" y="149" width="370.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="679.67" y="159.5" >core::slice::iter::{impl#181  </text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (25 samples, 0.39%)</title><rect x="1174.1" y="117" width="4.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1177.13" y="127.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#5   (7 samples, 0.11%)</title><rect x="498.6" y="85" width="1.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="501.61" y="95.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6   (1 samples, 0.02%)</title><rect x="1173.9" y="133" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1176.95" y="143.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (155 samples, 2.42%)</title><rect x="1092.6" y="133" width="28.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1095.57" y="143.5" >co..</text>
</g>
<g >
<title>??   (4 samples, 0.06%)</title><rect x="28.5" y="197" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="31.45" y="207.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (26 samples, 0.41%)</title><rect x="1087.8" y="165" width="4.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1090.78" y="175.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#2   (155 samples, 2.42%)</title><rect x="1092.6" y="181" width="28.6" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1095.57" y="191.5" >at..</text>
</g>
<g >
<title>core::iter::sources::from_fn::{impl#0   (155 samples, 2.42%)</title><rect x="1092.6" y="197" width="28.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1095.57" y="207.5" >co..</text>
</g>
<g >
<title>??   (2 samples, 0.03%)</title><rect x="13.1" y="213" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="16.14" y="223.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (26 samples, 0.41%)</title><rect x="1173.9" y="149" width="4.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1176.95" y="159.5" ></text>
</g>
<g >
<title>core::cmp::Ord::min&lt;isize&gt;   (2 samples, 0.03%)</title><rect x="423.0" y="165" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="425.95" y="175.5" ></text>
</g>
<g >
<title>core::ptr::write&lt;(isize, isize)&gt;   (6 samples, 0.09%)</title><rect x="34.4" y="181" width="1.1" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="37.36" y="191.5" ></text>
</g>
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (3 samples, 0.05%)</title><rect x="1173.4" y="197" width="0.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1176.39" y="207.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (1 samples, 0.02%)</title><rect x="1188.7" y="165" width="0.2" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1191.71" y="175.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (152 samples, 2.38%)</title><rect x="467.6" y="101" width="28.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="470.61" y="111.5" >c..</text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (154 samples, 2.41%)</title><rect x="1092.8" y="101" width="28.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1095.76" y="111.5" >co..</text>
</g>
<g >
<title>core::iter::range::{impl#6   (16 samples, 0.25%)</title><rect x="495.7" y="101" width="2.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="498.65" y="111.5" ></text>
</g>
<g >
<title>core::ptr::non_null::{impl#12   (53 samples, 0.83%)</title><rect x="1037.4" y="117" width="9.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1040.40" y="127.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (70 samples, 1.09%)</title><rect x="1155.7" y="149" width="12.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1158.68" y="159.5" ></text>
</g>
<g >
<title>std::f64::{impl#0   (1 samples, 0.02%)</title><rect x="1178.6" y="85" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1181.56" y="95.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::pop&lt;(isize, isize), alloc::alloc::Global&gt;   (14 samples, 0.22%)</title><rect x="29.2" y="197" width="2.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="32.19" y="207.5" ></text>
</g>
<g >
<title>attempt11::choose_next_point   (6,376 samples, 99.70%)</title><rect x="10.9" y="229" width="1176.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.92" y="239.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>core::iter::sources::from_fn::{impl#0   (1 samples, 0.02%)</title><rect x="1188.7" y="229" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1191.71" y="239.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (154 samples, 2.41%)</title><rect x="1092.8" y="117" width="28.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1095.76" y="127.5" >co..</text>
</g>
<g >
<title>core::slice::{impl#0   (6 samples, 0.09%)</title><rect x="1188.9" y="229" width="1.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1191.89" y="239.5" ></text>
</g>
<g >
<title>attempt11::choose_next_point   (6,258 samples, 97.86%)</title><rect x="13.9" y="213" width="1154.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="16.87" y="223.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::pop&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.02%)</title><rect x="10.7" y="229" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="13.74" y="239.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (155 samples, 2.42%)</title><rect x="467.1" y="149" width="28.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="470.05" y="159.5" >co..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (16 samples, 0.25%)</title><rect x="495.7" y="117" width="2.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="498.65" y="127.5" ></text>
</g>
<g >
<title>core::slice::cmp::{impl#10   (2,008 samples, 31.40%)</title><rect x="676.7" y="165" width="370.5" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="679.67" y="175.5" >core::slice::cmp::{impl#10  </text>
</g>
<g >
<title>attempt11::choose_next_point   (6,395 samples, 100.00%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>core::iter::range::{impl#6   (1 samples, 0.02%)</title><rect x="1092.6" y="117" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1095.57" y="127.5" ></text>
</g>
<g >
<title>roundf64   (50 samples, 0.78%)</title><rect x="667.4" y="37" width="9.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="670.44" y="47.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#1   (1 samples, 0.02%)</title><rect x="1188.7" y="117" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1191.71" y="127.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (26 samples, 0.41%)</title><rect x="1087.8" y="117" width="4.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1090.78" y="127.5" ></text>
</g>
<g >
<title>roundf64   (1 samples, 0.02%)</title><rect x="1178.6" y="69" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1181.56" y="79.5" ></text>
</g>
<g >
<title>??   (81 samples, 1.27%)</title><rect x="132.3" y="181" width="15.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="135.34" y="191.5" ></text>
</g>
<g >
<title>core::ops::index_range::IndexRange::next_unchecked   (3 samples, 0.05%)</title><rect x="466.5" y="149" width="0.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="469.50" y="159.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#1   (25 samples, 0.39%)</title><rect x="1174.1" y="101" width="4.6" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1177.13" y="111.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::pop&lt;(isize, isize), alloc::alloc::Global&gt;   (32 samples, 0.50%)</title><rect x="147.3" y="181" width="5.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="150.28" y="191.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#2   (981 samples, 15.34%)</title><rect x="495.7" y="165" width="181.0" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="498.65" y="175.5" >attempt11::get_inbetwee..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::push&lt;(isize, isize), alloc::alloc::Global&gt;   (20 samples, 0.31%)</title><rect x="31.8" y="197" width="3.7" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="34.77" y="207.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt11::get_inbetween_points::{closure_env#1   (26 samples, 0.41%)</title><rect x="1173.9" y="165" width="4.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1176.95" y="175.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (155 samples, 2.42%)</title><rect x="1092.6" y="165" width="28.6" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1095.57" y="175.5" >co..</text>
</g>
<g >
<title>attempt11::is_close_int   (15 samples, 0.23%)</title><rect x="1175.8" y="85" width="2.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1178.79" y="95.5" ></text>
</g>
<g >
<title>attempt11::main   (6,395 samples, 100.00%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >attempt11::main  </text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (26 samples, 0.41%)</title><rect x="1173.9" y="181" width="4.8" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1176.95" y="191.5" ></text>
</g>
<g >
<title>core::cmp::min_by&lt;isize, fn(&amp;isize, &amp;isize) -&gt; core::cmp::Ordering&gt;   (2 samples, 0.03%)</title><rect x="423.0" y="149" width="0.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="425.95" y="159.5" ></text>
</g>
<g >
<title>core::num::{impl#5   (7 samples, 0.11%)</title><rect x="497.3" y="53" width="1.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="500.32" y="63.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (1 samples, 0.02%)</title><rect x="1188.7" y="133" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1191.71" y="143.5" ></text>
</g>
<g >
<title>attempt11::choose_next_point   (6,395 samples, 100.00%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>core::slice::iter::{impl#181   (17 samples, 0.27%)</title><rect x="1184.3" y="165" width="3.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1187.28" y="175.5" ></text>
</g>
<g >
<title>all (6,395 samples, 100%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#1   (154 samples, 2.41%)</title><rect x="1092.8" y="85" width="28.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1095.76" y="95.5" >at..</text>
</g>
<g >
<title>core::slice::{impl#0   (2,008 samples, 31.40%)</title><rect x="676.7" y="181" width="370.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="679.67" y="191.5" >core::slice::{impl#0  </text>
</g>
<g >
<title>core::slice::iter::{impl#181   (6 samples, 0.09%)</title><rect x="1188.9" y="197" width="1.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1191.89" y="207.5" ></text>
</g>
<g >
<title>core::slice::{impl#0   (257 samples, 4.02%)</title><rect x="1121.2" y="197" width="47.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1124.17" y="207.5" >core..</text>
</g>
<g >
<title>core::array::iter::{impl#2   (392 samples, 6.13%)</title><rect x="423.3" y="181" width="72.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="426.32" y="191.5" >core::ar..</text>
</g>
<g >
<title>attempt11::get_inbetween_points   (192 samples, 3.00%)</title><rect x="1047.2" y="197" width="35.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1050.18" y="207.5" >att..</text>
</g>
<g >
<title>std::f64::{impl#0   (7 samples, 0.11%)</title><rect x="1119.9" y="69" width="1.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1122.88" y="79.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::pop&lt;(isize, isize), alloc::alloc::Global&gt;   (2 samples, 0.03%)</title><rect x="13.5" y="213" width="0.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="16.51" y="223.5" ></text>
</g>
<g >
<title>fmodf64   (495 samples, 7.74%)</title><rect x="576.1" y="37" width="91.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="579.10" y="47.5" >fmodf64  </text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (1 samples, 0.02%)</title><rect x="1188.7" y="149" width="0.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1191.71" y="159.5" ></text>
</g>
<g >
<title>core::ptr::non_null::{impl#12   (6 samples, 0.09%)</title><rect x="1167.5" y="133" width="1.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1170.49" y="143.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points   (19 samples, 0.30%)</title><rect x="1168.6" y="213" width="3.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1171.60" y="223.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#2   (1 samples, 0.02%)</title><rect x="1188.7" y="213" width="0.2" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1191.71" y="223.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt11::get_inbetween_points::{closure_env#0   (16 samples, 0.25%)</title><rect x="495.7" y="133" width="2.9" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="498.65" y="143.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt11::get_inbetween_points::{closure_env#1   (1 samples, 0.02%)</title><rect x="1188.7" y="181" width="0.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1191.71" y="191.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#5   (16 samples, 0.25%)</title><rect x="495.7" y="85" width="2.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="498.65" y="95.5" ></text>
</g>
<g >
<title>attempt11::choose_next_point   (246 samples, 3.85%)</title><rect x="168.1" y="181" width="45.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="171.13" y="191.5" >atte..</text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (1 samples, 0.02%)</title><rect x="1188.5" y="165" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1191.52" y="175.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (483 samples, 7.55%)</title><rect x="958.1" y="133" width="89.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="961.06" y="143.5" >core::slic..</text>
</g>
<g >
<title>core::array::iter::{impl#2   (1 samples, 0.02%)</title><rect x="1188.5" y="197" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1191.52" y="207.5" ></text>
</g>
<g >
<title>core::ptr::write&lt;(isize, isize)&gt;   (20 samples, 0.31%)</title><rect x="164.4" y="165" width="3.7" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="167.44" y="175.5" ></text>
</g>
<g >
<title>fmodf64   (15 samples, 0.23%)</title><rect x="1175.8" y="69" width="2.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1178.79" y="79.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (1 samples, 0.02%)</title><rect x="1188.5" y="229" width="0.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1191.52" y="239.5" ></text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;(isize, isize)&gt;::assume_init_read&lt;(isize, isize)&gt;   (152 samples, 2.38%)</title><rect x="467.6" y="133" width="28.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="470.61" y="143.5" >c..</text>
</g>
<g >
<title>attempt11::get_inbetween_points   (1,137 samples, 17.78%)</title><rect x="213.5" y="181" width="209.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="216.52" y="191.5" >attempt11::get_inbetween_po..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (25 samples, 0.39%)</title><rect x="1174.1" y="133" width="4.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1177.13" y="143.5" ></text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;(isize, isize)&gt;::assume_init_read&lt;(isize, isize)&gt;   (3 samples, 0.05%)</title><rect x="1173.4" y="165" width="0.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1176.39" y="175.5" ></text>
</g>
<g >
<title>core::ops::index_range::{impl#1   (1 samples, 0.02%)</title><rect x="1173.2" y="197" width="0.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1176.21" y="207.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6   (7 samples, 0.11%)</title><rect x="498.6" y="101" width="1.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="501.61" y="111.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#5   (1 samples, 0.02%)</title><rect x="1173.9" y="117" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1176.95" y="127.5" ></text>
</g>
<g >
<title>core::slice::cmp::{impl#10   (6 samples, 0.09%)</title><rect x="1188.9" y="213" width="1.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1191.89" y="223.5" ></text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (152 samples, 2.38%)</title><rect x="467.6" y="117" width="28.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="470.61" y="127.5" >c..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::push&lt;(isize, isize), alloc::alloc::Global&gt;   (81 samples, 1.27%)</title><rect x="153.2" y="181" width="14.9" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="156.19" y="191.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (981 samples, 15.34%)</title><rect x="495.7" y="149" width="181.0" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="498.65" y="159.5" >core::iter::adapters::f..</text>
</g>
<g >
<title>core::iter::range::{impl#5   (1 samples, 0.02%)</title><rect x="1092.6" y="101" width="0.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1095.57" y="111.5" ></text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;(isize, isize)&gt;::assume_init_read&lt;(isize, isize)&gt;   (1 samples, 0.02%)</title><rect x="1188.5" y="181" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1191.52" y="191.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points   (6 samples, 0.09%)</title><rect x="1187.4" y="229" width="1.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1190.42" y="239.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (958 samples, 14.98%)</title><rect x="499.9" y="101" width="176.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="502.90" y="111.5" >core::iter::traits::it..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt11::get_inbetween_points::{closure_env#1   (965 samples, 15.09%)</title><rect x="498.6" y="133" width="178.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="501.61" y="143.5" >core::iter::traits::ite..</text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;(isize, isize)&gt;::assume_init_read&lt;(isize, isize)&gt;   (26 samples, 0.41%)</title><rect x="1087.8" y="149" width="4.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1090.78" y="159.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (1 samples, 0.02%)</title><rect x="1188.5" y="149" width="0.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1191.52" y="159.5" ></text>
</g>
<g >
<title>core::iter::sources::from_fn::{impl#0   (981 samples, 15.34%)</title><rect x="495.7" y="181" width="181.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="498.65" y="191.5" >core::iter::sources::fr..</text>
</g>
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (155 samples, 2.42%)</title><rect x="467.1" y="165" width="28.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="470.05" y="175.5" >co..</text>
</g>
<g >
<title>core::slice::{impl#0   (47 samples, 0.73%)</title><rect x="1178.7" y="213" width="8.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1181.74" y="223.5" ></text>
</g>
<g >
<title>attempt11::choose_next_point   (6,395 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>core::iter::sources::from_fn::{impl#0   (26 samples, 0.41%)</title><rect x="1173.9" y="213" width="4.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1176.95" y="223.5" ></text>
</g>
<g >
<title>roundf64   (7 samples, 0.11%)</title><rect x="1119.9" y="53" width="1.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1122.88" y="63.5" ></text>
</g>
<g >
<title>core::slice::cmp::{impl#10   (47 samples, 0.73%)</title><rect x="1178.7" y="197" width="8.7" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1181.74" y="207.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.02%)</title><rect x="164.3" y="165" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="167.26" y="175.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (3 samples, 0.05%)</title><rect x="1173.4" y="133" width="0.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1176.39" y="143.5" ></text>
</g>
<g >
<title>attempt11::choose_next_point   (6,395 samples, 100.00%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>std::f64::{impl#0   (50 samples, 0.78%)</title><rect x="667.4" y="53" width="9.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="670.44" y="63.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (1 samples, 0.02%)</title><rect x="1188.7" y="197" width="0.2" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1191.71" y="207.5" ></text>
</g>
<g >
<title>core::ops::index_range::{impl#1   (64 samples, 1.00%)</title><rect x="455.2" y="165" width="11.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="458.24" y="175.5" ></text>
</g>
</g>
</svg>
