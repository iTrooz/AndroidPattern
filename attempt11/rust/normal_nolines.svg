<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>core::ptr::const_ptr::{impl#0   (2 samples, 0.14%)</title><rect x="1180.4" y="229" width="1.6" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1183.36" y="239.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#5   (7 samples, 0.48%)</title><rect x="435.7" y="117" width="5.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="438.73" y="127.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6   (2 samples, 0.14%)</title><rect x="419.7" y="101" width="1.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="422.67" y="111.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (54 samples, 3.68%)</title><rect x="1076.7" y="229" width="43.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1079.74" y="239.5" >allo..</text>
</g>
<g >
<title>core::iter::adapters::map::{impl#2   (6 samples, 0.41%)</title><rect x="641.4" y="133" width="4.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="644.37" y="143.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (1 samples, 0.07%)</title><rect x="1188.4" y="277" width="0.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1191.39" y="287.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::push&lt;(isize, isize), alloc::alloc::Global&gt;   (5 samples, 0.34%)</title><rect x="19.6" y="277" width="4.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="22.64" y="287.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (3 samples, 0.20%)</title><rect x="1120.1" y="181" width="2.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1123.12" y="191.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (40 samples, 2.72%)</title><rect x="1088.0" y="133" width="32.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1090.99" y="143.5" >co..</text>
</g>
<g >
<title>free   (76 samples, 5.17%)</title><rect x="718.5" y="133" width="61.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="721.48" y="143.5" >free  </text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (2 samples, 0.14%)</title><rect x="1182.0" y="245" width="1.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1184.97" y="255.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (40 samples, 2.72%)</title><rect x="1088.0" y="149" width="32.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1090.99" y="159.5" >co..</text>
</g>
<g >
<title>core::iter::range::{impl#6   (1 samples, 0.07%)</title><rect x="1179.6" y="133" width="0.8" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1182.56" y="143.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points   (605 samples, 41.18%)</title><rect x="163.4" y="261" width="486.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="166.42" y="271.5" >attempt11::get_inbetween_points  </text>
</g>
<g >
<title>alloc::alloc::dealloc   (90 samples, 6.13%)</title><rect x="709.6" y="149" width="72.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="712.65" y="159.5" >alloc::a..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (4 samples, 0.27%)</title><rect x="1084.0" y="117" width="3.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1086.97" y="127.5" ></text>
</g>
<g >
<title>??   (48 samples, 3.27%)</title><rect x="741.0" y="117" width="38.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="743.97" y="127.5" >??  </text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (29 samples, 1.97%)</title><rect x="396.4" y="133" width="23.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="399.37" y="143.5" >a..</text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;(isize, isize)&gt;::assume_init_read&lt;(isize, isize)&gt;   (8 samples, 0.54%)</title><rect x="1125.7" y="229" width="6.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1128.74" y="239.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc   (9 samples, 0.61%)</title><rect x="1132.2" y="165" width="7.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1135.16" y="175.5" ></text>
</g>
<g >
<title>core::cmp::impls::{impl#66   (7 samples, 0.48%)</title><rect x="435.7" y="101" width="5.7" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="438.73" y="111.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::extend_trusted&lt;(isize, isize), alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#0   (1 samples, 0.07%)</title><rect x="1179.6" y="197" width="0.8" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="1182.56" y="207.5" ></text>
</g>
<g >
<title>attempt11::choose_next_point   (1,466 samples, 99.80%)</title><rect x="10.0" y="309" width="1177.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::extend_desugared&lt;(isize, isize), alloc::alloc::Global, core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#1   (5 samples, 0.34%)</title><rect x="1083.2" y="181" width="4.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1086.17" y="191.5" ></text>
</g>
<g >
<title>malloc   (3 samples, 0.20%)</title><rect x="1120.1" y="85" width="2.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1123.12" y="95.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::{impl#14   (90 samples, 6.13%)</title><rect x="709.6" y="229" width="72.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="712.65" y="239.5" >core::pt..</text>
</g>
<g >
<title>core::slice::cmp::{impl#10   (36 samples, 2.45%)</title><rect x="1139.4" y="261" width="28.9" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1142.39" y="271.5" >co..</text>
</g>
<g >
<title>attempt11::choose_next_point   (55 samples, 3.74%)</title><rect x="119.2" y="261" width="44.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="122.24" y="271.5" >atte..</text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (46 samples, 3.13%)</title><rect x="612.5" y="213" width="36.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="615.45" y="223.5" >all..</text>
</g>
<g >
<title>core::ptr::read_volatile&lt;u8&gt;   (2 samples, 0.14%)</title><rect x="622.9" y="69" width="1.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="625.89" y="79.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (277 samples, 18.86%)</title><rect x="389.9" y="213" width="222.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="392.95" y="223.5" >alloc::vec::spec_from_iter::{..</text>
</g>
<g >
<title>alloc::vec::spec_extend::{impl#0   (20 samples, 1.36%)</title><rect x="419.7" y="181" width="16.0" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="422.67" y="191.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (2 samples, 0.14%)</title><rect x="1182.0" y="293" width="1.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1184.97" y="303.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (2 samples, 0.14%)</title><rect x="1182.0" y="277" width="1.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1184.97" y="287.5" ></text>
</g>
<g >
<title>??   (2 samples, 0.14%)</title><rect x="1182.0" y="149" width="1.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1184.97" y="159.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each::call::{closure#0   (2 samples, 0.14%)</title><rect x="641.4" y="85" width="1.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="644.37" y="95.5" ></text>
</g>
<g >
<title>core::slice::{impl#0   (5 samples, 0.34%)</title><rect x="1183.6" y="293" width="4.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1186.57" y="303.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#5   (13 samples, 0.88%)</title><rect x="107.2" y="261" width="10.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="110.20" y="271.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (2 samples, 0.14%)</title><rect x="1180.4" y="213" width="1.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1183.36" y="223.5" ></text>
</g>
<g >
<title>core::slice::{impl#0   (1 samples, 0.07%)</title><rect x="1188.4" y="309" width="0.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1191.39" y="319.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity&lt;(isize, isize)&gt;   (29 samples, 1.97%)</title><rect x="396.4" y="181" width="23.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="399.37" y="191.5" >a..</text>
</g>
<g >
<title>alloc::vec::{impl#14   (54 samples, 3.68%)</title><rect x="1076.7" y="245" width="43.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1079.74" y="255.5" >allo..</text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (8 samples, 0.54%)</title><rect x="1125.7" y="197" width="6.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1128.74" y="207.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::push&lt;(isize, isize), alloc::alloc::Global&gt;   (23 samples, 1.57%)</title><rect x="88.7" y="261" width="18.5" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="91.72" y="271.5" ></text>
</g>
<g >
<title>alloc::raw_vec::{impl#3   (2 samples, 0.14%)</title><rect x="1182.0" y="213" width="1.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1184.97" y="223.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (320 samples, 21.78%)</title><rect x="781.9" y="229" width="257.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="784.94" y="239.5" >core::slice::iter::{impl#181  </text>
</g>
<g >
<title>core::cmp::impls::{impl#66   (1 samples, 0.07%)</title><rect x="1087.2" y="117" width="0.8" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1090.18" y="127.5" ></text>
</g>
<g >
<title>core::ptr::non_null::{impl#12   (1 samples, 0.07%)</title><rect x="1186.8" y="229" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1189.79" y="239.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (31 samples, 2.11%)</title><rect x="615.7" y="101" width="24.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="618.66" y="111.5" >a..</text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#1   (40 samples, 2.72%)</title><rect x="1088.0" y="117" width="32.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1090.99" y="127.5" >at..</text>
</g>
<g >
<title>core::iter::range::{impl#5   (1 samples, 0.07%)</title><rect x="1179.6" y="117" width="0.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1182.56" y="127.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (5 samples, 0.34%)</title><rect x="1079.1" y="133" width="4.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1082.15" y="143.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt11::get_inbetween_points::{closure_env#1   (41 samples, 2.79%)</title><rect x="1087.2" y="181" width="32.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1090.18" y="191.5" >co..</text>
</g>
<g >
<title>core::array::iter::{impl#2   (12 samples, 0.82%)</title><rect x="1122.5" y="277" width="9.7" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1125.53" y="287.5" ></text>
</g>
<g >
<title>alloc::raw_vec::{impl#3   (9 samples, 0.61%)</title><rect x="1132.2" y="197" width="7.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1135.16" y="207.5" ></text>
</g>
<g >
<title>__rust_alloc   (7 samples, 0.48%)</title><rect x="617.3" y="69" width="5.6" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="620.27" y="79.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#19   (2 samples, 0.14%)</title><rect x="641.4" y="69" width="1.6" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="644.37" y="79.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (41 samples, 2.79%)</title><rect x="1087.2" y="165" width="32.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1090.18" y="175.5" >co..</text>
</g>
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (2 samples, 0.14%)</title><rect x="1180.4" y="277" width="1.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1183.36" y="287.5" ></text>
</g>
<g >
<title>core::ptr::write&lt;(isize, isize)&gt;   (3 samples, 0.20%)</title><rect x="21.2" y="261" width="2.5" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="24.25" y="271.5" ></text>
</g>
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (33 samples, 2.25%)</title><rect x="683.1" y="245" width="26.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="686.14" y="255.5" >c..</text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (6 samples, 0.41%)</title><rect x="1173.9" y="229" width="4.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1176.93" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (277 samples, 18.86%)</title><rect x="389.9" y="197" width="222.6" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="392.95" y="207.5" >alloc::vec::spec_from_iter_ne..</text>
</g>
<g >
<title>core::slice::cmp::{impl#10   (1 samples, 0.07%)</title><rect x="1188.4" y="293" width="0.8" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1191.39" y="303.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#1   (46 samples, 3.13%)</title><rect x="612.5" y="197" width="36.9" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="615.45" y="207.5" >all..</text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (220 samples, 14.98%)</title><rect x="435.7" y="181" width="176.8" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="438.73" y="191.5" >core::iter::adapters::..</text>
</g>
<g >
<title>core::slice::iter::{impl#181   (5 samples, 0.34%)</title><rect x="1183.6" y="261" width="4.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1186.57" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#15   (1 samples, 0.07%)</title><rect x="26.1" y="277" width="0.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="29.07" y="287.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (4 samples, 0.27%)</title><rect x="97.6" y="245" width="3.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="100.56" y="255.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6   (7 samples, 0.48%)</title><rect x="435.7" y="133" width="5.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="438.73" y="143.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt11::get_inbetween_points::{closure_env#1   (6 samples, 0.41%)</title><rect x="1173.9" y="197" width="4.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1176.93" y="207.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (90 samples, 6.13%)</title><rect x="709.6" y="165" width="72.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="712.65" y="175.5" >alloc::a..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (9 samples, 0.61%)</title><rect x="1132.2" y="277" width="7.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1135.16" y="287.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt11::get_inbetween_points::{closure_env#1   (5 samples, 0.34%)</title><rect x="1083.2" y="149" width="4.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1086.17" y="159.5" ></text>
</g>
<g >
<title>__rust_dealloc   (1 samples, 0.07%)</title><rect x="1132.2" y="149" width="0.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1135.16" y="159.5" ></text>
</g>
<g >
<title>attempt11::is_close_int   (3 samples, 0.20%)</title><rect x="1084.8" y="69" width="2.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1087.77" y="79.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (29 samples, 1.97%)</title><rect x="396.4" y="101" width="23.3" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="399.37" y="111.5" >a..</text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#1   (3 samples, 0.20%)</title><rect x="1120.1" y="213" width="2.4" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1123.12" y="223.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#1   (4 samples, 0.27%)</title><rect x="1084.0" y="85" width="3.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1086.97" y="95.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (1 samples, 0.07%)</title><rect x="1187.6" y="277" width="0.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1190.59" y="287.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (1 samples, 0.07%)</title><rect x="1187.6" y="165" width="0.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1190.59" y="175.5" ></text>
</g>
<g >
<title>malloc   (19 samples, 1.29%)</title><rect x="624.5" y="69" width="15.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="627.50" y="79.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (20 samples, 1.36%)</title><rect x="419.7" y="117" width="16.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="422.67" y="127.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (2 samples, 0.14%)</title><rect x="1178.8" y="245" width="1.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1181.75" y="255.5" ></text>
</g>
<g >
<title>core::iter::adapters::map::{impl#2   (4 samples, 0.27%)</title><rect x="646.2" y="181" width="3.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="649.19" y="191.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc   (31 samples, 2.11%)</title><rect x="615.7" y="85" width="24.9" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="618.66" y="95.5" >a..</text>
</g>
<g >
<title>attempt11::is_close_int   (3 samples, 0.20%)</title><rect x="1176.3" y="117" width="2.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1179.34" y="127.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (2 samples, 0.14%)</title><rect x="1182.0" y="229" width="1.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1184.97" y="239.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (1 samples, 0.07%)</title><rect x="1187.6" y="229" width="0.8" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1190.59" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::pop&lt;(isize, isize), alloc::alloc::Global&gt;   (5 samples, 0.34%)</title><rect x="84.7" y="261" width="4.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="87.70" y="271.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (98 samples, 6.67%)</title><rect x="960.3" y="213" width="78.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="963.27" y="223.5" >core::sli..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#0   (3 samples, 0.20%)</title><rect x="1120.1" y="261" width="2.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1123.12" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#1   (2 samples, 0.14%)</title><rect x="1178.8" y="229" width="1.6" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1181.75" y="239.5" ></text>
</g>
<g >
<title>core::iter::adapters::map::map_fold::{closure#0   (2 samples, 0.14%)</title><rect x="641.4" y="101" width="1.6" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="644.37" y="111.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (20 samples, 1.36%)</title><rect x="419.7" y="149" width="16.0" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="422.67" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#15   (2 samples, 0.14%)</title><rect x="117.6" y="261" width="1.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="120.64" y="271.5" ></text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_alloc   (1 samples, 0.07%)</title><rect x="639.8" y="69" width="0.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="642.76" y="79.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (5 samples, 0.34%)</title><rect x="1079.1" y="165" width="4.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1082.15" y="175.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (75 samples, 5.11%)</title><rect x="649.4" y="261" width="60.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="652.40" y="271.5" >core::..</text>
</g>
<g >
<title>attempt11::is_close_int   (13 samples, 0.88%)</title><rect x="422.9" y="53" width="10.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="425.88" y="63.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (29 samples, 1.97%)</title><rect x="396.4" y="117" width="23.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="399.37" y="127.5" >a..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt11::get_inbetween_points::{closure_env#1   (20 samples, 1.36%)</title><rect x="419.7" y="133" width="16.0" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="422.67" y="143.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::extend_trusted&lt;(isize, isize), alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#0   (6 samples, 0.41%)</title><rect x="641.4" y="165" width="4.8" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="644.37" y="175.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (29 samples, 1.97%)</title><rect x="396.4" y="149" width="23.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="399.37" y="159.5" >a..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::extend_desugared&lt;(isize, isize), alloc::alloc::Global, core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#1   (20 samples, 1.36%)</title><rect x="419.7" y="165" width="16.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="422.67" y="175.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points   (15 samples, 1.02%)</title><rect x="1168.3" y="293" width="12.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1171.31" y="303.5" ></text>
</g>
<g >
<title>attempt11::choose_next_point   (1,260 samples, 85.77%)</title><rect x="26.9" y="277" width="1012.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="29.87" y="287.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>core::array::iter::{impl#2   (2 samples, 0.14%)</title><rect x="1180.4" y="261" width="1.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1183.36" y="271.5" ></text>
</g>
<g >
<title>fmodf64   (3 samples, 0.20%)</title><rect x="1084.8" y="53" width="2.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1087.77" y="63.5" ></text>
</g>
<g >
<title>malloc   (4 samples, 0.27%)</title><rect x="1080.0" y="85" width="3.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1082.95" y="95.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (35 samples, 2.38%)</title><rect x="613.3" y="149" width="28.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="616.25" y="159.5" >a..</text>
</g>
<g >
<title>alloc::vec::spec_extend::{impl#1   (6 samples, 0.41%)</title><rect x="641.4" y="181" width="4.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="644.37" y="191.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (8 samples, 0.54%)</title><rect x="1125.7" y="245" width="6.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1128.74" y="255.5" ></text>
</g>
<g >
<title>core::cmp::impls::{impl#66   (1 samples, 0.07%)</title><rect x="420.5" y="69" width="0.8" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="423.47" y="79.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::{impl#14   (9 samples, 0.61%)</title><rect x="1132.2" y="245" width="7.2" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1135.16" y="255.5" ></text>
</g>
<g >
<title>core::slice::cmp::{impl#10   (5 samples, 0.34%)</title><rect x="1183.6" y="277" width="4.0" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1186.57" y="287.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (3 samples, 0.20%)</title><rect x="1120.1" y="149" width="2.4" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1123.12" y="159.5" ></text>
</g>
<g >
<title>std::f64::{impl#0   (3 samples, 0.20%)</title><rect x="433.3" y="53" width="2.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="436.32" y="63.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (6 samples, 0.41%)</title><rect x="1173.9" y="149" width="4.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1176.93" y="159.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#5   (2 samples, 0.14%)</title><rect x="419.7" y="85" width="1.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="422.67" y="95.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (1 samples, 0.07%)</title><rect x="1187.6" y="181" width="0.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1190.59" y="191.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (31 samples, 2.11%)</title><rect x="615.7" y="117" width="24.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="618.66" y="127.5" >a..</text>
</g>
<g >
<title>core::ptr::write&lt;(isize, isize)&gt;   (1 samples, 0.07%)</title><rect x="642.2" y="53" width="0.8" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="645.17" y="63.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#5   (1 samples, 0.07%)</title><rect x="10.0" y="293" width="0.8" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (6 samples, 0.41%)</title><rect x="1173.9" y="245" width="4.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.93" y="255.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#0   (2 samples, 0.14%)</title><rect x="1178.8" y="277" width="1.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1181.75" y="287.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (46 samples, 3.13%)</title><rect x="612.5" y="229" width="36.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="615.45" y="239.5" >all..</text>
</g>
<g >
<title>alloc::alloc::alloc   (5 samples, 0.34%)</title><rect x="1079.1" y="101" width="4.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1082.15" y="111.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#5   (4 samples, 0.27%)</title><rect x="643.0" y="85" width="3.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="645.97" y="95.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity&lt;(isize, isize)&gt;   (35 samples, 2.38%)</title><rect x="613.3" y="181" width="28.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="616.25" y="191.5" >a..</text>
</g>
<g >
<title>attempt11::get_inbetween_points   (1 samples, 0.07%)</title><rect x="1189.2" y="325" width="0.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1192.20" y="335.5" ></text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;(isize, isize)&gt;::assume_init_read&lt;(isize, isize)&gt;   (33 samples, 2.25%)</title><rect x="683.1" y="213" width="26.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="686.14" y="223.5" >c..</text>
</g>
<g >
<title>attempt11::is_close_int   (124 samples, 8.44%)</title><rect x="505.6" y="85" width="99.6" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="508.62" y="95.5" >attempt11::i..</text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (8 samples, 0.54%)</title><rect x="1125.7" y="213" width="6.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1128.74" y="223.5" ></text>
</g>
<g >
<title>fmodf64   (123 samples, 8.37%)</title><rect x="506.4" y="69" width="98.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="509.42" y="79.5" >fmodf64  </text>
</g>
<g >
<title>fmodf64   (12 samples, 0.82%)</title><rect x="423.7" y="37" width="9.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="426.68" y="47.5" ></text>
</g>
<g >
<title>core::ops::index_range::{impl#1   (2 samples, 0.14%)</title><rect x="1124.1" y="261" width="1.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1127.13" y="271.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (213 samples, 14.50%)</title><rect x="441.4" y="133" width="171.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="444.35" y="143.5" >core::iter::traits::it..</text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#5   (3 samples, 0.20%)</title><rect x="23.7" y="277" width="2.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="26.66" y="287.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (2 samples, 0.14%)</title><rect x="1180.4" y="293" width="1.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1183.36" y="303.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (2 samples, 0.14%)</title><rect x="117.6" y="245" width="1.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="120.64" y="255.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (2 samples, 0.14%)</title><rect x="1182.0" y="197" width="1.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1184.97" y="207.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points   (1 samples, 0.07%)</title><rect x="1187.6" y="309" width="0.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1190.59" y="319.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (3 samples, 0.20%)</title><rect x="1120.1" y="229" width="2.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1123.12" y="239.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (36 samples, 2.45%)</title><rect x="1139.4" y="245" width="28.9" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1142.39" y="255.5" >co..</text>
</g>
<g >
<title>alloc::vec::{impl#14   (277 samples, 18.86%)</title><rect x="389.9" y="229" width="222.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="392.95" y="239.5" >alloc::vec::{impl#14  </text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::adapters::map::map_fold::{closure_env#0   (1 samples, 0.07%)</title><rect x="1179.6" y="149" width="0.8" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1182.56" y="159.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6   (4 samples, 0.27%)</title><rect x="643.0" y="101" width="3.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="645.97" y="111.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.07%)</title><rect x="1178.8" y="181" width="0.8" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1181.75" y="191.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6   (1 samples, 0.07%)</title><rect x="1087.2" y="149" width="0.8" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1090.18" y="159.5" ></text>
</g>
<g >
<title>roundf64   (3 samples, 0.20%)</title><rect x="433.3" y="37" width="2.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="436.32" y="47.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#1   (277 samples, 18.86%)</title><rect x="389.9" y="245" width="222.6" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="392.95" y="255.5" >core::iter::traits::iterator:..</text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (41 samples, 2.79%)</title><rect x="1087.2" y="197" width="32.9" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1090.18" y="207.5" >co..</text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#1   (6 samples, 0.41%)</title><rect x="1173.9" y="133" width="4.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1176.93" y="143.5" ></text>
</g>
<g >
<title>core::ops::index_range::{impl#1   (24 samples, 1.63%)</title><rect x="663.9" y="245" width="19.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="666.86" y="255.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#1   (6 samples, 0.41%)</title><rect x="1173.9" y="277" width="4.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1176.93" y="287.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (90 samples, 6.13%)</title><rect x="709.6" y="213" width="72.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="712.65" y="223.5" >alloc::v..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity&lt;(isize, isize)&gt;   (1 samples, 0.07%)</title><rect x="1178.8" y="213" width="0.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1181.75" y="223.5" ></text>
</g>
<g >
<title>core::option::Option&lt;usize&gt;::map&lt;usize, (isize, isize), core::array::iter::{impl#2   (8 samples, 0.54%)</title><rect x="1125.7" y="261" width="6.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1128.74" y="271.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points   (104 samples, 7.08%)</title><rect x="1039.0" y="277" width="83.5" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1041.99" y="287.5" >attempt11..</text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (90 samples, 6.13%)</title><rect x="709.6" y="245" width="72.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="712.65" y="255.5" >alloc::v..</text>
</g>
<g >
<title>alloc::vec::{impl#14   (3 samples, 0.20%)</title><rect x="1120.1" y="245" width="2.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1123.12" y="255.5" ></text>
</g>
<g >
<title>core::ptr::write&lt;(isize, isize)&gt;   (8 samples, 0.54%)</title><rect x="100.8" y="245" width="6.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="103.77" y="255.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#1   (1 samples, 0.07%)</title><rect x="1187.6" y="293" width="0.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1190.59" y="303.5" ></text>
</g>
<g >
<title>alloc::vec::spec_extend::{impl#1   (1 samples, 0.07%)</title><rect x="1179.6" y="213" width="0.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1182.56" y="223.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (220 samples, 14.98%)</title><rect x="435.7" y="149" width="176.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="438.73" y="159.5" >core::iter::traits::it..</text>
</g>
<g >
<title>alloc::alloc::alloc   (3 samples, 0.20%)</title><rect x="1120.1" y="101" width="2.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1123.12" y="111.5" ></text>
</g>
<g >
<title>attempt11::main   (1,469 samples, 100.00%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >attempt11::main  </text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#0   (46 samples, 3.13%)</title><rect x="612.5" y="245" width="36.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="615.45" y="255.5" >cor..</text>
</g>
<g >
<title>core::ptr::const_ptr::{impl#0   (33 samples, 2.25%)</title><rect x="683.1" y="197" width="26.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="686.14" y="207.5" >c..</text>
</g>
<g >
<title>core::slice::iter::{impl#181   (14 samples, 0.95%)</title><rect x="1157.1" y="229" width="11.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1160.07" y="239.5" ></text>
</g>
<g >
<title>free   (7 samples, 0.48%)</title><rect x="1133.0" y="149" width="5.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1135.97" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (29 samples, 1.97%)</title><rect x="396.4" y="165" width="23.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="399.37" y="175.5" >a..</text>
</g>
<g >
<title>attempt11::choose_next_point   (1,468 samples, 99.93%)</title><rect x="10.0" y="325" width="1179.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (1 samples, 0.07%)</title><rect x="1187.6" y="197" width="0.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1190.59" y="207.5" ></text>
</g>
<g >
<title>__rust_dealloc   (9 samples, 0.61%)</title><rect x="711.3" y="133" width="7.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="714.25" y="143.5" ></text>
</g>
<g >
<title>free   (2 samples, 0.14%)</title><rect x="1182.0" y="165" width="1.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1184.97" y="175.5" ></text>
</g>
<g >
<title>core::ptr::non_null::{impl#12   (9 samples, 0.61%)</title><rect x="1031.8" y="197" width="7.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1034.76" y="207.5" ></text>
</g>
<g >
<title>__rust_alloc   (3 samples, 0.20%)</title><rect x="397.2" y="69" width="2.4" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="400.17" y="79.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (35 samples, 2.38%)</title><rect x="613.3" y="165" width="28.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="616.25" y="175.5" >a..</text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (18 samples, 1.23%)</title><rect x="421.3" y="85" width="14.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="424.27" y="95.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (5 samples, 0.34%)</title><rect x="1083.2" y="133" width="4.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1086.17" y="143.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (3 samples, 0.20%)</title><rect x="1120.1" y="133" width="2.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1123.12" y="143.5" ></text>
</g>
<g >
<title>core::array::iter::{impl#2   (33 samples, 2.25%)</title><rect x="683.1" y="229" width="26.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="686.14" y="239.5" >c..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#1   (54 samples, 3.68%)</title><rect x="1076.7" y="261" width="43.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1079.74" y="271.5" >core..</text>
</g>
<g >
<title>core::slice::{impl#0   (320 samples, 21.78%)</title><rect x="781.9" y="261" width="257.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="784.94" y="271.5" >core::slice::{impl#0  </text>
</g>
<g >
<title>core::mem::maybe_uninit::MaybeUninit&lt;(isize, isize)&gt;::assume_init_read&lt;(isize, isize)&gt;   (2 samples, 0.14%)</title><rect x="1180.4" y="245" width="1.6" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1183.36" y="255.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (35 samples, 2.38%)</title><rect x="613.3" y="133" width="28.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="616.25" y="143.5" >a..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each&lt;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#0   (1 samples, 0.07%)</title><rect x="1179.6" y="181" width="0.8" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1182.56" y="191.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (6 samples, 0.41%)</title><rect x="1173.9" y="181" width="4.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1176.93" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (1 samples, 0.07%)</title><rect x="1187.6" y="261" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1190.59" y="271.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each&lt;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt11::get_inbetween_points::{closure_env#0   (6 samples, 0.41%)</title><rect x="641.4" y="149" width="4.8" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="644.37" y="159.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (4 samples, 0.27%)</title><rect x="1084.0" y="101" width="3.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1086.97" y="111.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity&lt;(isize, isize)&gt;   (3 samples, 0.20%)</title><rect x="1120.1" y="197" width="2.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1123.12" y="207.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (9 samples, 0.61%)</title><rect x="1132.2" y="229" width="7.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1135.16" y="239.5" ></text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_dealloc   (1 samples, 0.07%)</title><rect x="1138.6" y="149" width="0.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1141.59" y="159.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (213 samples, 14.50%)</title><rect x="441.4" y="117" width="171.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="444.35" y="127.5" >core::ops::function::i..</text>
</g>
<g >
<title>__rust_alloc   (1 samples, 0.07%)</title><rect x="1079.1" y="85" width="0.9" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1082.15" y="95.5" ></text>
</g>
<g >
<title>core::slice::{impl#0   (36 samples, 2.45%)</title><rect x="1139.4" y="277" width="28.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1142.39" y="287.5" >co..</text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (5 samples, 0.34%)</title><rect x="1083.2" y="165" width="4.0" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1086.17" y="175.5" ></text>
</g>
<g >
<title>core::iter::adapters::map::{impl#2   (1 samples, 0.07%)</title><rect x="1179.6" y="165" width="0.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1182.56" y="175.5" ></text>
</g>
<g >
<title>all (1,469 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc   (29 samples, 1.97%)</title><rect x="396.4" y="85" width="23.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="399.37" y="95.5" >a..</text>
</g>
<g >
<title>core::slice::cmp::{impl#10   (320 samples, 21.78%)</title><rect x="781.9" y="245" width="257.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="784.94" y="255.5" >core::slice::cmp::{impl#10  </text>
</g>
<g >
<title>std::f64::{impl#0   (9 samples, 0.61%)</title><rect x="605.2" y="85" width="7.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="608.22" y="95.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (54 samples, 3.68%)</title><rect x="1076.7" y="213" width="43.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1079.74" y="223.5" >allo..</text>
</g>
<g >
<title>fmodf64   (3 samples, 0.20%)</title><rect x="1176.3" y="101" width="2.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1179.34" y="111.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.07%)</title><rect x="1178.8" y="165" width="0.8" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1181.75" y="175.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (5 samples, 0.34%)</title><rect x="1079.1" y="117" width="4.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1082.15" y="127.5" ></text>
</g>
<g >
<title>alloc::raw_vec::{impl#3   (90 samples, 6.13%)</title><rect x="709.6" y="181" width="72.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="712.65" y="191.5" >alloc::r..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (90 samples, 6.13%)</title><rect x="709.6" y="261" width="72.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="712.65" y="271.5" >core::pt..</text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (9 samples, 0.61%)</title><rect x="1132.2" y="261" width="7.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1135.16" y="271.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.07%)</title><rect x="26.1" y="261" width="0.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="29.07" y="271.5" ></text>
</g>
<g >
<title>attempt11::is_close_int   (28 samples, 1.91%)</title><rect x="1097.6" y="101" width="22.5" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1100.62" y="111.5" >a..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (18 samples, 1.23%)</title><rect x="421.3" y="101" width="14.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="424.27" y="111.5" ></text>
</g>
<g >
<title>core::slice::iter::{impl#181   (2 samples, 0.14%)</title><rect x="1186.0" y="245" width="1.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1188.98" y="255.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6   (4 samples, 0.27%)</title><rect x="646.2" y="165" width="3.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="649.19" y="175.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (6 samples, 0.41%)</title><rect x="1173.9" y="165" width="4.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1176.93" y="175.5" ></text>
</g>
<g >
<title>core::alloc::layout::{impl#0   (1 samples, 0.07%)</title><rect x="640.6" y="101" width="0.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="643.57" y="111.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::adapters::map::map_fold::{closure_env#0   (6 samples, 0.41%)</title><rect x="641.4" y="117" width="4.8" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="644.37" y="127.5" ></text>
</g>
<g >
<title>core::ops::index_range::IndexRange::next_unchecked   (5 samples, 0.34%)</title><rect x="679.1" y="229" width="4.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="682.12" y="239.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (4 samples, 0.27%)</title><rect x="114.4" y="245" width="3.2" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="117.42" y="255.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt11::get_inbetween_points::{closure_env#1   (1 samples, 0.07%)</title><rect x="1187.6" y="213" width="0.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1190.59" y="223.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (2 samples, 0.14%)</title><rect x="1178.8" y="261" width="1.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1181.75" y="271.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (9 samples, 0.61%)</title><rect x="1132.2" y="213" width="7.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1135.16" y="223.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (3 samples, 0.20%)</title><rect x="1120.1" y="165" width="2.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1123.12" y="175.5" ></text>
</g>
<g >
<title>attempt11::choose_next_point   (1,441 samples, 98.09%)</title><rect x="10.8" y="293" width="1157.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.80" y="303.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>??   (3 samples, 0.20%)</title><rect x="1136.2" y="133" width="2.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1139.18" y="143.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#5   (1 samples, 0.07%)</title><rect x="1087.2" y="133" width="0.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1090.18" y="143.5" ></text>
</g>
<g >
<title>??   (18 samples, 1.23%)</title><rect x="70.2" y="261" width="14.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="73.25" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (5 samples, 0.34%)</title><rect x="1079.1" y="181" width="4.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1082.15" y="191.5" ></text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_dealloc   (3 samples, 0.20%)</title><rect x="779.5" y="133" width="2.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="782.53" y="143.5" ></text>
</g>
<g >
<title>attempt11::choose_next_point   (1,469 samples, 100.00%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (6 samples, 0.41%)</title><rect x="1173.9" y="213" width="4.9" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1176.93" y="223.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (6 samples, 0.41%)</title><rect x="1173.9" y="261" width="4.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1176.93" y="271.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (33 samples, 2.25%)</title><rect x="683.1" y="181" width="26.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="686.14" y="191.5" >c..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (90 samples, 6.13%)</title><rect x="709.6" y="197" width="72.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="712.65" y="207.5" >core::pt..</text>
</g>
<g >
<title>alloc::alloc::{impl#1   (9 samples, 0.61%)</title><rect x="1132.2" y="181" width="7.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1135.16" y="191.5" ></text>
</g>
<g >
<title>roundf64   (9 samples, 0.61%)</title><rect x="605.2" y="69" width="7.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="608.22" y="79.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#1   (213 samples, 14.50%)</title><rect x="441.4" y="101" width="171.1" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="444.35" y="111.5" >attempt11::get_inbetwe..</text>
</g>
<g >
<title>core::ptr::non_null::{impl#12   (1 samples, 0.07%)</title><rect x="1167.5" y="213" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1170.51" y="223.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity&lt;(isize, isize)&gt;   (5 samples, 0.34%)</title><rect x="1079.1" y="197" width="4.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1082.15" y="207.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (3 samples, 0.20%)</title><rect x="1120.1" y="117" width="2.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1123.12" y="127.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.07%)</title><rect x="18.8" y="277" width="0.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="21.84" y="287.5" ></text>
</g>
<g >
<title>fmodf64   (28 samples, 1.91%)</title><rect x="1097.6" y="85" width="22.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1100.62" y="95.5" >f..</text>
</g>
<g >
<title>malloc   (25 samples, 1.70%)</title><rect x="399.6" y="69" width="20.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="402.58" y="79.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (1 samples, 0.07%)</title><rect x="1187.6" y="245" width="0.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1190.59" y="255.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::{impl#14   (2 samples, 0.14%)</title><rect x="1182.0" y="261" width="1.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1184.97" y="271.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt11::get_inbetween_points::{closure_env#1   (220 samples, 14.98%)</title><rect x="435.7" y="165" width="176.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="438.73" y="175.5" >core::iter::traits::it..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (5 samples, 0.34%)</title><rect x="1079.1" y="149" width="4.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1082.15" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.07%)</title><rect x="1178.8" y="197" width="0.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1181.75" y="207.5" ></text>
</g>
<g >
<title>core::alloc::layout::Layout::array&lt;(isize, isize)&gt;   (1 samples, 0.07%)</title><rect x="640.6" y="117" width="0.8" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="643.57" y="127.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc   (2 samples, 0.14%)</title><rect x="1182.0" y="181" width="1.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1184.97" y="191.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#1   (18 samples, 1.23%)</title><rect x="421.3" y="69" width="14.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="424.27" y="79.5" ></text>
</g>
<g >
<title>attempt11::get_inbetween_points::{closure#1   (1 samples, 0.07%)</title><rect x="1187.6" y="149" width="0.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1190.59" y="159.5" ></text>
</g>
<g >
<title>attempt11::choose_next_point   (1,469 samples, 100.00%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >attempt11::choose_next_point  </text>
</g>
<g >
<title>alloc::vec::spec_extend::{impl#0   (5 samples, 0.34%)</title><rect x="1083.2" y="197" width="4.0" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1086.17" y="207.5" ></text>
</g>
</g>
</svg>
