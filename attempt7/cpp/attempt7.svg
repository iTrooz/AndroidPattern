<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="293" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="293" > </text>
<g id="frames">
<g >
<title>__irq_exit_rcu (40,252,368 samples, 0.46%)</title><rect x="1003.1" y="181" width="5.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1006.08" y="191.5" ></text>
</g>
<g >
<title>get_inbetween_points (157,949,818 samples, 1.79%)</title><rect x="455.3" y="213" width="21.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="458.34" y="223.5" ></text>
</g>
<g >
<title>roundf32x (39,870,761 samples, 0.45%)</title><rect x="1184.7" y="229" width="5.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1187.67" y="239.5" ></text>
</g>
<g >
<title>do_fault (764,545 samples, 0.01%)</title><rect x="241.7" y="85" width="0.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="244.70" y="95.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase (353,507,501 samples, 4.00%)</title><rect x="605.1" y="213" width="47.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="608.09" y="223.5" >std:..</text>
</g>
<g >
<title>gen_all_points (39,040,180 samples, 0.44%)</title><rect x="450.1" y="213" width="5.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="453.13" y="223.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (40,252,368 samples, 0.46%)</title><rect x="1003.1" y="213" width="5.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1006.08" y="223.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (40,186,733 samples, 0.46%)</title><rect x="444.8" y="181" width="5.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="447.75" y="191.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (40,186,733 samples, 0.46%)</title><rect x="444.8" y="165" width="5.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="447.75" y="175.5" ></text>
</g>
<g >
<title>set_pte_range (764,545 samples, 0.01%)</title><rect x="241.7" y="53" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="244.70" y="63.5" ></text>
</g>
<g >
<title>rcu_core (40,252,368 samples, 0.46%)</title><rect x="1003.1" y="149" width="5.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1006.08" y="159.5" ></text>
</g>
<g >
<title>__do_softirq (40,252,368 samples, 0.46%)</title><rect x="1003.1" y="165" width="5.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1006.08" y="175.5" ></text>
</g>
<g >
<title>handle_mm_fault (764,545 samples, 0.01%)</title><rect x="241.7" y="117" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="244.70" y="127.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (40,186,781 samples, 0.46%)</title><rect x="444.8" y="197" width="5.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="447.75" y="207.5" ></text>
</g>
<g >
<title>ktime_get_update_offsets_now (40,186,733 samples, 0.46%)</title><rect x="444.8" y="133" width="5.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="447.75" y="143.5" ></text>
</g>
<g >
<title>[unknown] (4,143,973,139 samples, 46.95%)</title><rect x="231.0" y="229" width="553.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="233.97" y="239.5" >[unknown]</text>
</g>
<g >
<title>all (8,827,051,798 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>cfree (201,005,765 samples, 2.28%)</title><rect x="241.8" y="213" width="26.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="244.81" y="223.5" >c..</text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (119,297,596 samples, 1.35%)</title><rect x="737.0" y="213" width="15.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="739.96" y="223.5" ></text>
</g>
<g >
<title>malloc (404,687,018 samples, 4.58%)</title><rect x="476.5" y="213" width="54.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="479.46" y="223.5" >malloc</text>
</g>
<g >
<title>asm_exc_page_fault (764,545 samples, 0.01%)</title><rect x="241.7" y="165" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="244.70" y="175.5" ></text>
</g>
<g >
<title>folio_add_lru (764,545 samples, 0.01%)</title><rect x="241.7" y="37" width="0.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="244.70" y="47.5" ></text>
</g>
<g >
<title>do_user_addr_fault (764,545 samples, 0.01%)</title><rect x="241.7" y="133" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="244.70" y="143.5" ></text>
</g>
<g >
<title>operator new (358,561,238 samples, 4.06%)</title><rect x="557.2" y="213" width="47.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="560.16" y="223.5" >oper..</text>
</g>
<g >
<title>read_hpet (40,186,733 samples, 0.46%)</title><rect x="444.8" y="117" width="5.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="447.75" y="127.5" ></text>
</g>
<g >
<title>attempt7_cpp (8,827,049,089 samples, 100.00%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >attempt7_cpp</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_insert_unique_pos (632,905,393 samples, 7.17%)</title><rect x="652.3" y="213" width="84.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="655.35" y="223.5" >std::_Rb_..</text>
</g>
<g >
<title>hrtimer_interrupt (40,186,733 samples, 0.46%)</title><rect x="444.8" y="149" width="5.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="447.75" y="159.5" ></text>
</g>
<g >
<title>get_inbetween_points (1,072,170,475 samples, 12.15%)</title><rect x="865.1" y="229" width="143.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="868.13" y="239.5" >get_inbetween_points</text>
</g>
<g >
<title>[libc.so.6] (80,319,338 samples, 0.91%)</title><rect x="231.0" y="213" width="10.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="233.97" y="223.5" ></text>
</g>
<g >
<title>operator delete (199,003,983 samples, 2.25%)</title><rect x="530.6" y="213" width="26.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="533.56" y="223.5" >o..</text>
</g>
<g >
<title>malloc (1,238,491,367 samples, 14.03%)</title><rect x="1008.5" y="229" width="165.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1011.46" y="239.5" >malloc</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (40,252,368 samples, 0.46%)</title><rect x="1003.1" y="197" width="5.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1006.08" y="207.5" ></text>
</g>
<g >
<title>__handle_mm_fault (764,545 samples, 0.01%)</title><rect x="241.7" y="101" width="0.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="244.70" y="111.5" ></text>
</g>
<g >
<title>cfree (441,464,131 samples, 5.00%)</title><rect x="784.9" y="229" width="59.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="787.93" y="239.5" >cfree</text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt;* std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt; (239,597,699 samples, 2.71%)</title><rect x="752.9" y="213" width="32.0" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="755.90" y="223.5" >st..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (764,545 samples, 0.01%)</title><rect x="241.7" y="181" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="244.70" y="191.5" ></text>
</g>
<g >
<title>operator new (79,643,652 samples, 0.90%)</title><rect x="1174.0" y="229" width="10.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.02" y="239.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,652,959,864 samples, 18.73%)</title><rect x="10.0" y="229" width="221.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >[libc.so.6]</text>
</g>
<g >
<title>choose_next_point (1,357,333,065 samples, 15.38%)</title><rect x="268.7" y="213" width="181.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="271.68" y="223.5" >choose_next_point</text>
</g>
<g >
<title>[unknown] (764,545 samples, 0.01%)</title><rect x="241.7" y="213" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="244.70" y="223.5" ></text>
</g>
<g >
<title>exc_page_fault (764,545 samples, 0.01%)</title><rect x="241.7" y="149" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="244.70" y="159.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (764,545 samples, 0.01%)</title><rect x="241.7" y="197" width="0.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="244.70" y="207.5" ></text>
</g>
<g >
<title>gen_all_points (158,475,700 samples, 1.80%)</title><rect x="843.9" y="229" width="21.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="846.95" y="239.5" ></text>
</g>
<g >
<title>note_gp_changes (40,252,368 samples, 0.46%)</title><rect x="1003.1" y="133" width="5.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1006.08" y="143.5" ></text>
</g>
<g >
<title>finish_fault (764,545 samples, 0.01%)</title><rect x="241.7" y="69" width="0.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="244.70" y="79.5" ></text>
</g>
</g>
</svg>
