<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (16 samples, 0.98%)</title><rect x="373.8" y="261" width="11.5" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="376.80" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (1 samples, 0.06%)</title><rect x="1182.1" y="229" width="0.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1185.08" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (10 samples, 0.61%)</title><rect x="1097.8" y="181" width="7.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1100.79" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1178.5" y="229" width="0.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1181.47" y="239.5" ></text>
</g>
<g >
<title>operator delete   (7 samples, 0.43%)</title><rect x="259.3" y="149" width="5.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="262.26" y="159.5" ></text>
</g>
<g >
<title>choose_next_point   (1,441 samples, 87.97%)</title><rect x="16.5" y="309" width="1038.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="19.48" y="319.5" >choose_next_point  </text>
</g>
<g >
<title>malloc   (17 samples, 1.04%)</title><rect x="247.0" y="149" width="12.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="250.01" y="159.5" ></text>
</g>
<g >
<title>operator delete   (1 samples, 0.06%)</title><rect x="1187.8" y="197" width="0.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1190.84" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (47 samples, 2.87%)</title><rect x="1135.3" y="277" width="33.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1138.25" y="287.5" >st..</text>
</g>
<g >
<title>operator delete   (1 samples, 0.06%)</title><rect x="1189.3" y="213" width="0.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1192.28" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (1 samples, 0.06%)</title><rect x="1184.2" y="261" width="0.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1187.24" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;int, int&gt; const&amp;, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (1 samples, 0.06%)</title><rect x="1188.6" y="309" width="0.7" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1191.56" y="319.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (4 samples, 0.24%)</title><rect x="1089.1" y="277" width="2.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1092.15" y="287.5" ></text>
</g>
<g >
<title>operator new   (1 samples, 0.06%)</title><rect x="1172.0" y="197" width="0.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1174.99" y="207.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.06%)</title><rect x="600.7" y="69" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="603.72" y="79.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy   (5 samples, 0.31%)</title><rect x="1180.6" y="293" width="3.6" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1183.63" y="303.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.06%)</title><rect x="1171.3" y="165" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1174.27" y="175.5" ></text>
</g>
<g >
<title>operator delete   (2 samples, 0.12%)</title><rect x="1076.2" y="181" width="1.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1079.18" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (5 samples, 0.31%)</title><rect x="1180.6" y="277" width="3.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1183.63" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_allocate   (3 samples, 0.18%)</title><rect x="1056.0" y="245" width="2.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1059.01" y="255.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (5 samples, 0.31%)</title><rect x="1163.3" y="181" width="3.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1166.35" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (23 samples, 1.40%)</title><rect x="1009.9" y="245" width="16.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1012.90" y="255.5" ></text>
</g>
<g >
<title>malloc   (2 samples, 0.12%)</title><rect x="1056.7" y="165" width="1.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1059.73" y="175.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;int, int&gt;*, std::pair&lt;int, int&gt;*, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;   (3 samples, 0.18%)</title><rect x="107.3" y="197" width="2.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="110.25" y="207.5" ></text>
</g>
<g >
<title>free   (7 samples, 0.43%)</title><rect x="259.3" y="133" width="5.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="262.26" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (118 samples, 7.20%)</title><rect x="619.5" y="133" width="85.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="622.45" y="143.5" >std::alloc..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (3 samples, 0.18%)</title><rect x="739.8" y="101" width="2.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="742.76" y="111.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (2 samples, 0.12%)</title><rect x="1174.9" y="293" width="1.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1177.87" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (52 samples, 3.17%)</title><rect x="704.5" y="197" width="37.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="707.46" y="207.5" >std..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_check_len   (2 samples, 0.12%)</title><rect x="1077.6" y="245" width="1.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1080.62" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::construct&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt; &gt;   (2 samples, 0.12%)</title><rect x="105.8" y="229" width="1.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="108.81" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (1 samples, 0.06%)</title><rect x="1187.8" y="229" width="0.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1190.84" y="239.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.06%)</title><rect x="1184.2" y="149" width="0.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1187.24" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (1 samples, 0.06%)</title><rect x="1166.9" y="213" width="0.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1169.95" y="223.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (2 samples, 0.12%)</title><rect x="1076.2" y="197" width="1.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1079.18" y="207.5" ></text>
</g>
<g >
<title>free   (3 samples, 0.18%)</title><rect x="1169.8" y="181" width="2.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1172.83" y="191.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (15 samples, 0.92%)</title><rect x="1150.4" y="197" width="10.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1153.38" y="207.5" ></text>
</g>
<g >
<title>operator new   (1 samples, 0.06%)</title><rect x="1075.5" y="181" width="0.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1078.46" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_lower_bound   (124 samples, 7.57%)</title><rect x="284.5" y="261" width="89.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="287.47" y="271.5" >std::_Rb_t..</text>
</g>
<g >
<title>round@plt   (2 samples, 0.12%)</title><rect x="1073.3" y="293" width="1.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1076.30" y="303.5" ></text>
</g>
<g >
<title>free   (58 samples, 3.54%)</title><rect x="952.3" y="101" width="41.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="955.27" y="111.5" >fre..</text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1173.4" y="229" width="0.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1176.43" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (16 samples, 0.98%)</title><rect x="1107.9" y="213" width="11.5" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1110.88" y="223.5" ></text>
</g>
<g >
<title>malloc   (30 samples, 1.83%)</title><rect x="69.8" y="149" width="21.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="72.79" y="159.5" >m..</text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (16 samples, 0.98%)</title><rect x="373.8" y="245" width="11.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="376.80" y="255.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (71 samples, 4.33%)</title><rect x="435.8" y="181" width="51.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="438.75" y="191.5" >std::..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (1 samples, 0.06%)</title><rect x="1188.6" y="277" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1191.56" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;int, int&gt; const&amp;, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (107 samples, 6.53%)</title><rect x="430.0" y="261" width="77.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="432.99" y="271.5" >std::_Rb..</text>
</g>
<g >
<title>operator delete   (110 samples, 6.72%)</title><rect x="867.3" y="133" width="79.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="870.26" y="143.5" >operator ..</text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;int, int&gt;*, std::pair&lt;int, int&gt;*, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;   (1 samples, 0.06%)</title><rect x="267.9" y="213" width="0.7" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="270.90" y="223.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (69 samples, 4.21%)</title><rect x="324.1" y="245" width="49.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="327.09" y="255.5" >std::..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (9 samples, 0.55%)</title><rect x="996.2" y="165" width="6.5" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="999.21" y="175.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (11 samples, 0.67%)</title><rect x="1121.6" y="117" width="7.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1124.56" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (30 samples, 1.83%)</title><rect x="408.4" y="213" width="21.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="411.38" y="223.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (59 samples, 3.60%)</title><rect x="951.6" y="213" width="42.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="954.55" y="223.5" >std:..</text>
</g>
<g >
<title>operator new   (111 samples, 6.78%)</title><rect x="621.6" y="85" width="80.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="624.61" y="95.5" >operator ..</text>
</g>
<g >
<title>operator new   (35 samples, 2.14%)</title><rect x="66.2" y="165" width="25.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="69.19" y="175.5" >o..</text>
</g>
<g >
<title>operator delete   (2 samples, 0.12%)</title><rect x="1058.2" y="181" width="1.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1061.17" y="191.5" ></text>
</g>
<g >
<title>all (1,638 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (3 samples, 0.18%)</title><rect x="1056.0" y="229" width="2.2" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1059.01" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (118 samples, 7.20%)</title><rect x="619.5" y="149" width="85.0" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="622.45" y="159.5" >std::_Rb_t..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::size   (1 samples, 0.06%)</title><rect x="1078.3" y="229" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1081.34" y="239.5" ></text>
</g>
<g >
<title>std::fmod&lt;double, int&gt;   (5 samples, 0.31%)</title><rect x="1069.7" y="277" width="3.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1072.69" y="287.5" ></text>
</g>
<g >
<title>operator delete   (14 samples, 0.85%)</title><rect x="1138.9" y="181" width="10.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1141.85" y="191.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~set   (5 samples, 0.31%)</title><rect x="1184.2" y="325" width="3.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1187.24" y="335.5" ></text>
</g>
<g >
<title>choose_next_point   (23 samples, 1.40%)</title><rect x="38.1" y="293" width="16.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="41.10" y="303.5" ></text>
</g>
<g >
<title>operator delete   (15 samples, 0.92%)</title><rect x="1150.4" y="165" width="10.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1153.38" y="175.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (11 samples, 0.67%)</title><rect x="1121.6" y="133" width="7.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1124.56" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (1 samples, 0.06%)</title><rect x="1166.9" y="181" width="0.8" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1169.95" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (4 samples, 0.24%)</title><rect x="403.3" y="245" width="2.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="406.33" y="255.5" ></text>
</g>
<g >
<title>get_inbetween_points   (2 samples, 0.12%)</title><rect x="1172.7" y="325" width="1.5" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1175.71" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (118 samples, 7.20%)</title><rect x="619.5" y="165" width="85.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="622.45" y="175.5" >std::_Rb_t..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (9 samples, 0.55%)</title><rect x="996.2" y="197" width="6.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="999.21" y="207.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (7 samples, 0.43%)</title><rect x="259.3" y="197" width="5.0" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="262.26" y="207.5" ></text>
</g>
<g >
<title>??   (2 samples, 0.12%)</title><rect x="1076.2" y="133" width="1.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1079.18" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (8 samples, 0.49%)</title><rect x="1054.6" y="277" width="5.7" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1057.57" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (71 samples, 4.33%)</title><rect x="435.8" y="229" width="51.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="438.75" y="239.5" >std::..</text>
</g>
<g >
<title>malloc   (1 samples, 0.06%)</title><rect x="1178.5" y="165" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1181.47" y="175.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (19 samples, 1.16%)</title><rect x="245.6" y="181" width="13.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="248.57" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (3 samples, 0.18%)</title><rect x="1130.9" y="165" width="2.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1133.93" y="175.5" ></text>
</g>
<g >
<title>choose_next_point   (1,635 samples, 99.82%)</title><rect x="10.0" y="341" width="1177.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >choose_next_point  </text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (2 samples, 0.12%)</title><rect x="1058.2" y="229" width="1.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1061.17" y="239.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (5 samples, 0.31%)</title><rect x="1085.5" y="261" width="3.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1088.54" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (7 samples, 0.43%)</title><rect x="259.3" y="229" width="5.0" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="262.26" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (1 samples, 0.06%)</title><rect x="1166.9" y="197" width="0.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1169.95" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_relocate   (3 samples, 0.18%)</title><rect x="107.3" y="229" width="2.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="110.25" y="239.5" ></text>
</g>
<g >
<title>operator delete   (1 samples, 0.06%)</title><rect x="1184.2" y="197" width="0.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1187.24" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_allocate   (1 samples, 0.06%)</title><rect x="1173.4" y="261" width="0.8" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1176.43" y="271.5" ></text>
</g>
<g >
<title>malloc   (9 samples, 0.55%)</title><rect x="1123.0" y="85" width="6.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1126.00" y="95.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (30 samples, 1.83%)</title><rect x="718.1" y="101" width="21.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="721.14" y="111.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (115 samples, 7.02%)</title><rect x="518.6" y="197" width="82.8" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="521.60" y="207.5" >std::_Rb_..</text>
</g>
<g >
<title>malloc   (2 samples, 0.12%)</title><rect x="740.5" y="37" width="1.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="743.48" y="47.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::contains   (18 samples, 1.10%)</title><rect x="1079.1" y="309" width="12.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1082.06" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (9 samples, 0.55%)</title><rect x="996.2" y="181" width="6.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="999.21" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (1 samples, 0.06%)</title><rect x="1184.2" y="277" width="0.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1187.24" y="287.5" ></text>
</g>
<g >
<title>operator delete   (18 samples, 1.10%)</title><rect x="92.8" y="149" width="13.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="95.84" y="159.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~set   (383 samples, 23.38%)</title><rect x="750.6" y="293" width="275.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="753.56" y="303.5" >std::set&lt;std::pair&lt;int, int&gt;, std::l..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (35 samples, 2.14%)</title><rect x="243.4" y="261" width="25.2" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="246.41" y="271.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_insert_unique_pos   (57 samples, 3.48%)</title><rect x="388.9" y="261" width="41.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="391.93" y="271.5" >std..</text>
</g>
<g >
<title>malloc   (100 samples, 6.11%)</title><rect x="629.5" y="69" width="72.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="632.54" y="79.5" >malloc  </text>
</g>
<g >
<title>operator delete   (15 samples, 0.92%)</title><rect x="1150.4" y="149" width="10.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1153.38" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (1 samples, 0.06%)</title><rect x="1182.1" y="197" width="0.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1185.08" y="207.5" ></text>
</g>
<g >
<title>??   (5 samples, 0.31%)</title><rect x="260.7" y="117" width="3.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="263.70" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (35 samples, 2.14%)</title><rect x="714.5" y="181" width="25.3" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="717.54" y="191.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (30 samples, 1.83%)</title><rect x="718.1" y="165" width="21.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="721.14" y="175.5" >s..</text>
</g>
<g >
<title>malloc   (64 samples, 3.91%)</title><rect x="440.8" y="133" width="46.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="443.79" y="143.5" >mall..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (6 samples, 0.37%)</title><rect x="1074.7" y="293" width="4.4" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1077.74" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (3 samples, 0.18%)</title><rect x="739.8" y="181" width="2.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="742.76" y="191.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (3 samples, 0.18%)</title><rect x="504.9" y="245" width="2.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="507.91" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (3 samples, 0.18%)</title><rect x="1130.9" y="181" width="2.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1133.93" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node_base::_S_maximum   (2 samples, 0.12%)</title><rect x="1133.1" y="229" width="1.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1136.09" y="239.5" ></text>
</g>
<g >
<title>operator new   (71 samples, 4.33%)</title><rect x="435.8" y="149" width="51.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="438.75" y="159.5" >opera..</text>
</g>
<g >
<title>??   (19 samples, 1.16%)</title><rect x="687.9" y="53" width="13.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="690.89" y="63.5" ></text>
</g>
<g >
<title>std::local_Rb_tree_rotate_right   (2 samples, 0.12%)</title><rect x="503.5" y="229" width="1.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="506.47" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (30 samples, 1.83%)</title><rect x="718.1" y="117" width="21.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="721.14" y="127.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (38 samples, 2.32%)</title><rect x="1105.7" y="245" width="27.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1108.71" y="255.5" >s..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (16 samples, 0.98%)</title><rect x="1107.9" y="133" width="11.5" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1110.88" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (1 samples, 0.06%)</title><rect x="1178.5" y="261" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1181.47" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_lower_bound   (1 samples, 0.06%)</title><rect x="1174.2" y="293" width="0.7" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1177.15" y="303.5" ></text>
</g>
<g >
<title>operator delete   (6 samples, 0.37%)</title><rect x="998.4" y="101" width="4.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1001.38" y="111.5" ></text>
</g>
<g >
<title>operator new   (1 samples, 0.06%)</title><rect x="1182.1" y="133" width="0.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1185.08" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (40 samples, 2.44%)</title><rect x="1105.7" y="261" width="28.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1108.71" y="271.5" >st..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (1 samples, 0.06%)</title><rect x="1189.3" y="293" width="0.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1192.28" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1173.4" y="245" width="0.8" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1176.43" y="255.5" ></text>
</g>
<g >
<title>operator new(unsigned long)@plt   (1 samples, 0.06%)</title><rect x="1118.7" y="117" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1121.68" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (1 samples, 0.06%)</title><rect x="1187.8" y="293" width="0.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1190.84" y="303.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (1 samples, 0.06%)</title><rect x="1184.2" y="213" width="0.8" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1187.24" y="223.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (20 samples, 1.22%)</title><rect x="91.4" y="197" width="14.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="94.40" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (3 samples, 0.18%)</title><rect x="1130.9" y="149" width="2.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1133.93" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (119 samples, 7.26%)</title><rect x="769.3" y="245" width="85.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="772.29" y="255.5" >std::_Rb_t..</text>
</g>
<g >
<title>free   (1 samples, 0.06%)</title><rect x="996.2" y="117" width="0.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="999.21" y="127.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (1 samples, 0.06%)</title><rect x="1189.3" y="245" width="0.7" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1192.28" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::find   (18 samples, 1.10%)</title><rect x="1079.1" y="293" width="12.9" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1082.06" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (11 samples, 0.67%)</title><rect x="1121.6" y="165" width="7.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1124.56" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (112 samples, 6.84%)</title><rect x="865.8" y="197" width="80.7" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="868.82" y="207.5" >std::allo..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (5 samples, 0.31%)</title><rect x="1184.2" y="293" width="3.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1187.24" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (4 samples, 0.24%)</title><rect x="1185.0" y="277" width="2.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1187.96" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (1 samples, 0.06%)</title><rect x="1182.1" y="213" width="0.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1185.08" y="223.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1172.0" y="229" width="0.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1174.99" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int, int&gt; &gt;::operator--   (3 samples, 0.18%)</title><rect x="406.2" y="245" width="2.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="409.21" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (15 samples, 0.92%)</title><rect x="1150.4" y="245" width="10.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1153.38" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node_base::_S_maximum   (1 samples, 0.06%)</title><rect x="741.9" y="213" width="0.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="744.92" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (9 samples, 0.55%)</title><rect x="1161.2" y="245" width="6.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1164.18" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Rb_tree   (47 samples, 2.87%)</title><rect x="1135.3" y="293" width="33.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1138.25" y="303.5" >st..</text>
</g>
<g >
<title>std::_Rb_tree_header::_Rb_tree_header   (1 samples, 0.06%)</title><rect x="1134.5" y="261" width="0.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1137.53" y="271.5" ></text>
</g>
<g >
<title>operator delete   (2 samples, 0.12%)</title><rect x="1185.7" y="181" width="1.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1188.68" y="191.5" ></text>
</g>
<g >
<title>operator delete   (5 samples, 0.31%)</title><rect x="1163.3" y="133" width="3.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1166.35" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (6 samples, 0.37%)</title><rect x="1176.3" y="309" width="4.3" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1179.31" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (1 samples, 0.06%)</title><rect x="1172.0" y="309" width="0.7" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1174.99" y="319.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1173.4" y="213" width="0.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1176.43" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (2 samples, 0.12%)</title><rect x="1174.9" y="261" width="1.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1177.87" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (5 samples, 0.31%)</title><rect x="1094.2" y="229" width="3.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1097.19" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;int, int&gt; const&amp;, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (3 samples, 0.18%)</title><rect x="1178.5" y="293" width="2.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1181.47" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::pair&lt;int, int&gt; &gt;, true&gt;::_Rb_tree_impl   (1 samples, 0.06%)</title><rect x="749.8" y="261" width="0.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="752.84" y="271.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (3 samples, 0.18%)</title><rect x="1056.0" y="213" width="2.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1059.01" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy   (336 samples, 20.51%)</title><rect x="507.8" y="261" width="242.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="510.79" y="271.5" >std::_Rb_tree&lt;std::pair&lt;int, int..</text>
</g>
<g >
<title>operator new   (1 samples, 0.06%)</title><rect x="1188.6" y="197" width="0.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1191.56" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Vector_base   (4 samples, 0.24%)</title><rect x="1169.1" y="293" width="2.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1172.11" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (16 samples, 0.98%)</title><rect x="373.8" y="229" width="11.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="376.80" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (36 samples, 2.20%)</title><rect x="65.5" y="181" width="25.9" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="68.47" y="191.5" >s..</text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::contains   (3 samples, 0.18%)</title><rect x="1174.2" y="325" width="2.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1177.15" y="335.5" ></text>
</g>
<g >
<title>gen_all_points   (1 samples, 0.06%)</title><rect x="1187.8" y="341" width="0.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1190.84" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance   (2 samples, 0.12%)</title><rect x="1179.2" y="277" width="1.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1182.19" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;int, int&gt; const&amp;, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (11 samples, 0.67%)</title><rect x="1097.8" y="277" width="7.9" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1100.79" y="287.5" ></text>
</g>
<g >
<title>malloc   (1 samples, 0.06%)</title><rect x="1182.1" y="117" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1185.08" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (1 samples, 0.06%)</title><rect x="1173.4" y="293" width="0.8" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1176.43" y="303.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (36 samples, 2.20%)</title><rect x="65.5" y="197" width="25.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="68.47" y="207.5" >s..</text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (119 samples, 7.26%)</title><rect x="769.3" y="197" width="85.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="772.29" y="207.5" >std::alloc..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (15 samples, 0.92%)</title><rect x="1150.4" y="229" width="10.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1153.38" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1075.5" y="197" width="0.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1078.46" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (1 samples, 0.06%)</title><rect x="1187.8" y="261" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1190.84" y="271.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (30 samples, 1.83%)</title><rect x="408.4" y="245" width="21.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="411.38" y="255.5" >s..</text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1182.1" y="165" width="0.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1185.08" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (5 samples, 0.31%)</title><rect x="1163.3" y="197" width="3.6" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1166.35" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (6 samples, 0.37%)</title><rect x="1074.7" y="277" width="4.4" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1077.74" y="287.5" ></text>
</g>
<g >
<title>operator delete   (2 samples, 0.12%)</title><rect x="1076.2" y="165" width="1.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1079.18" y="175.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (1 samples, 0.06%)</title><rect x="1187.8" y="245" width="0.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1190.84" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (2 samples, 0.12%)</title><rect x="1185.7" y="229" width="1.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1188.68" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (5 samples, 0.31%)</title><rect x="1163.3" y="229" width="3.6" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1166.35" y="239.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~set   (47 samples, 2.87%)</title><rect x="1135.3" y="309" width="33.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1138.25" y="319.5" >st..</text>
</g>
<g >
<title>??   (17 samples, 1.04%)</title><rect x="1041.6" y="149" width="12.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1044.60" y="159.5" ></text>
</g>
<g >
<title>operator new   (3 samples, 0.18%)</title><rect x="1056.0" y="181" width="2.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1059.01" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (118 samples, 7.20%)</title><rect x="619.5" y="181" width="85.0" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="622.45" y="191.5" >std::_Rb_t..</text>
</g>
<g >
<title>malloc   (1 samples, 0.06%)</title><rect x="1188.6" y="181" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1191.56" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (72 samples, 4.40%)</title><rect x="57.5" y="261" width="51.9" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="60.55" y="271.5" >std::..</text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::set   (338 samples, 20.63%)</title><rect x="507.1" y="293" width="243.5" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="510.07" y="303.5" >std::set&lt;std::pair&lt;int, int&gt;, st..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (14 samples, 0.85%)</title><rect x="1138.9" y="261" width="10.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1141.85" y="271.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~set   (1 samples, 0.06%)</title><rect x="1189.3" y="357" width="0.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1192.28" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (2 samples, 0.12%)</title><rect x="1058.2" y="245" width="1.4" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1061.17" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (8 samples, 0.49%)</title><rect x="1054.6" y="261" width="5.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1057.57" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (14 samples, 0.85%)</title><rect x="1138.9" y="245" width="10.0" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1141.85" y="255.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (112 samples, 6.84%)</title><rect x="865.8" y="181" width="80.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="868.82" y="191.5" >std::allo..</text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (3 samples, 0.18%)</title><rect x="504.9" y="229" width="2.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="507.91" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (26 samples, 1.59%)</title><rect x="1148.9" y="261" width="18.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1151.94" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (16 samples, 0.98%)</title><rect x="1107.9" y="197" width="11.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1110.88" y="207.5" ></text>
</g>
<g >
<title>operator delete   (36 samples, 2.20%)</title><rect x="1027.9" y="181" width="25.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1030.91" y="191.5" >o..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (2 samples, 0.12%)</title><rect x="1058.2" y="197" width="1.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1061.17" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (1 samples, 0.06%)</title><rect x="1187.1" y="261" width="0.7" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1190.12" y="271.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::set   (41 samples, 2.50%)</title><rect x="1105.7" y="309" width="29.6" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1108.71" y="319.5" >st..</text>
</g>
<g >
<title>??   (9 samples, 0.55%)</title><rect x="99.3" y="117" width="6.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="102.33" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (11 samples, 0.67%)</title><rect x="1121.6" y="181" width="7.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1124.56" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (4 samples, 0.24%)</title><rect x="1089.1" y="245" width="2.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1092.15" y="255.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt; &gt;   (2 samples, 0.12%)</title><rect x="105.8" y="213" width="1.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="108.81" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Rb_tree   (41 samples, 2.50%)</title><rect x="1105.7" y="293" width="29.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1108.71" y="303.5" >st..</text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::insert   (1 samples, 0.06%)</title><rect x="1188.6" y="341" width="0.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1191.56" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (5 samples, 0.31%)</title><rect x="1129.5" y="213" width="3.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1132.49" y="223.5" ></text>
</g>
<g >
<title>malloc   (1 samples, 0.06%)</title><rect x="1075.5" y="165" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1078.46" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1182.1" y="181" width="0.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1185.08" y="191.5" ></text>
</g>
<g >
<title>malloc   (26 samples, 1.59%)</title><rect x="721.0" y="53" width="18.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="724.03" y="63.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (10 samples, 0.61%)</title><rect x="1097.8" y="229" width="7.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1100.79" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (69 samples, 4.21%)</title><rect x="324.1" y="213" width="49.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="327.09" y="223.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (3 samples, 0.18%)</title><rect x="504.9" y="213" width="2.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="507.91" y="223.5" ></text>
</g>
<g >
<title>std::fmod&lt;double, int&gt;   (56 samples, 3.42%)</title><rect x="198.7" y="261" width="40.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="201.74" y="271.5" >std..</text>
</g>
<g >
<title>??   (5 samples, 0.31%)</title><rect x="999.1" y="69" width="3.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1002.10" y="79.5" ></text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (5 samples, 0.31%)</title><rect x="1094.2" y="245" width="3.6" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1097.19" y="255.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (1 samples, 0.06%)</title><rect x="1177.8" y="277" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1180.75" y="287.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.06%)</title><rect x="1182.1" y="101" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1185.08" y="111.5" ></text>
</g>
<g >
<title>operator new   (17 samples, 1.04%)</title><rect x="247.0" y="165" width="12.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="250.01" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Rb_tree   (338 samples, 20.63%)</title><rect x="507.1" y="277" width="243.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="510.07" y="287.5" >std::_Rb_tree&lt;std::pair&lt;int, int..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (12 samples, 0.73%)</title><rect x="994.1" y="213" width="8.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="997.05" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (10 samples, 0.61%)</title><rect x="1097.8" y="245" width="7.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1100.79" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (2 samples, 0.12%)</title><rect x="1185.7" y="245" width="1.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1188.68" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (16 samples, 0.98%)</title><rect x="1107.9" y="181" width="11.5" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1110.88" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (119 samples, 7.26%)</title><rect x="769.3" y="229" width="85.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="772.29" y="239.5" >std::_Rb_t..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_maximum   (1 samples, 0.06%)</title><rect x="741.9" y="229" width="0.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="744.92" y="239.5" ></text>
</g>
<g >
<title>free   (1 samples, 0.06%)</title><rect x="1187.8" y="181" width="0.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1190.84" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::pair&lt;int, int&gt; &gt;, true&gt;::_Rb_tree_impl   (1 samples, 0.06%)</title><rect x="1134.5" y="277" width="0.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1137.53" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (1 samples, 0.06%)</title><rect x="1188.6" y="293" width="0.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1191.56" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_lower_bound   (14 samples, 0.85%)</title><rect x="1079.1" y="277" width="10.0" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1082.06" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1188.6" y="245" width="0.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1191.56" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (169 samples, 10.32%)</title><rect x="385.3" y="277" width="121.8" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="388.32" y="287.5" >std::_Rb_tree&lt;s..</text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::insert   (19 samples, 1.16%)</title><rect x="1092.0" y="309" width="13.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1095.03" y="319.5" ></text>
</g>
<g >
<title>std::local_Rb_tree_rotate_left   (1 samples, 0.06%)</title><rect x="1105.0" y="245" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1107.99" y="255.5" ></text>
</g>
<g >
<title>choose_next_point   (1,638 samples, 100.00%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >choose_next_point  </text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (1 samples, 0.06%)</title><rect x="1173.4" y="277" width="0.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1176.43" y="287.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (1 samples, 0.06%)</title><rect x="1166.9" y="165" width="0.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1169.95" y="175.5" ></text>
</g>
<g >
<title>gen_all_points   (1 samples, 0.06%)</title><rect x="1172.0" y="325" width="0.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1174.99" y="335.5" ></text>
</g>
<g >
<title>free   (6 samples, 0.37%)</title><rect x="998.4" y="85" width="4.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1001.38" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (1 samples, 0.06%)</title><rect x="1187.8" y="309" width="0.8" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1190.84" y="319.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (112 samples, 6.84%)</title><rect x="865.8" y="165" width="80.7" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="868.82" y="175.5" >std::__ne..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (1 samples, 0.06%)</title><rect x="1187.8" y="277" width="0.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1190.84" y="287.5" ></text>
</g>
<g >
<title>round@plt   (4 samples, 0.24%)</title><rect x="239.1" y="277" width="2.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="242.08" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (16 samples, 0.98%)</title><rect x="1107.9" y="229" width="11.5" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1110.88" y="239.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;int, int&gt;*, std::pair&lt;int, int&gt;*, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;   (3 samples, 0.18%)</title><rect x="107.3" y="213" width="2.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="110.25" y="223.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (37 samples, 2.26%)</title><rect x="1027.9" y="229" width="26.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1030.91" y="239.5" >s..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Vector_base   (39 samples, 2.38%)</title><rect x="1026.5" y="277" width="28.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1029.47" y="287.5" >s..</text>
</g>
<g >
<title>free   (101 samples, 6.17%)</title><rect x="873.7" y="117" width="72.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="876.75" y="127.5" >free  </text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (14 samples, 0.85%)</title><rect x="1138.9" y="229" width="10.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1141.85" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (3 samples, 0.18%)</title><rect x="1056.0" y="197" width="2.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1059.01" y="207.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::set   (5 samples, 0.31%)</title><rect x="1180.6" y="325" width="3.6" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1183.63" y="335.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (115 samples, 7.02%)</title><rect x="518.6" y="117" width="82.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="521.60" y="127.5" >std::__ne..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (19 samples, 1.16%)</title><rect x="245.6" y="213" width="13.7" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="248.57" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (1 samples, 0.06%)</title><rect x="1177.8" y="245" width="0.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1180.75" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Rb_tree   (5 samples, 0.31%)</title><rect x="1180.6" y="309" width="3.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1183.63" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (2 samples, 0.12%)</title><rect x="1182.8" y="245" width="1.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1185.80" y="255.5" ></text>
</g>
<g >
<title>??   (65 samples, 3.97%)</title><rect x="899.7" y="101" width="46.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="902.68" y="111.5" >??  </text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (12 samples, 0.73%)</title><rect x="1120.8" y="213" width="8.7" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1123.84" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_M_reset   (1 samples, 0.06%)</title><rect x="1134.5" y="245" width="0.8" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1137.53" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (11 samples, 0.67%)</title><rect x="1121.6" y="197" width="7.9" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1124.56" y="207.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (5 samples, 0.31%)</title><rect x="1094.2" y="261" width="3.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1097.19" y="271.5" ></text>
</g>
<g >
<title>malloc   (2 samples, 0.12%)</title><rect x="1131.6" y="69" width="1.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1134.65" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (8 samples, 0.49%)</title><rect x="1054.6" y="293" width="5.7" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1057.57" y="303.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (118 samples, 7.20%)</title><rect x="619.5" y="101" width="85.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="622.45" y="111.5" >std::__new..</text>
</g>
<g >
<title>get_inbetween_points   (26 samples, 1.59%)</title><rect x="1060.3" y="309" width="18.8" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1063.33" y="319.5" ></text>
</g>
<g >
<title>free   (109 samples, 6.65%)</title><rect x="775.8" y="133" width="78.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="778.78" y="143.5" >free  </text>
</g>
<g >
<title>std::_Rb_tree_decrement   (1 samples, 0.06%)</title><rect x="1093.5" y="245" width="0.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1096.47" y="255.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (3 samples, 0.18%)</title><rect x="1169.8" y="245" width="2.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1172.83" y="255.5" ></text>
</g>
<g >
<title>??   (10 samples, 0.61%)</title><rect x="1141.7" y="133" width="7.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1144.73" y="143.5" ></text>
</g>
<g >
<title>malloc   (9 samples, 0.55%)</title><rect x="1098.5" y="149" width="6.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1101.51" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (20 samples, 1.22%)</title><rect x="91.4" y="213" width="14.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="94.40" y="223.5" ></text>
</g>
<g >
<title>??   (63 samples, 3.85%)</title><rect x="808.9" y="117" width="45.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="811.91" y="127.5" >??  </text>
</g>
<g >
<title>gen_all_points   (76 samples, 4.64%)</title><rect x="54.7" y="293" width="54.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="57.66" y="303.5" >gen_a..</text>
</g>
<g >
<title>operator delete   (2 samples, 0.12%)</title><rect x="1185.7" y="165" width="1.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1188.68" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (1 samples, 0.06%)</title><rect x="1188.6" y="325" width="0.7" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1191.56" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (68 samples, 4.15%)</title><rect x="60.4" y="245" width="49.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="63.43" y="255.5" >std:..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (10 samples, 0.61%)</title><rect x="1002.7" y="229" width="7.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1005.70" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (30 samples, 1.83%)</title><rect x="718.1" y="85" width="21.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="721.14" y="95.5" >s..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1172.0" y="213" width="0.7" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1174.99" y="223.5" ></text>
</g>
<g >
<title>operator delete   (112 samples, 6.84%)</title><rect x="865.8" y="149" width="80.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="868.82" y="159.5" >operator ..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::size   (4 samples, 0.24%)</title><rect x="265.0" y="213" width="2.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="268.02" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (195 samples, 11.90%)</title><rect x="601.4" y="213" width="140.5" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="604.44" y="223.5" >std::_Rb_tree&lt;std..</text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (5 samples, 0.31%)</title><rect x="1085.5" y="245" width="3.6" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1088.54" y="255.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (14 samples, 0.85%)</title><rect x="1138.9" y="197" width="10.0" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1141.85" y="207.5" ></text>
</g>
<g >
<title>operator new(unsigned long)@plt   (4 samples, 0.24%)</title><rect x="701.6" y="85" width="2.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="704.58" y="95.5" ></text>
</g>
<g >
<title>operator delete   (1 samples, 0.06%)</title><rect x="1184.2" y="181" width="0.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1187.24" y="191.5" ></text>
</g>
<g >
<title>operator delete   (1 samples, 0.06%)</title><rect x="1166.9" y="133" width="0.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1169.95" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Rb_tree   (1 samples, 0.06%)</title><rect x="1189.3" y="341" width="0.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1192.28" y="351.5" ></text>
</g>
<g >
<title>std::local_Rb_tree_rotate_left   (1 samples, 0.06%)</title><rect x="502.7" y="229" width="0.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="505.75" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_allocate   (1 samples, 0.06%)</title><rect x="1172.0" y="261" width="0.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1174.99" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (36 samples, 2.20%)</title><rect x="65.5" y="213" width="25.9" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="68.47" y="223.5" >s..</text>
</g>
<g >
<title>operator new   (11 samples, 0.67%)</title><rect x="1121.6" y="101" width="7.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1124.56" y="111.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (10 samples, 0.61%)</title><rect x="1097.8" y="261" width="7.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1100.79" y="271.5" ></text>
</g>
<g >
<title>free   (2 samples, 0.12%)</title><rect x="1058.2" y="149" width="1.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1061.17" y="159.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (115 samples, 7.02%)</title><rect x="518.6" y="133" width="82.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="521.60" y="143.5" >std::allo..</text>
</g>
<g >
<title>std::_Rb_tree_node_base::_S_minimum   (10 samples, 0.61%)</title><rect x="742.6" y="213" width="7.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="745.64" y="223.5" ></text>
</g>
<g >
<title>operator new   (3 samples, 0.18%)</title><rect x="1130.9" y="85" width="2.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1133.93" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (1 samples, 0.06%)</title><rect x="1174.2" y="245" width="0.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1177.15" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (3 samples, 0.18%)</title><rect x="739.8" y="133" width="2.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="742.76" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (1 samples, 0.06%)</title><rect x="1189.3" y="325" width="0.7" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1192.28" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (5 samples, 0.31%)</title><rect x="1180.6" y="261" width="3.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1183.63" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (3 samples, 0.18%)</title><rect x="739.8" y="165" width="2.1" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="742.76" y="175.5" ></text>
</g>
<g >
<title>operator new   (1 samples, 0.06%)</title><rect x="1178.5" y="181" width="0.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1181.47" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_maximum   (2 samples, 0.12%)</title><rect x="1133.1" y="245" width="1.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1136.09" y="255.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (1 samples, 0.06%)</title><rect x="1189.3" y="261" width="0.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1192.28" y="271.5" ></text>
</g>
<g >
<title>gen_all_points   (8 samples, 0.49%)</title><rect x="1054.6" y="309" width="5.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1057.57" y="319.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (118 samples, 7.20%)</title><rect x="619.5" y="117" width="85.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="622.45" y="127.5" >std::alloc..</text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (4 samples, 0.24%)</title><rect x="1089.1" y="261" width="2.9" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1092.15" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_allocate   (36 samples, 2.20%)</title><rect x="65.5" y="229" width="25.9" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="68.47" y="239.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (2 samples, 0.12%)</title><rect x="1167.7" y="261" width="1.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1170.67" y="271.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;int, int&gt;*, std::pair&lt;int, int&gt;*, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;   (1 samples, 0.06%)</title><rect x="267.9" y="197" width="0.7" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="270.90" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (1 samples, 0.06%)</title><rect x="1188.6" y="261" width="0.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1191.56" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_check_len   (1 samples, 0.06%)</title><rect x="1059.6" y="245" width="0.7" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1062.61" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (3 samples, 0.18%)</title><rect x="739.8" y="149" width="2.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="742.76" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_relocate   (1 samples, 0.06%)</title><rect x="267.9" y="229" width="0.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="270.90" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (5 samples, 0.31%)</title><rect x="1163.3" y="165" width="3.6" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1166.35" y="175.5" ></text>
</g>
<g >
<title>std::local_Rb_tree_decrement   (1 samples, 0.06%)</title><rect x="1093.5" y="229" width="0.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1096.47" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (3 samples, 0.18%)</title><rect x="1130.9" y="133" width="2.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1133.93" y="143.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1178.5" y="197" width="0.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1181.47" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (1 samples, 0.06%)</title><rect x="1189.3" y="277" width="0.7" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1192.28" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (30 samples, 1.83%)</title><rect x="718.1" y="133" width="21.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="721.14" y="143.5" >s..</text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (19 samples, 1.16%)</title><rect x="245.6" y="197" width="13.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="248.57" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (1 samples, 0.06%)</title><rect x="1166.9" y="229" width="0.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1169.95" y="239.5" ></text>
</g>
<g >
<title>operator delete   (116 samples, 7.08%)</title><rect x="770.7" y="149" width="83.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="773.73" y="159.5" >operator ..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (115 samples, 7.02%)</title><rect x="518.6" y="165" width="82.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="521.60" y="175.5" >std::_Rb_..</text>
</g>
<g >
<title>operator new   (30 samples, 1.83%)</title><rect x="718.1" y="69" width="21.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="721.14" y="79.5" >o..</text>
</g>
<g >
<title>choose_next_point   (1,637 samples, 99.94%)</title><rect x="10.0" y="357" width="1179.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >choose_next_point  </text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::find   (156 samples, 9.52%)</title><rect x="272.9" y="277" width="112.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="275.94" y="287.5" >std::_Rb_tree..</text>
</g>
<g >
<title>std::local_Rb_tree_decrement   (1 samples, 0.06%)</title><rect x="407.7" y="197" width="0.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="410.66" y="207.5" ></text>
</g>
<g >
<title>free   (2 samples, 0.12%)</title><rect x="1185.7" y="149" width="1.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1188.68" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (1 samples, 0.06%)</title><rect x="1184.2" y="245" width="0.8" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1187.24" y="255.5" ></text>
</g>
<g >
<title>operator delete   (1 samples, 0.06%)</title><rect x="1166.9" y="117" width="0.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1169.95" y="127.5" ></text>
</g>
<g >
<title>free   (2 samples, 0.12%)</title><rect x="1076.2" y="149" width="1.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1079.18" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (3 samples, 0.18%)</title><rect x="1169.8" y="261" width="2.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1172.83" y="271.5" ></text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (69 samples, 4.21%)</title><rect x="324.1" y="229" width="49.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="327.09" y="239.5" >std::..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (9 samples, 0.55%)</title><rect x="996.2" y="133" width="6.5" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="999.21" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_insert_unique_pos   (3 samples, 0.18%)</title><rect x="1176.3" y="293" width="2.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1179.31" y="303.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (9 samples, 0.55%)</title><rect x="996.2" y="149" width="6.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="999.21" y="159.5" ></text>
</g>
<g >
<title>free   (34 samples, 2.08%)</title><rect x="1029.4" y="165" width="24.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1032.35" y="175.5" >f..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1188.6" y="213" width="0.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1191.56" y="223.5" ></text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (30 samples, 1.83%)</title><rect x="408.4" y="229" width="21.6" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="411.38" y="239.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (1 samples, 0.06%)</title><rect x="1178.5" y="245" width="0.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1181.47" y="255.5" ></text>
</g>
<g >
<title>operator delete   (5 samples, 0.31%)</title><rect x="1163.3" y="149" width="3.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1166.35" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (115 samples, 7.02%)</title><rect x="518.6" y="149" width="82.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="521.60" y="159.5" >std::allo..</text>
</g>
<g >
<title>operator new   (10 samples, 0.61%)</title><rect x="1097.8" y="165" width="7.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1100.79" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (16 samples, 0.98%)</title><rect x="1107.9" y="165" width="11.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1110.88" y="175.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (16 samples, 0.98%)</title><rect x="1107.9" y="149" width="11.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1110.88" y="159.5" ></text>
</g>
<g >
<title>free   (1 samples, 0.06%)</title><rect x="1189.3" y="197" width="0.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1192.28" y="207.5" ></text>
</g>
<g >
<title>malloc   (1 samples, 0.06%)</title><rect x="1173.4" y="181" width="0.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1176.43" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::vector   (6 samples, 0.37%)</title><rect x="268.6" y="277" width="4.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="271.62" y="287.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (3 samples, 0.18%)</title><rect x="739.8" y="85" width="2.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="742.76" y="95.5" ></text>
</g>
<g >
<title>roundf64   (2 samples, 0.12%)</title><rect x="242.0" y="277" width="1.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="244.97" y="287.5" ></text>
</g>
<g >
<title>free   (1 samples, 0.06%)</title><rect x="1184.2" y="165" width="0.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1187.24" y="175.5" ></text>
</g>
<g >
<title>operator new   (3 samples, 0.18%)</title><rect x="739.8" y="53" width="2.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="742.76" y="63.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_insert_unique_pos   (6 samples, 0.37%)</title><rect x="1093.5" y="277" width="4.3" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1096.47" y="287.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (59 samples, 3.60%)</title><rect x="951.6" y="165" width="42.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="954.55" y="175.5" >std:..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (35 samples, 2.14%)</title><rect x="243.4" y="245" width="25.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="246.41" y="255.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree_header::_Rb_tree_header   (1 samples, 0.06%)</title><rect x="749.8" y="245" width="0.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="752.84" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (4 samples, 0.24%)</title><rect x="1169.1" y="277" width="2.9" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1172.11" y="287.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (2 samples, 0.12%)</title><rect x="1185.7" y="197" width="1.4" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1188.68" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (7 samples, 0.43%)</title><rect x="259.3" y="213" width="5.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="262.26" y="223.5" ></text>
</g>
<g >
<title>??   (2 samples, 0.12%)</title><rect x="1117.2" y="85" width="1.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1120.24" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~vector   (4 samples, 0.24%)</title><rect x="1169.1" y="309" width="2.9" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1172.11" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (2 samples, 0.12%)</title><rect x="1076.2" y="245" width="1.4" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1079.18" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_check_len   (5 samples, 0.31%)</title><rect x="264.3" y="229" width="3.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="267.30" y="239.5" ></text>
</g>
<g >
<title>malloc   (93 samples, 5.68%)</title><rect x="534.4" y="85" width="67.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="537.44" y="95.5" >malloc  </text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::find   (3 samples, 0.18%)</title><rect x="1174.2" y="309" width="2.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1177.15" y="319.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (15 samples, 0.92%)</title><rect x="1150.4" y="181" width="10.8" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1153.38" y="191.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (71 samples, 4.33%)</title><rect x="435.8" y="165" width="51.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="438.75" y="175.5" >std::..</text>
</g>
<g >
<title>operator delete   (2 samples, 0.12%)</title><rect x="1058.2" y="165" width="1.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1061.17" y="175.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (7 samples, 0.43%)</title><rect x="259.3" y="181" width="5.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="262.26" y="191.5" ></text>
</g>
<g >
<title>operator delete   (3 samples, 0.18%)</title><rect x="1169.8" y="197" width="2.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1172.83" y="207.5" ></text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (1 samples, 0.06%)</title><rect x="1174.2" y="261" width="0.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1177.15" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (382 samples, 23.32%)</title><rect x="751.3" y="261" width="275.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="754.28" y="271.5" >std::_Rb_tree&lt;std::pair&lt;int, int&gt;, s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (4 samples, 0.24%)</title><rect x="1130.2" y="197" width="2.9" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1133.21" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (59 samples, 3.60%)</title><rect x="951.6" y="197" width="42.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="954.55" y="207.5" >std:..</text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::insert   (169 samples, 10.32%)</title><rect x="385.3" y="293" width="121.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="388.32" y="303.5" >std::set&lt;std::p..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (122 samples, 7.45%)</title><rect x="616.6" y="197" width="87.9" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="619.57" y="207.5" >std::_Rb_t..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (115 samples, 7.02%)</title><rect x="518.6" y="181" width="82.8" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="521.60" y="191.5" >std::_Rb_..</text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1178.5" y="213" width="0.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1181.47" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~vector   (39 samples, 2.38%)</title><rect x="1026.5" y="293" width="28.1" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1029.47" y="303.5" >s..</text>
</g>
<g >
<title>main   (1,638 samples, 100.00%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >main  </text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (19 samples, 1.16%)</title><rect x="1119.4" y="229" width="13.7" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1122.40" y="239.5" ></text>
</g>
<g >
<title>operator delete   (116 samples, 7.08%)</title><rect x="770.7" y="165" width="83.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="773.73" y="175.5" >operator ..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_allocate   (19 samples, 1.16%)</title><rect x="245.6" y="229" width="13.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="248.57" y="239.5" ></text>
</g>
<g >
<title>operator delete(void*, unsigned long)@plt   (1 samples, 0.06%)</title><rect x="1053.8" y="197" width="0.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1056.85" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (72 samples, 4.40%)</title><rect x="57.5" y="277" width="51.9" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="60.55" y="287.5" >std::..</text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (3 samples, 0.18%)</title><rect x="1130.9" y="117" width="2.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1133.93" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (336 samples, 20.51%)</title><rect x="507.8" y="245" width="242.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="510.79" y="255.5" >std::_Rb_tree&lt;std::pair&lt;int, int..</text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::insert   (6 samples, 0.37%)</title><rect x="1176.3" y="325" width="4.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1179.31" y="335.5" ></text>
</g>
<g >
<title>is_close_int   (75 samples, 4.58%)</title><rect x="185.1" y="277" width="54.0" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="188.05" y="287.5" >is_cl..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_allocate   (1 samples, 0.06%)</title><rect x="1075.5" y="245" width="0.7" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1078.46" y="255.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.06%)</title><rect x="1186.4" y="133" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1189.40" y="143.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (10 samples, 0.61%)</title><rect x="1097.8" y="197" width="7.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1100.79" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (59 samples, 3.60%)</title><rect x="951.6" y="181" width="42.5" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="954.55" y="191.5" >std:..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (59 samples, 3.60%)</title><rect x="951.6" y="149" width="42.5" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="954.55" y="159.5" >std:..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Rb_tree   (5 samples, 0.31%)</title><rect x="1184.2" y="309" width="3.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1187.24" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (71 samples, 4.33%)</title><rect x="435.8" y="197" width="51.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="438.75" y="207.5" >std::..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Vector_base   (6 samples, 0.37%)</title><rect x="268.6" y="261" width="4.3" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="271.62" y="271.5" ></text>
</g>
<g >
<title>operator delete   (1 samples, 0.06%)</title><rect x="1187.8" y="213" width="0.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1190.84" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_M_reset   (1 samples, 0.06%)</title><rect x="749.8" y="229" width="0.8" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="752.84" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (2 samples, 0.12%)</title><rect x="1185.7" y="261" width="1.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1188.68" y="271.5" ></text>
</g>
<g >
<title>is_close_int   (9 samples, 0.55%)</title><rect x="1066.8" y="293" width="6.5" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1069.81" y="303.5" ></text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (1 samples, 0.06%)</title><rect x="1177.8" y="261" width="0.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1180.75" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Rb_tree   (383 samples, 23.38%)</title><rect x="750.6" y="277" width="275.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="753.56" y="287.5" >std::_Rb_tree&lt;std::pair&lt;int, int&gt;, s..</text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (14 samples, 0.85%)</title><rect x="1138.9" y="213" width="10.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1141.85" y="223.5" ></text>
</g>
<g >
<title>choose_next_point   (1,612 samples, 98.41%)</title><rect x="10.7" y="325" width="1161.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="13.72" y="335.5" >choose_next_point  </text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (1 samples, 0.06%)</title><rect x="1184.2" y="229" width="0.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1187.24" y="239.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1188.6" y="229" width="0.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1191.56" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (1 samples, 0.06%)</title><rect x="1187.8" y="325" width="0.8" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1190.84" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (19 samples, 1.16%)</title><rect x="1092.0" y="293" width="13.7" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1095.03" y="303.5" ></text>
</g>
<g >
<title>??   (4 samples, 0.24%)</title><rect x="1164.1" y="101" width="2.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1167.07" y="111.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (120 samples, 7.33%)</title><rect x="515.0" y="213" width="86.4" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="517.99" y="223.5" >std::_Rb_t..</text>
</g>
<g >
<title>??   (12 samples, 0.73%)</title><rect x="1152.5" y="117" width="8.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1155.54" y="127.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (37 samples, 2.26%)</title><rect x="1027.9" y="213" width="26.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1030.91" y="223.5" >s..</text>
</g>
<g >
<title>operator delete   (36 samples, 2.20%)</title><rect x="1027.9" y="197" width="25.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1030.91" y="207.5" >o..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (37 samples, 2.26%)</title><rect x="1027.9" y="245" width="26.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1030.91" y="255.5" >s..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (119 samples, 7.26%)</title><rect x="769.3" y="213" width="85.7" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="772.29" y="223.5" >std::alloc..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (112 samples, 6.84%)</title><rect x="865.8" y="213" width="80.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="868.82" y="223.5" >std::_Rb_..</text>
</g>
<g >
<title>operator delete   (3 samples, 0.18%)</title><rect x="1169.8" y="213" width="2.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1172.83" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (215 samples, 13.13%)</title><rect x="855.0" y="245" width="154.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="858.02" y="255.5" >std::_Rb_tree&lt;std::..</text>
</g>
<g >
<title>operator delete   (18 samples, 1.10%)</title><rect x="92.8" y="165" width="13.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="95.84" y="175.5" ></text>
</g>
<g >
<title>std::abs   (2 samples, 0.12%)</title><rect x="1068.3" y="277" width="1.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1071.25" y="287.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (3 samples, 0.18%)</title><rect x="1130.9" y="101" width="2.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1133.93" y="111.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (1 samples, 0.06%)</title><rect x="1174.2" y="277" width="0.7" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1177.15" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (30 samples, 1.83%)</title><rect x="718.1" y="149" width="21.7" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="721.14" y="159.5" >s..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (1 samples, 0.06%)</title><rect x="1173.4" y="309" width="0.8" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1176.43" y="319.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.06%)</title><rect x="1166.9" y="85" width="0.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1169.95" y="95.5" ></text>
</g>
<g >
<title>operator delete   (59 samples, 3.60%)</title><rect x="951.6" y="133" width="42.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="954.55" y="143.5" >oper..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (2 samples, 0.12%)</title><rect x="1076.2" y="229" width="1.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1079.18" y="239.5" ></text>
</g>
<g >
<title>std::local_Rb_tree_decrement   (2 samples, 0.12%)</title><rect x="406.9" y="213" width="1.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="409.94" y="223.5" ></text>
</g>
<g >
<title>std::abs   (7 samples, 0.43%)</title><rect x="193.7" y="261" width="5.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="196.70" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (71 samples, 4.33%)</title><rect x="435.8" y="213" width="51.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="438.75" y="223.5" >std::..</text>
</g>
<g >
<title>operator delete   (1 samples, 0.06%)</title><rect x="1189.3" y="229" width="0.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1192.28" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (35 samples, 2.14%)</title><rect x="243.4" y="277" width="25.2" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="246.41" y="287.5" >s..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (3 samples, 0.18%)</title><rect x="1169.8" y="229" width="2.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1172.83" y="239.5" ></text>
</g>
<g >
<title>operator new   (108 samples, 6.59%)</title><rect x="523.6" y="101" width="77.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="526.64" y="111.5" >operator..</text>
</g>
<g >
<title>malloc   (1 samples, 0.06%)</title><rect x="1172.0" y="181" width="0.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1174.99" y="191.5" ></text>
</g>
<g >
<title>free   (2 samples, 0.12%)</title><rect x="769.3" y="165" width="1.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="772.29" y="175.5" ></text>
</g>
<g >
<title>operator delete   (14 samples, 0.85%)</title><rect x="1138.9" y="165" width="10.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1141.85" y="175.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (20 samples, 1.22%)</title><rect x="91.4" y="181" width="14.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="94.40" y="191.5" ></text>
</g>
<g >
<title>free   (1 samples, 0.06%)</title><rect x="1166.9" y="101" width="0.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1169.95" y="111.5" ></text>
</g>
<g >
<title>operator new   (1 samples, 0.06%)</title><rect x="1173.4" y="197" width="0.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1176.43" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (5 samples, 0.31%)</title><rect x="1163.3" y="213" width="3.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1166.35" y="223.5" ></text>
</g>
<g >
<title>free   (18 samples, 1.10%)</title><rect x="92.8" y="133" width="13.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="95.84" y="143.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (3 samples, 0.18%)</title><rect x="739.8" y="69" width="2.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="742.76" y="79.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (1 samples, 0.06%)</title><rect x="1182.1" y="245" width="0.7" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1185.08" y="255.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::contains   (156 samples, 9.52%)</title><rect x="272.9" y="293" width="112.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="275.94" y="303.5" >std::set&lt;std:..</text>
</g>
<g >
<title>malloc   (13 samples, 0.79%)</title><rect x="1109.3" y="101" width="9.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1112.32" y="111.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement   (3 samples, 0.18%)</title><rect x="406.2" y="229" width="2.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="409.21" y="239.5" ></text>
</g>
<g >
<title>get_inbetween_points   (227 samples, 13.86%)</title><rect x="109.4" y="293" width="163.5" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="112.41" y="303.5" >get_inbetween_points  </text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (11 samples, 0.67%)</title><rect x="1121.6" y="149" width="7.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1124.56" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (1 samples, 0.06%)</title><rect x="1172.0" y="277" width="0.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1174.99" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (5 samples, 0.31%)</title><rect x="1085.5" y="229" width="3.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1088.54" y="239.5" ></text>
</g>
<g >
<title>operator delete   (7 samples, 0.43%)</title><rect x="259.3" y="165" width="5.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="262.26" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data   (6 samples, 0.37%)</title><rect x="268.6" y="229" width="4.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="271.62" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (71 samples, 4.33%)</title><rect x="435.8" y="245" width="51.1" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="438.75" y="255.5" >std::..</text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (2 samples, 0.12%)</title><rect x="1174.9" y="277" width="1.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1177.87" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (20 samples, 1.22%)</title><rect x="91.4" y="229" width="14.4" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="94.40" y="239.5" ></text>
</g>
<g >
<title>free   (15 samples, 0.92%)</title><rect x="1150.4" y="133" width="10.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1153.38" y="143.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (2 samples, 0.12%)</title><rect x="1058.2" y="213" width="1.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1061.17" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (6 samples, 0.37%)</title><rect x="1074.7" y="261" width="4.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1077.74" y="271.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (1 samples, 0.06%)</title><rect x="1166.9" y="149" width="0.8" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1169.95" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1172.0" y="245" width="0.7" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1174.99" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (1 samples, 0.06%)</title><rect x="1189.3" y="309" width="0.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1192.28" y="319.5" ></text>
</g>
<g >
<title>??   (33 samples, 2.01%)</title><rect x="970.3" y="85" width="23.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="973.28" y="95.5" >?..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy   (40 samples, 2.44%)</title><rect x="1105.7" y="277" width="28.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1108.71" y="287.5" >st..</text>
</g>
<g >
<title>operator delete   (8 samples, 0.49%)</title><rect x="996.9" y="117" width="5.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="999.94" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance   (1 samples, 0.06%)</title><rect x="1105.0" y="261" width="0.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1107.99" y="271.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (2 samples, 0.12%)</title><rect x="1185.7" y="213" width="1.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1188.68" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (38 samples, 2.32%)</title><rect x="1027.2" y="261" width="27.4" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1030.19" y="271.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (1 samples, 0.06%)</title><rect x="1178.5" y="277" width="0.7" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1181.47" y="287.5" ></text>
</g>
<g >
<title>free   (5 samples, 0.31%)</title><rect x="1163.3" y="117" width="3.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1166.35" y="127.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (2 samples, 0.12%)</title><rect x="1076.2" y="213" width="1.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1079.18" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (3 samples, 0.18%)</title><rect x="739.8" y="117" width="2.1" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="742.76" y="127.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1075.5" y="213" width="0.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1078.46" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (112 samples, 6.84%)</title><rect x="865.8" y="229" width="80.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="868.82" y="239.5" >std::_Rb_..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (78 samples, 4.76%)</title><rect x="946.5" y="229" width="56.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="949.51" y="239.5" >std::..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (1 samples, 0.06%)</title><rect x="1172.0" y="293" width="0.7" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1174.99" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance   (25 samples, 1.53%)</title><rect x="486.9" y="245" width="18.0" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="489.90" y="255.5" ></text>
</g>
<g >
<title>choose_next_point   (1,638 samples, 100.00%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >choose_next_point  </text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1182.1" y="149" width="0.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1185.08" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (10 samples, 0.61%)</title><rect x="1097.8" y="213" width="7.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1100.79" y="223.5" ></text>
</g>
<g >
<title>operator delete(void*, unsigned long)@plt   (1 samples, 0.06%)</title><rect x="854.3" y="165" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="857.30" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_minimum   (10 samples, 0.61%)</title><rect x="742.6" y="229" width="7.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="745.64" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (15 samples, 0.92%)</title><rect x="1150.4" y="213" width="10.8" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1153.38" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (324 samples, 19.78%)</title><rect x="508.5" y="229" width="233.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="511.51" y="239.5" >std::_Rb_tree&lt;std::pair&lt;int, i..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (119 samples, 7.26%)</title><rect x="769.3" y="181" width="85.7" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="772.29" y="191.5" >std::__new..</text>
</g>
<g >
<title>operator delete   (59 samples, 3.60%)</title><rect x="951.6" y="117" width="42.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="954.55" y="127.5" >oper..</text>
</g>
<g >
<title>operator new   (15 samples, 0.92%)</title><rect x="1107.9" y="117" width="10.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1110.88" y="127.5" ></text>
</g>
<g >
<title>free   (13 samples, 0.79%)</title><rect x="1139.6" y="149" width="9.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1142.57" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int, int&gt; &gt;::operator--   (1 samples, 0.06%)</title><rect x="1093.5" y="261" width="0.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1096.47" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (1 samples, 0.06%)</title><rect x="1075.5" y="229" width="0.7" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1078.46" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Vector_impl::_Vector_impl   (6 samples, 0.37%)</title><rect x="268.6" y="245" width="4.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="271.62" y="255.5" ></text>
</g>
</g>
</svg>
