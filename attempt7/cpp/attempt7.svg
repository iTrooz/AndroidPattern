<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (69 samples, 3.51%)</title><rect x="1125.7" y="277" width="41.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1128.75" y="287.5" >std..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (3 samples, 0.15%)</title><rect x="1167.2" y="229" width="1.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1170.18" y="239.5" ></text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (23 samples, 1.17%)</title><rect x="364.3" y="245" width="13.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="367.30" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (3 samples, 0.15%)</title><rect x="245.4" y="213" width="1.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="248.40" y="223.5" ></text>
</g>
<g >
<title>operator delete   (3 samples, 0.15%)</title><rect x="1184.6" y="213" width="1.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1187.60" y="223.5" ></text>
</g>
<g >
<title>operator delete   (4 samples, 0.20%)</title><rect x="993.0" y="101" width="2.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="996.03" y="111.5" ></text>
</g>
<g >
<title>operator delete   (21 samples, 1.07%)</title><rect x="1148.6" y="149" width="12.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1151.56" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (35 samples, 1.78%)</title><rect x="64.6" y="213" width="21.1" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="67.65" y="223.5" ></text>
</g>
<g >
<title>get_inbetween_points   (1 samples, 0.05%)</title><rect x="1186.4" y="341" width="0.6" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1189.40" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (5 samples, 0.25%)</title><rect x="1181.6" y="293" width="3.0" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1184.59" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (23 samples, 1.17%)</title><rect x="364.3" y="229" width="13.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="367.30" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (7 samples, 0.36%)</title><rect x="1088.5" y="261" width="4.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1091.51" y="271.5" ></text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (102 samples, 5.19%)</title><rect x="303.0" y="229" width="61.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="306.05" y="239.5" >std::o..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Vector_base   (3 samples, 0.15%)</title><rect x="1167.2" y="293" width="1.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1170.18" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (58 samples, 2.95%)</title><rect x="958.2" y="197" width="34.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="961.20" y="207.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (2 samples, 0.10%)</title><rect x="1068.1" y="229" width="1.2" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1071.10" y="239.5" ></text>
</g>
<g >
<title>malloc   (2 samples, 0.10%)</title><rect x="731.8" y="37" width="1.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="734.81" y="47.5" ></text>
</g>
<g >
<title>free   (3 samples, 0.15%)</title><rect x="1184.6" y="197" width="1.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1187.60" y="207.5" ></text>
</g>
<g >
<title>is_close_int   (1 samples, 0.05%)</title><rect x="1188.2" y="341" width="0.6" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1191.20" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (4 samples, 0.20%)</title><rect x="730.6" y="165" width="2.4" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="733.61" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (7 samples, 0.36%)</title><rect x="1161.2" y="197" width="4.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1164.18" y="207.5" ></text>
</g>
<g >
<title>operator new   (4 samples, 0.20%)</title><rect x="730.6" y="53" width="2.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="733.61" y="63.5" ></text>
</g>
<g >
<title>get_inbetween_points   (5 samples, 0.25%)</title><rect x="1170.8" y="325" width="3.0" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1173.78" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::vector   (4 samples, 0.20%)</title><rect x="250.2" y="277" width="2.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="253.20" y="287.5" ></text>
</g>
<g >
<title>free   (20 samples, 1.02%)</title><rect x="1149.2" y="133" width="12.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1152.17" y="143.5" ></text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (2 samples, 0.10%)</title><rect x="1078.3" y="261" width="1.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1081.31" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (40 samples, 2.04%)</title><rect x="1024.3" y="245" width="24.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1027.26" y="255.5" >s..</text>
</g>
<g >
<title>choose_next_point   (1,963 samples, 99.90%)</title><rect x="10.0" y="389" width="1178.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >choose_next_point  </text>
</g>
<g >
<title>operator new   (116 samples, 5.90%)</title><rect x="622.5" y="85" width="69.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="625.52" y="95.5" >operato..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Rb_tree   (50 samples, 2.54%)</title><rect x="1095.7" y="293" width="30.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1098.72" y="303.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (4 samples, 0.20%)</title><rect x="993.0" y="165" width="2.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="996.03" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (22 samples, 1.12%)</title><rect x="1148.0" y="213" width="13.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1150.96" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (60 samples, 3.05%)</title><rect x="443.0" y="229" width="36.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="445.97" y="239.5" >std..</text>
</g>
<g >
<title>operator delete   (146 samples, 7.43%)</title><rect x="763.6" y="149" width="87.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="766.64" y="159.5" >operator d..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (4 samples, 0.20%)</title><rect x="1181.6" y="213" width="2.4" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1184.59" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (157 samples, 7.99%)</title><rect x="860.9" y="197" width="94.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="863.92" y="207.5" >std::alloca..</text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (2 samples, 0.10%)</title><rect x="1068.1" y="213" width="1.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1071.10" y="223.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (20 samples, 1.02%)</title><rect x="1098.7" y="133" width="12.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1101.72" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::size   (1 samples, 0.05%)</title><rect x="1173.2" y="245" width="0.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1176.19" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (141 samples, 7.18%)</title><rect x="516.2" y="213" width="84.7" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="519.23" y="223.5" >std::_Rb_..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (54 samples, 2.75%)</title><rect x="697.6" y="181" width="32.4" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="700.58" y="191.5" >st..</text>
</g>
<g >
<title>free   (141 samples, 7.18%)</title><rect x="766.6" y="133" width="84.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="769.64" y="143.5" >free  </text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (250 samples, 12.72%)</title><rect x="851.9" y="245" width="150.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="854.91" y="255.5" >std::_Rb_tree&lt;std::..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Rb_tree   (2 samples, 0.10%)</title><rect x="1187.0" y="325" width="1.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1190.00" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (7 samples, 0.36%)</title><rect x="1088.5" y="213" width="4.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1091.51" y="223.5" ></text>
</g>
<g >
<title>malloc   (1 samples, 0.05%)</title><rect x="1172.6" y="181" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1175.59" y="191.5" ></text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (3 samples, 0.15%)</title><rect x="1084.9" y="245" width="1.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1087.91" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (7 samples, 0.36%)</title><rect x="1161.2" y="245" width="4.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1164.18" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (4 samples, 0.20%)</title><rect x="1176.8" y="213" width="2.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1179.79" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_M_reset   (1 samples, 0.05%)</title><rect x="742.6" y="229" width="0.6" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="745.62" y="239.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (7 samples, 0.36%)</title><rect x="1088.5" y="197" width="4.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1091.51" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (2 samples, 0.10%)</title><rect x="1180.4" y="165" width="1.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1183.39" y="175.5" ></text>
</g>
<g >
<title>??   (2 samples, 0.10%)</title><rect x="1188.8" y="261" width="1.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1191.80" y="271.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (2 samples, 0.10%)</title><rect x="1180.4" y="133" width="1.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1183.39" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_lower_bound   (15 samples, 0.76%)</title><rect x="1069.3" y="277" width="9.0" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1072.30" y="287.5" ></text>
</g>
<g >
<title>choose_next_point   (1,725 samples, 87.79%)</title><rect x="12.4" y="309" width="1035.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="15.40" y="319.5" >choose_next_point  </text>
</g>
<g >
<title>is_close_int   (79 samples, 4.02%)</title><rect x="173.9" y="277" width="47.5" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="176.94" y="287.5" >is_c..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Vector_base   (44 samples, 2.24%)</title><rect x="1021.9" y="277" width="26.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1024.86" y="287.5" >s..</text>
</g>
<g >
<title>gen_all_points   (89 samples, 4.53%)</title><rect x="49.6" y="293" width="53.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="52.63" y="303.5" >gen_a..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (1 samples, 0.05%)</title><rect x="1187.0" y="261" width="0.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1190.00" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (147 samples, 7.48%)</title><rect x="763.6" y="229" width="88.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="766.64" y="239.5" >std::_Rb_t..</text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::size   (3 samples, 0.15%)</title><rect x="47.8" y="277" width="1.8" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="50.83" y="287.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::contains   (17 samples, 0.87%)</title><rect x="1069.3" y="309" width="10.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1072.30" y="319.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (1 samples, 0.05%)</title><rect x="1187.0" y="229" width="0.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1190.00" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (7 samples, 0.36%)</title><rect x="1161.2" y="229" width="4.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1164.18" y="239.5" ></text>
</g>
<g >
<title>operator new   (1 samples, 0.05%)</title><rect x="1172.6" y="197" width="0.6" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1175.59" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;int, int&gt; const&amp;, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (108 samples, 5.50%)</title><rect x="434.0" y="261" width="64.8" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="436.96" y="271.5" >std::_R..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_check_len   (1 samples, 0.05%)</title><rect x="1173.2" y="261" width="0.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1176.19" y="271.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (1 samples, 0.05%)</title><rect x="1172.6" y="213" width="0.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1175.59" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~vector   (3 samples, 0.15%)</title><rect x="1184.6" y="325" width="1.8" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1187.60" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy   (50 samples, 2.54%)</title><rect x="1095.7" y="277" width="30.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1098.72" y="287.5" >st..</text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (4 samples, 0.20%)</title><rect x="496.4" y="245" width="2.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="499.41" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_allocate   (2 samples, 0.10%)</title><rect x="1068.1" y="245" width="1.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1071.10" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (7 samples, 0.36%)</title><rect x="1088.5" y="245" width="4.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1091.51" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::find   (209 samples, 10.64%)</title><rect x="252.6" y="277" width="125.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="255.61" y="287.5" >std::_Rb_tree&lt;s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (220 samples, 11.20%)</title><rect x="600.9" y="213" width="132.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="603.90" y="223.5" >std::_Rb_tree&lt;st..</text>
</g>
<g >
<title>??   (2 samples, 0.10%)</title><rect x="1122.7" y="53" width="1.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1125.74" y="63.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node_base::_S_maximum   (7 samples, 0.36%)</title><rect x="733.0" y="213" width="4.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="736.01" y="223.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~set   (5 samples, 0.25%)</title><rect x="1181.6" y="325" width="3.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1184.59" y="335.5" ></text>
</g>
<g >
<title>??   (16 samples, 0.81%)</title><rect x="1135.4" y="133" width="9.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1138.35" y="143.5" ></text>
</g>
<g >
<title>operator delete   (146 samples, 7.43%)</title><rect x="763.6" y="165" width="87.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="766.64" y="175.5" >operator d..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (3 samples, 0.15%)</title><rect x="245.4" y="181" width="1.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="248.40" y="191.5" ></text>
</g>
<g >
<title>operator delete   (3 samples, 0.15%)</title><rect x="245.4" y="165" width="1.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="248.40" y="175.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (2 samples, 0.10%)</title><rect x="1078.3" y="277" width="1.2" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1081.31" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (3 samples, 0.15%)</title><rect x="1169.0" y="309" width="1.8" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1171.98" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (3 samples, 0.15%)</title><rect x="1184.6" y="293" width="1.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1187.60" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (14 samples, 0.71%)</title><rect x="1113.7" y="165" width="8.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1116.74" y="175.5" ></text>
</g>
<g >
<title>malloc   (1 samples, 0.05%)</title><rect x="1068.7" y="165" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1071.70" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (2 samples, 0.10%)</title><rect x="1180.4" y="197" width="1.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1183.39" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (2 samples, 0.10%)</title><rect x="1172.6" y="293" width="1.2" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1175.59" y="303.5" ></text>
</g>
<g >
<title>malloc   (107 samples, 5.45%)</title><rect x="627.9" y="69" width="64.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="630.92" y="79.5" >malloc  </text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (50 samples, 2.54%)</title><rect x="700.0" y="149" width="30.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="702.98" y="159.5" >st..</text>
</g>
<g >
<title>operator delete(void*, unsigned long)@plt   (1 samples, 0.05%)</title><rect x="992.4" y="133" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="995.43" y="143.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (20 samples, 1.02%)</title><rect x="1098.7" y="149" width="12.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1101.72" y="159.5" ></text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (4 samples, 0.20%)</title><rect x="496.4" y="229" width="2.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="499.41" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (4 samples, 0.20%)</title><rect x="1176.8" y="245" width="2.4" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1179.79" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (4 samples, 0.20%)</title><rect x="1173.8" y="309" width="2.4" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1176.79" y="319.5" ></text>
</g>
<g >
<title>operator delete   (21 samples, 1.07%)</title><rect x="85.7" y="165" width="12.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="88.66" y="175.5" ></text>
</g>
<g >
<title>operator new   (4 samples, 0.20%)</title><rect x="1049.5" y="181" width="2.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1052.48" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (137 samples, 6.97%)</title><rect x="518.6" y="197" width="82.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="521.63" y="207.5" >std::_Rb_..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (35 samples, 1.78%)</title><rect x="1145.0" y="261" width="21.0" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1147.96" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance   (29 samples, 1.48%)</title><rect x="479.0" y="245" width="17.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="482.00" y="255.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~set   (464 samples, 23.61%)</title><rect x="743.2" y="293" width="278.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="746.22" y="303.5" >std::set&lt;std::pair&lt;int, int&gt;, std::le..</text>
</g>
<g >
<title>??   (3 samples, 0.15%)</title><rect x="1184.6" y="181" width="1.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1187.60" y="191.5" ></text>
</g>
<g >
<title>roundf64   (5 samples, 0.25%)</title><rect x="223.8" y="277" width="3.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="226.78" y="287.5" ></text>
</g>
<g >
<title>is_close_int   (3 samples, 0.15%)</title><rect x="1170.8" y="309" width="1.8" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1173.78" y="319.5" ></text>
</g>
<g >
<title>operator new   (57 samples, 2.90%)</title><rect x="444.2" y="149" width="34.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="447.17" y="159.5" >op..</text>
</g>
<g >
<title>operator new   (1 samples, 0.05%)</title><rect x="1175.0" y="181" width="0.6" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1177.99" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (14 samples, 0.71%)</title><rect x="1113.7" y="181" width="8.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1116.74" y="191.5" ></text>
</g>
<g >
<title>operator delete   (6 samples, 0.31%)</title><rect x="1161.2" y="149" width="3.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1164.18" y="159.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (3 samples, 0.15%)</title><rect x="1167.2" y="277" width="1.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1170.18" y="287.5" ></text>
</g>
<g >
<title>operator new(unsigned long)@plt   (4 samples, 0.20%)</title><rect x="692.2" y="85" width="2.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="695.18" y="95.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (22 samples, 1.12%)</title><rect x="1148.0" y="229" width="13.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1150.96" y="239.5" ></text>
</g>
<g >
<title>all (1,965 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (28 samples, 1.42%)</title><rect x="228.6" y="181" width="16.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="231.59" y="191.5" ></text>
</g>
<g >
<title>is_close_int   (7 samples, 0.36%)</title><rect x="1062.7" y="293" width="4.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1065.69" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy   (9 samples, 0.46%)</title><rect x="1176.2" y="293" width="5.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1179.19" y="303.5" ></text>
</g>
<g >
<title>malloc   (1 samples, 0.05%)</title><rect x="1175.0" y="165" width="0.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1177.99" y="175.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (4 samples, 0.20%)</title><rect x="1049.5" y="197" width="2.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1052.48" y="207.5" ></text>
</g>
<g >
<title>operator new   (33 samples, 1.68%)</title><rect x="65.8" y="165" width="19.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="68.85" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (2 samples, 0.10%)</title><rect x="1180.4" y="213" width="1.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1183.39" y="223.5" ></text>
</g>
<g >
<title>??   (2 samples, 0.10%)</title><rect x="1051.9" y="133" width="1.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1054.88" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (2 samples, 0.10%)</title><rect x="1078.3" y="245" width="1.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1081.31" y="255.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::operator&lt;&lt;   (2 samples, 0.10%)</title><rect x="1188.8" y="389" width="1.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1191.80" y="399.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (33 samples, 1.68%)</title><rect x="1002.0" y="245" width="19.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1005.04" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance   (4 samples, 0.20%)</title><rect x="1092.7" y="261" width="2.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1095.72" y="271.5" ></text>
</g>
<g >
<title>operator new(unsigned long)@plt   (2 samples, 0.10%)</title><rect x="728.8" y="69" width="1.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="731.81" y="79.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (58 samples, 2.95%)</title><rect x="958.2" y="181" width="34.8" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="961.20" y="191.5" >st..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (1 samples, 0.05%)</title><rect x="1187.0" y="277" width="0.6" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1190.00" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (26 samples, 1.32%)</title><rect x="1129.3" y="261" width="15.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1132.35" y="271.5" ></text>
</g>
<g >
<title>operator new(unsigned long)@plt   (1 samples, 0.05%)</title><rect x="1121.5" y="101" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1124.54" y="111.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (2 samples, 0.10%)</title><rect x="1051.9" y="213" width="1.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1054.88" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (2 samples, 0.10%)</title><rect x="1172.6" y="277" width="1.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1175.59" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (20 samples, 1.02%)</title><rect x="1098.7" y="181" width="12.0" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1101.72" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (2 samples, 0.10%)</title><rect x="1122.7" y="149" width="1.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1125.74" y="159.5" ></text>
</g>
<g >
<title>operator delete   (157 samples, 7.99%)</title><rect x="860.9" y="149" width="94.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="863.92" y="159.5" >operator de..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_minimum   (9 samples, 0.46%)</title><rect x="737.2" y="229" width="5.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="740.22" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node_base::_S_minimum   (3 samples, 0.15%)</title><rect x="1123.9" y="229" width="1.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1126.94" y="239.5" ></text>
</g>
<g >
<title>choose_next_point   (1,963 samples, 99.90%)</title><rect x="10.0" y="373" width="1178.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >choose_next_point  </text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (60 samples, 3.05%)</title><rect x="443.0" y="181" width="36.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="445.97" y="191.5" >std..</text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (9 samples, 0.46%)</title><rect x="1072.9" y="229" width="5.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1075.90" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_allocate   (3 samples, 0.15%)</title><rect x="1169.0" y="261" width="1.8" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1171.98" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (4 samples, 0.20%)</title><rect x="1176.8" y="197" width="2.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1179.79" y="207.5" ></text>
</g>
<g >
<title>operator delete   (155 samples, 7.89%)</title><rect x="862.1" y="133" width="93.1" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="865.12" y="143.5" >operator de..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_allocate   (28 samples, 1.42%)</title><rect x="228.6" y="229" width="16.8" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="231.59" y="239.5" ></text>
</g>
<g >
<title>malloc   (2 samples, 0.10%)</title><rect x="1122.7" y="69" width="1.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1125.74" y="79.5" ></text>
</g>
<g >
<title>operator new   (2 samples, 0.10%)</title><rect x="1180.4" y="117" width="1.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1183.39" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (3 samples, 0.15%)</title><rect x="1122.1" y="213" width="1.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1125.14" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node_base::_S_minimum   (9 samples, 0.46%)</title><rect x="737.2" y="213" width="5.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="740.22" y="223.5" ></text>
</g>
<g >
<title>malloc   (2 samples, 0.10%)</title><rect x="1180.4" y="101" width="1.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1183.39" y="111.5" ></text>
</g>
<g >
<title>malloc   (3 samples, 0.15%)</title><rect x="1169.0" y="181" width="1.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1171.98" y="191.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (147 samples, 7.48%)</title><rect x="763.6" y="197" width="88.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="766.64" y="207.5" >std::alloc..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (26 samples, 1.32%)</title><rect x="1129.3" y="197" width="15.7" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1132.35" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (50 samples, 2.54%)</title><rect x="700.0" y="165" width="30.0" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="702.98" y="175.5" >st..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Vector_base   (4 samples, 0.20%)</title><rect x="250.2" y="261" width="2.4" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="253.20" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~vector   (3 samples, 0.15%)</title><rect x="1167.2" y="309" width="1.8" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1170.18" y="319.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (2 samples, 0.10%)</title><rect x="1051.9" y="197" width="1.2" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1054.88" y="207.5" ></text>
</g>
<g >
<title>std::fmod&lt;double, int&gt;   (2 samples, 0.10%)</title><rect x="1171.4" y="293" width="1.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1174.38" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Vector_base   (3 samples, 0.15%)</title><rect x="1184.6" y="309" width="1.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1187.60" y="319.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (4 samples, 0.20%)</title><rect x="730.6" y="85" width="2.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="733.61" y="95.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (157 samples, 7.99%)</title><rect x="860.9" y="181" width="94.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="863.92" y="191.5" >std::alloca..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Rb_tree   (407 samples, 20.71%)</title><rect x="498.8" y="277" width="244.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="501.81" y="287.5" >std::_Rb_tree&lt;std::pair&lt;int, int..</text>
</g>
<g >
<title>malloc   (52 samples, 2.65%)</title><rect x="447.2" y="133" width="31.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="450.17" y="143.5" >ma..</text>
</g>
<g >
<title>get_inbetween_points   (249 samples, 12.67%)</title><rect x="103.1" y="293" width="149.5" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="106.08" y="303.5" >get_inbetween_point..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (22 samples, 1.12%)</title><rect x="1110.7" y="229" width="13.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1113.73" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Vector_impl_data::_Vector_impl_data   (4 samples, 0.20%)</title><rect x="250.2" y="229" width="2.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="253.20" y="239.5" ></text>
</g>
<g >
<title>std::endl&lt;char, std::char_traits&lt;char&gt; &gt;   (2 samples, 0.10%)</title><rect x="1188.8" y="373" width="1.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1191.80" y="383.5" ></text>
</g>
<g >
<title>??   (2 samples, 0.10%)</title><rect x="246.0" y="117" width="1.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="249.00" y="127.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (1 samples, 0.05%)</title><rect x="1175.0" y="213" width="0.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1177.99" y="223.5" ></text>
</g>
<g >
<title>operator delete   (6 samples, 0.31%)</title><rect x="1161.2" y="133" width="3.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1164.18" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (22 samples, 1.12%)</title><rect x="1148.0" y="245" width="13.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1150.96" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_lower_bound   (180 samples, 9.16%)</title><rect x="256.2" y="261" width="108.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="259.21" y="271.5" >std::_Rb_tree..</text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (2 samples, 0.10%)</title><rect x="1180.4" y="149" width="1.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1183.39" y="159.5" ></text>
</g>
<g >
<title>??   (31 samples, 1.58%)</title><rect x="973.8" y="85" width="18.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="976.82" y="95.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_insert_unique_pos   (11 samples, 0.56%)</title><rect x="1080.1" y="277" width="6.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1083.11" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (1 samples, 0.05%)</title><rect x="1187.6" y="293" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1190.60" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (10 samples, 0.51%)</title><rect x="402.1" y="245" width="6.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="405.13" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (1 samples, 0.05%)</title><rect x="1175.0" y="245" width="0.6" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1177.99" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (4 samples, 0.20%)</title><rect x="993.0" y="181" width="2.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="996.03" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (4 samples, 0.20%)</title><rect x="1176.8" y="181" width="2.4" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1179.79" y="191.5" ></text>
</g>
<g >
<title>free   (2 samples, 0.10%)</title><rect x="1051.9" y="149" width="1.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1054.88" y="159.5" ></text>
</g>
<g >
<title>operator delete   (3 samples, 0.15%)</title><rect x="1184.6" y="229" width="1.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1187.60" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (386 samples, 19.64%)</title><rect x="501.2" y="229" width="231.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="504.22" y="239.5" >std::_Rb_tree&lt;std::pair&lt;int, i..</text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;int, int&gt; &gt;::operator--   (3 samples, 0.15%)</title><rect x="408.1" y="245" width="1.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="411.14" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (137 samples, 6.97%)</title><rect x="518.6" y="149" width="82.3" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="521.63" y="159.5" >std::allo..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (157 samples, 7.99%)</title><rect x="860.9" y="229" width="94.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="863.92" y="239.5" >std::_Rb_tr..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (1 samples, 0.05%)</title><rect x="1184.0" y="277" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1186.99" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (50 samples, 2.54%)</title><rect x="1095.7" y="261" width="30.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1098.72" y="271.5" >st..</text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~set   (69 samples, 3.51%)</title><rect x="1125.7" y="309" width="41.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1128.75" y="319.5" >std..</text>
</g>
<g >
<title>operator delete   (20 samples, 1.02%)</title><rect x="86.3" y="149" width="12.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="89.26" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (4 samples, 0.20%)</title><rect x="1181.6" y="277" width="2.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1184.59" y="287.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::set   (407 samples, 20.71%)</title><rect x="498.8" y="293" width="244.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="501.81" y="303.5" >std::set&lt;std::pair&lt;int, int&gt;, st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (3 samples, 0.15%)</title><rect x="1184.6" y="277" width="1.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1187.60" y="287.5" ></text>
</g>
<g >
<title>operator delete   (3 samples, 0.15%)</title><rect x="1181.6" y="181" width="1.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1184.59" y="191.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (147 samples, 7.48%)</title><rect x="763.6" y="181" width="88.3" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="766.64" y="191.5" >std::__new..</text>
</g>
<g >
<title>malloc   (7 samples, 0.36%)</title><rect x="1088.5" y="149" width="4.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1091.51" y="159.5" ></text>
</g>
<g >
<title>malloc   (11 samples, 0.56%)</title><rect x="1114.9" y="85" width="6.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1117.94" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (39 samples, 1.98%)</title><rect x="226.8" y="245" width="23.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="229.78" y="255.5" >s..</text>
</g>
<g >
<title>std::local_Rb_tree_rotate_left   (1 samples, 0.05%)</title><rect x="1094.5" y="245" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1097.52" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_allocate   (4 samples, 0.20%)</title><rect x="1049.5" y="245" width="2.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1052.48" y="255.5" ></text>
</g>
<g >
<title>??   (2 samples, 0.10%)</title><rect x="1182.2" y="149" width="1.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1185.19" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_maximum   (7 samples, 0.36%)</title><rect x="733.0" y="229" width="4.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="736.01" y="239.5" ></text>
</g>
<g >
<title>fflush   (2 samples, 0.10%)</title><rect x="1188.8" y="309" width="1.2" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1191.80" y="319.5" ></text>
</g>
<g >
<title>operator delete   (26 samples, 1.32%)</title><rect x="1129.3" y="181" width="15.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1132.35" y="191.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (58 samples, 2.95%)</title><rect x="958.2" y="165" width="34.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="961.20" y="175.5" >st..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Rb_tree   (464 samples, 23.61%)</title><rect x="743.2" y="277" width="278.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="746.22" y="287.5" >std::_Rb_tree&lt;std::pair&lt;int, int&gt;, st..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (403 samples, 20.51%)</title><rect x="500.6" y="245" width="242.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="503.62" y="255.5" >std::_Rb_tree&lt;std::pair&lt;int, int..</text>
</g>
<g >
<title>operator new   (47 samples, 2.39%)</title><rect x="700.6" y="69" width="28.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="703.59" y="79.5" >o..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt; const&amp;&gt;   (1 samples, 0.05%)</title><rect x="621.3" y="133" width="0.6" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="624.32" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (7 samples, 0.36%)</title><rect x="1161.2" y="213" width="4.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1164.18" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy   (403 samples, 20.51%)</title><rect x="500.6" y="261" width="242.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="503.62" y="271.5" >std::_Rb_tree&lt;std::pair&lt;int, int..</text>
</g>
<g >
<title>free   (53 samples, 2.70%)</title><rect x="960.6" y="101" width="31.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="963.61" y="111.5" >fr..</text>
</g>
<g >
<title>operator new   (27 samples, 1.37%)</title><rect x="229.2" y="165" width="16.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="232.19" y="175.5" ></text>
</g>
<g >
<title>std::flush&lt;char, std::char_traits&lt;char&gt; &gt;   (2 samples, 0.10%)</title><rect x="1188.8" y="357" width="1.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1191.80" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (26 samples, 1.32%)</title><rect x="1129.3" y="229" width="15.7" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1132.35" y="239.5" ></text>
</g>
<g >
<title>operator delete(void*, unsigned long)@plt   (1 samples, 0.05%)</title><rect x="1164.8" y="149" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1167.78" y="159.5" ></text>
</g>
<g >
<title>??   (12 samples, 0.61%)</title><rect x="685.0" y="53" width="7.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="687.97" y="63.5" ></text>
</g>
<g >
<title>free   (4 samples, 0.20%)</title><rect x="993.0" y="85" width="2.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="996.03" y="95.5" ></text>
</g>
<g >
<title>operator delete(void*, unsigned long)@plt   (1 samples, 0.05%)</title><rect x="1183.4" y="197" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1186.39" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (2 samples, 0.10%)</title><rect x="1172.6" y="309" width="1.2" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1175.59" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (20 samples, 1.02%)</title><rect x="1098.7" y="213" width="12.0" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1101.72" y="223.5" ></text>
</g>
<g >
<title>free   (6 samples, 0.31%)</title><rect x="1161.2" y="117" width="3.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1164.18" y="127.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (7 samples, 0.36%)</title><rect x="1161.2" y="165" width="4.2" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1164.18" y="175.5" ></text>
</g>
<g >
<title>operator delete   (39 samples, 1.98%)</title><rect x="1024.3" y="197" width="23.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1027.26" y="207.5" >o..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (130 samples, 6.62%)</title><rect x="616.5" y="197" width="78.1" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="619.51" y="207.5" >std::_Rb_..</text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (102 samples, 5.19%)</title><rect x="303.0" y="213" width="61.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="306.05" y="223.5" >std::_..</text>
</g>
<g >
<title>operator new(unsigned long)@plt   (2 samples, 0.10%)</title><rect x="599.7" y="101" width="1.2" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="602.70" y="111.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (137 samples, 6.97%)</title><rect x="518.6" y="117" width="82.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="521.63" y="127.5" >std::__ne..</text>
</g>
<g >
<title>operator delete   (55 samples, 2.80%)</title><rect x="959.4" y="117" width="33.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="962.40" y="127.5" >op..</text>
</g>
<g >
<title>write   (2 samples, 0.10%)</title><rect x="1188.8" y="229" width="1.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1191.80" y="239.5" ></text>
</g>
<g >
<title>malloc   (30 samples, 1.53%)</title><rect x="67.6" y="149" width="18.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="70.65" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (4 samples, 0.20%)</title><rect x="730.6" y="133" width="2.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="733.61" y="143.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;int, int&gt; const&amp;, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (2 samples, 0.10%)</title><rect x="1175.0" y="293" width="1.2" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1177.99" y="303.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (3 samples, 0.15%)</title><rect x="245.4" y="197" width="1.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="248.40" y="207.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (50 samples, 2.54%)</title><rect x="700.0" y="101" width="30.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="702.98" y="111.5" >st..</text>
</g>
<g >
<title>operator delete   (3 samples, 0.15%)</title><rect x="245.4" y="149" width="1.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="248.40" y="159.5" ></text>
</g>
<g >
<title>operator delete   (3 samples, 0.15%)</title><rect x="1181.6" y="197" width="1.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1184.59" y="207.5" ></text>
</g>
<g >
<title>malloc   (27 samples, 1.37%)</title><rect x="229.2" y="149" width="16.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="232.19" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (67 samples, 3.41%)</title><rect x="955.2" y="229" width="40.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="958.20" y="239.5" >std..</text>
</g>
<g >
<title>operator delete   (57 samples, 2.90%)</title><rect x="958.2" y="133" width="34.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="961.20" y="143.5" >op..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_insert_unique_pos   (85 samples, 4.33%)</title><rect x="382.9" y="261" width="51.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="385.92" y="271.5" >std::..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (50 samples, 2.54%)</title><rect x="700.0" y="85" width="30.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="702.98" y="95.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (2 samples, 0.10%)</title><rect x="1122.7" y="133" width="1.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1125.74" y="143.5" ></text>
</g>
<g >
<title>??   (4 samples, 0.20%)</title><rect x="1162.4" y="101" width="2.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1165.38" y="111.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (1 samples, 0.05%)</title><rect x="1175.0" y="197" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1177.99" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (4 samples, 0.20%)</title><rect x="993.0" y="197" width="2.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="996.03" y="207.5" ></text>
</g>
<g >
<title>operator delete(void*, unsigned long)@plt   (1 samples, 0.05%)</title><rect x="851.3" y="165" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="854.31" y="175.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (58 samples, 2.95%)</title><rect x="958.2" y="149" width="34.8" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="961.20" y="159.5" >st..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (60 samples, 3.05%)</title><rect x="443.0" y="213" width="36.0" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="445.97" y="223.5" >std..</text>
</g>
<g >
<title>malloc   (4 samples, 0.20%)</title><rect x="1176.8" y="117" width="2.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1179.79" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance   (1 samples, 0.05%)</title><rect x="1175.6" y="277" width="0.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1178.59" y="287.5" ></text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (1 samples, 0.05%)</title><rect x="1174.4" y="261" width="0.6" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1177.39" y="271.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (22 samples, 1.12%)</title><rect x="1148.0" y="197" width="13.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1150.96" y="207.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (3 samples, 0.15%)</title><rect x="1169.0" y="229" width="1.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1171.98" y="239.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (35 samples, 1.78%)</title><rect x="64.6" y="197" width="21.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="67.65" y="207.5" ></text>
</g>
<g >
<title>operator new   (20 samples, 1.02%)</title><rect x="1098.7" y="117" width="12.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1101.72" y="127.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (11 samples, 0.56%)</title><rect x="995.4" y="229" width="6.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="998.44" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (1 samples, 0.05%)</title><rect x="1187.0" y="293" width="0.6" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1190.00" y="303.5" ></text>
</g>
<g >
<title>??   (10 samples, 0.51%)</title><rect x="92.3" y="117" width="6.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="95.27" y="127.5" ></text>
</g>
<g >
<title>gen_all_points   (9 samples, 0.46%)</title><rect x="1048.3" y="309" width="5.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1051.28" y="319.5" ></text>
</g>
<g >
<title>??   (101 samples, 5.14%)</title><rect x="894.5" y="101" width="60.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="897.55" y="111.5" >??  </text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (20 samples, 1.02%)</title><rect x="1098.7" y="197" width="12.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1101.72" y="207.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (7 samples, 0.36%)</title><rect x="1161.2" y="181" width="4.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1164.18" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::find   (17 samples, 0.87%)</title><rect x="1069.3" y="293" width="10.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1072.30" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Rb_tree   (5 samples, 0.25%)</title><rect x="1181.6" y="309" width="3.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1184.59" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (15 samples, 0.76%)</title><rect x="1113.1" y="213" width="9.0" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1116.13" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (1 samples, 0.05%)</title><rect x="1187.0" y="245" width="0.6" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1190.00" y="255.5" ></text>
</g>
<g >
<title>operator new   (128 samples, 6.51%)</title><rect x="522.8" y="101" width="76.9" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="525.83" y="111.5" >operator..</text>
</g>
<g >
<title>free   (1 samples, 0.05%)</title><rect x="1187.0" y="165" width="0.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1190.00" y="175.5" ></text>
</g>
<g >
<title>??   (88 samples, 4.48%)</title><rect x="798.5" y="117" width="52.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="801.47" y="127.5" >??  </text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~_Rb_tree   (69 samples, 3.51%)</title><rect x="1125.7" y="293" width="41.5" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1128.75" y="303.5" >std..</text>
</g>
<g >
<title>std::local_Rb_tree_decrement   (1 samples, 0.05%)</title><rect x="409.3" y="197" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="412.34" y="207.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (22 samples, 1.12%)</title><rect x="1148.0" y="181" width="13.2" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1150.96" y="191.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (4 samples, 0.20%)</title><rect x="1176.8" y="165" width="2.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1179.79" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (4 samples, 0.20%)</title><rect x="1181.6" y="261" width="2.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1184.59" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (1 samples, 0.05%)</title><rect x="1172.6" y="245" width="0.6" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1175.59" y="255.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (4 samples, 0.20%)</title><rect x="1176.8" y="149" width="2.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1179.79" y="159.5" ></text>
</g>
<g >
<title>round@plt   (1 samples, 0.05%)</title><rect x="1066.9" y="293" width="0.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1069.90" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (28 samples, 1.42%)</title><rect x="228.6" y="213" width="16.8" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="231.59" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (3 samples, 0.15%)</title><rect x="1067.5" y="277" width="1.8" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1070.50" y="287.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~set   (2 samples, 0.10%)</title><rect x="1187.0" y="341" width="1.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1190.00" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Rb_tree_impl&lt;std::less&lt;std::pair&lt;int, int&gt; &gt;, true&gt;::_Rb_tree_impl   (1 samples, 0.05%)</title><rect x="742.6" y="261" width="0.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="745.62" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (4 samples, 0.20%)</title><rect x="730.6" y="149" width="2.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="733.61" y="159.5" ></text>
</g>
<g >
<title>std::fmod&lt;double, int&gt;   (7 samples, 0.36%)</title><rect x="1062.7" y="277" width="4.2" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1065.69" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (2 samples, 0.10%)</title><rect x="1122.7" y="165" width="1.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1125.74" y="175.5" ></text>
</g>
<g >
<title>operator new   (2 samples, 0.10%)</title><rect x="1068.1" y="181" width="1.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1071.10" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (27 samples, 1.37%)</title><rect x="1079.5" y="293" width="16.2" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1082.51" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Vector_impl::_Vector_impl   (4 samples, 0.20%)</title><rect x="250.2" y="245" width="2.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="253.20" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (4 samples, 0.20%)</title><rect x="1176.8" y="229" width="2.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1179.79" y="239.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (3 samples, 0.15%)</title><rect x="1084.9" y="261" width="1.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1087.91" y="271.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (23 samples, 1.17%)</title><rect x="364.3" y="261" width="13.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="367.30" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (9 samples, 0.46%)</title><rect x="1176.2" y="261" width="5.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1179.19" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (147 samples, 7.48%)</title><rect x="763.6" y="245" width="88.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="766.64" y="255.5" >std::_Rb_t..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (3 samples, 0.15%)</title><rect x="1067.5" y="293" width="1.8" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1070.50" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Rb_tree   (9 samples, 0.46%)</title><rect x="1176.2" y="309" width="5.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1179.19" y="319.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::set   (50 samples, 2.54%)</title><rect x="1095.7" y="309" width="30.0" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1098.72" y="319.5" >st..</text>
</g>
<g >
<title>choose_next_point   (30 samples, 1.53%)</title><rect x="31.6" y="293" width="18.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="34.62" y="303.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (102 samples, 5.19%)</title><rect x="303.0" y="245" width="61.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="306.05" y="255.5" >std::l..</text>
</g>
<g >
<title>operator delete(void*, unsigned long)@plt   (2 samples, 0.10%)</title><rect x="98.3" y="165" width="1.2" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="101.27" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_allocate   (35 samples, 1.78%)</title><rect x="64.6" y="229" width="21.1" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="67.65" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_allocate   (1 samples, 0.05%)</title><rect x="1172.6" y="261" width="0.6" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1175.59" y="271.5" ></text>
</g>
<g >
<title>free   (148 samples, 7.53%)</title><rect x="866.3" y="117" width="88.9" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="869.33" y="127.5" >free  </text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (1 samples, 0.05%)</title><rect x="1175.0" y="229" width="0.6" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1177.99" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (2 samples, 0.10%)</title><rect x="1051.9" y="229" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1054.88" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (462 samples, 23.51%)</title><rect x="744.4" y="261" width="277.5" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="747.42" y="271.5" >std::_Rb_tree&lt;std::pair&lt;int, int&gt;, st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (4 samples, 0.20%)</title><rect x="730.6" y="101" width="2.4" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="733.61" y="111.5" ></text>
</g>
<g >
<title>get_inbetween_points   (26 samples, 1.32%)</title><rect x="1053.7" y="309" width="15.6" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1056.68" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (14 samples, 0.71%)</title><rect x="1113.7" y="197" width="8.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1116.74" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_relocate   (3 samples, 0.15%)</title><rect x="101.3" y="229" width="1.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="104.28" y="239.5" ></text>
</g>
<g >
<title>malloc   (4 samples, 0.20%)</title><rect x="1049.5" y="165" width="2.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1052.48" y="175.5" ></text>
</g>
<g >
<title>malloc   (18 samples, 0.92%)</title><rect x="1099.9" y="101" width="10.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1102.92" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (8 samples, 0.41%)</title><rect x="1048.9" y="293" width="4.8" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1051.88" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (2 samples, 0.10%)</title><rect x="1122.7" y="197" width="1.2" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1125.74" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (60 samples, 3.05%)</title><rect x="443.0" y="197" width="36.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="445.97" y="207.5" >std..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (50 samples, 2.54%)</title><rect x="700.0" y="117" width="30.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="702.98" y="127.5" >st..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (147 samples, 7.48%)</title><rect x="763.6" y="213" width="88.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="766.64" y="223.5" >std::alloc..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (7 samples, 0.36%)</title><rect x="1049.5" y="261" width="4.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1052.48" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (4 samples, 0.20%)</title><rect x="1049.5" y="229" width="2.4" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1052.48" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (4 samples, 0.20%)</title><rect x="496.4" y="213" width="2.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="499.41" y="223.5" ></text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (40 samples, 2.04%)</title><rect x="409.9" y="229" width="24.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="412.94" y="239.5" >s..</text>
</g>
<g >
<title>operator delete   (1 samples, 0.05%)</title><rect x="1187.0" y="197" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1190.00" y="207.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (3 samples, 0.15%)</title><rect x="1184.6" y="245" width="1.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1187.60" y="255.5" ></text>
</g>
<g >
<title>free   (3 samples, 0.15%)</title><rect x="1181.6" y="165" width="1.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1184.59" y="175.5" ></text>
</g>
<g >
<title>_IO_do_write   (2 samples, 0.10%)</title><rect x="1188.8" y="277" width="1.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1191.80" y="287.5" ></text>
</g>
<g >
<title>choose_next_point   (1,930 samples, 98.22%)</title><rect x="10.0" y="325" width="1159.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >choose_next_point  </text>
</g>
<g >
<title>operator new   (4 samples, 0.20%)</title><rect x="1176.8" y="133" width="2.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1179.79" y="143.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.05%)</title><rect x="1187.0" y="149" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1190.00" y="159.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (14 samples, 0.71%)</title><rect x="1113.7" y="117" width="8.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1116.74" y="127.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (121 samples, 6.16%)</title><rect x="621.9" y="117" width="72.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="624.92" y="127.5" >std::all..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (4 samples, 0.20%)</title><rect x="993.0" y="213" width="2.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="996.03" y="223.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::set   (9 samples, 0.46%)</title><rect x="1176.2" y="325" width="5.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1179.19" y="335.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (3 samples, 0.15%)</title><rect x="1169.0" y="213" width="1.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1171.98" y="223.5" ></text>
</g>
<g >
<title>free   (3 samples, 0.15%)</title><rect x="245.4" y="133" width="1.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="248.40" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (3 samples, 0.15%)</title><rect x="1167.2" y="261" width="1.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1170.18" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_insert_unique_pos   (2 samples, 0.10%)</title><rect x="1173.8" y="293" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1176.79" y="303.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (26 samples, 1.32%)</title><rect x="1129.3" y="213" width="15.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1132.35" y="223.5" ></text>
</g>
<g >
<title>operator new   (2 samples, 0.10%)</title><rect x="1122.7" y="85" width="1.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1125.74" y="95.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (14 samples, 0.71%)</title><rect x="1113.7" y="133" width="8.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1116.74" y="143.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::flush   (2 samples, 0.10%)</title><rect x="1188.8" y="341" width="1.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1191.80" y="351.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (201 samples, 10.23%)</title><rect x="378.1" y="277" width="120.7" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="381.11" y="287.5" >std::_Rb_tree&lt;s..</text>
</g>
<g >
<title>operator new   (13 samples, 0.66%)</title><rect x="1113.7" y="101" width="7.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1116.74" y="111.5" ></text>
</g>
<g >
<title>_IO_file_write   (2 samples, 0.10%)</title><rect x="1188.8" y="245" width="1.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1191.80" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;)@plt   (1 samples, 0.05%)</title><rect x="1095.1" y="261" width="0.6" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1098.12" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (1 samples, 0.05%)</title><rect x="1174.4" y="245" width="0.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1177.39" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (26 samples, 1.32%)</title><rect x="1129.3" y="245" width="15.7" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1132.35" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (50 samples, 2.54%)</title><rect x="700.0" y="133" width="30.0" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="702.98" y="143.5" >st..</text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (9 samples, 0.46%)</title><rect x="1072.9" y="261" width="5.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1075.90" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (60 samples, 3.05%)</title><rect x="443.0" y="245" width="36.0" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="445.97" y="255.5" >std..</text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::insert   (4 samples, 0.20%)</title><rect x="1173.8" y="325" width="2.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1176.79" y="335.5" ></text>
</g>
<g >
<title>std::abs   (1 samples, 0.05%)</title><rect x="1170.8" y="293" width="0.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1173.78" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (40 samples, 2.04%)</title><rect x="409.9" y="213" width="24.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="412.94" y="223.5" >s..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (3 samples, 0.15%)</title><rect x="1067.5" y="261" width="1.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1070.50" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Synth3way::operator()&lt;int, int&gt;   (3 samples, 0.15%)</title><rect x="1084.9" y="229" width="1.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1087.91" y="239.5" ></text>
</g>
<g >
<title>gen_all_points   (3 samples, 0.15%)</title><rect x="1169.0" y="325" width="1.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1171.98" y="335.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (4 samples, 0.20%)</title><rect x="730.6" y="69" width="2.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="733.61" y="79.5" ></text>
</g>
<g >
<title>operator new(unsigned long)@plt   (1 samples, 0.05%)</title><rect x="478.4" y="149" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="481.40" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (1 samples, 0.05%)</title><rect x="1175.0" y="261" width="0.6" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1177.99" y="271.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (2 samples, 0.10%)</title><rect x="1122.7" y="117" width="1.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1125.74" y="127.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (3 samples, 0.15%)</title><rect x="245.4" y="229" width="1.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="248.40" y="239.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (3 samples, 0.15%)</title><rect x="1167.2" y="245" width="1.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1170.18" y="255.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (2 samples, 0.10%)</title><rect x="1122.7" y="101" width="1.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1125.74" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (8 samples, 0.41%)</title><rect x="1048.9" y="277" width="4.8" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1051.88" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_erase   (2 samples, 0.10%)</title><rect x="1187.0" y="309" width="1.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1190.00" y="319.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (2 samples, 0.10%)</title><rect x="1068.1" y="197" width="1.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1071.10" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (1 samples, 0.05%)</title><rect x="1173.8" y="277" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1176.79" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (46 samples, 2.34%)</title><rect x="1096.3" y="245" width="27.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1099.32" y="255.5" >s..</text>
</g>
<g >
<title>std::local_Rb_tree_decrement   (3 samples, 0.15%)</title><rect x="408.1" y="213" width="1.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="411.14" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement   (3 samples, 0.15%)</title><rect x="408.1" y="229" width="1.8" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="411.14" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (2 samples, 0.10%)</title><rect x="1180.4" y="181" width="1.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1183.39" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (9 samples, 0.46%)</title><rect x="1176.2" y="277" width="5.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1179.19" y="287.5" ></text>
</g>
<g >
<title>free   (20 samples, 1.02%)</title><rect x="86.3" y="133" width="12.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="89.26" y="143.5" ></text>
</g>
<g >
<title>operator delete(void*, unsigned long)@plt   (1 samples, 0.05%)</title><rect x="1047.7" y="197" width="0.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1050.68" y="207.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.05%)</title><rect x="1110.1" y="85" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1113.13" y="95.5" ></text>
</g>
<g >
<title>_IO_file_sync   (2 samples, 0.10%)</title><rect x="1188.8" y="293" width="1.2" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1191.80" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_check_len   (3 samples, 0.15%)</title><rect x="99.5" y="229" width="1.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="102.48" y="239.5" ></text>
</g>
<g >
<title>??   (11 samples, 0.56%)</title><rect x="1154.6" y="117" width="6.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1157.57" y="127.5" ></text>
</g>
<g >
<title>operator new   (7 samples, 0.36%)</title><rect x="1088.5" y="165" width="4.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1091.51" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (4 samples, 0.20%)</title><rect x="1179.2" y="245" width="2.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1182.19" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (5 samples, 0.25%)</title><rect x="730.0" y="181" width="3.0" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="733.01" y="191.5" ></text>
</g>
<g >
<title>operator delete   (22 samples, 1.12%)</title><rect x="1148.0" y="165" width="13.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1150.96" y="175.5" ></text>
</g>
<g >
<title>operator delete   (3 samples, 0.15%)</title><rect x="1167.2" y="197" width="1.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1170.18" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (2 samples, 0.10%)</title><rect x="1180.4" y="229" width="1.2" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1183.39" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (137 samples, 6.97%)</title><rect x="518.6" y="165" width="82.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="521.63" y="175.5" >std::_Rb_..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_check_len   (1 samples, 0.05%)</title><rect x="1053.1" y="245" width="0.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1056.08" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (72 samples, 3.66%)</title><rect x="59.8" y="245" width="43.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="62.84" y="255.5" >std:..</text>
</g>
<g >
<title>free   (3 samples, 0.15%)</title><rect x="1167.2" y="181" width="1.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1170.18" y="191.5" ></text>
</g>
<g >
<title>std::fmod&lt;double, int&gt;   (1 samples, 0.05%)</title><rect x="1188.2" y="325" width="0.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1191.20" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (121 samples, 6.16%)</title><rect x="621.9" y="149" width="72.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="624.92" y="159.5" >std::_Rb..</text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;int, int&gt;*, std::pair&lt;int, int&gt;*, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;   (3 samples, 0.15%)</title><rect x="101.3" y="213" width="1.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="104.28" y="223.5" ></text>
</g>
<g >
<title>operator delete   (37 samples, 1.88%)</title><rect x="1025.5" y="181" width="22.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1028.46" y="191.5" >o..</text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;int, int&gt;*, std::pair&lt;int, int&gt;*, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;   (3 samples, 0.15%)</title><rect x="101.3" y="197" width="1.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="104.28" y="207.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (4 samples, 0.20%)</title><rect x="993.0" y="149" width="2.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="996.03" y="159.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (7 samples, 0.36%)</title><rect x="1088.5" y="181" width="4.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1091.51" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (4 samples, 0.20%)</title><rect x="730.6" y="117" width="2.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="733.61" y="127.5" ></text>
</g>
<g >
<title>??   (20 samples, 1.02%)</title><rect x="1035.7" y="149" width="12.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1038.67" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (84 samples, 4.27%)</title><rect x="52.6" y="261" width="50.5" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="55.64" y="271.5" >std::..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (39 samples, 1.98%)</title><rect x="226.8" y="277" width="23.4" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="229.78" y="287.5" >s..</text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (40 samples, 2.04%)</title><rect x="409.9" y="245" width="24.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="412.94" y="255.5" >s..</text>
</g>
<g >
<title>std::operator&lt;=&gt;&lt;int, int&gt;(std::pair&lt;int, int&gt; const&amp;, std::pair&lt;int, int&gt; const&amp;)   (9 samples, 0.46%)</title><rect x="1072.9" y="245" width="5.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1075.90" y="255.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (60 samples, 3.05%)</title><rect x="443.0" y="165" width="36.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="445.97" y="175.5" >std..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (157 samples, 7.99%)</title><rect x="860.9" y="165" width="94.3" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="863.92" y="175.5" >std::__new_..</text>
</g>
<g >
<title>round@plt   (4 samples, 0.20%)</title><rect x="221.4" y="277" width="2.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="224.38" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (3 samples, 0.15%)</title><rect x="1169.0" y="245" width="1.8" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="1171.98" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (14 samples, 0.71%)</title><rect x="1113.7" y="149" width="8.4" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1116.74" y="159.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (40 samples, 2.04%)</title><rect x="1024.3" y="229" width="24.0" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1027.26" y="239.5" >s..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (121 samples, 6.16%)</title><rect x="621.9" y="133" width="72.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="624.92" y="143.5" >std::all..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (23 samples, 1.17%)</title><rect x="85.7" y="181" width="13.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="88.66" y="191.5" ></text>
</g>
<g >
<title>choose_next_point   (1,962 samples, 99.85%)</title><rect x="10.0" y="357" width="1178.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >choose_next_point  </text>
</g>
<g >
<title>??   (4 samples, 0.20%)</title><rect x="993.0" y="69" width="2.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="996.03" y="79.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (35 samples, 1.78%)</title><rect x="64.6" y="181" width="21.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="67.65" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::push_back   (84 samples, 4.27%)</title><rect x="52.6" y="277" width="50.5" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="55.64" y="287.5" >std::..</text>
</g>
<g >
<title>operator delete   (2 samples, 0.10%)</title><rect x="1051.9" y="181" width="1.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1054.88" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::size   (3 samples, 0.15%)</title><rect x="47.8" y="261" width="1.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="50.83" y="271.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (137 samples, 6.97%)</title><rect x="518.6" y="133" width="82.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="521.63" y="143.5" >std::allo..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (2 samples, 0.10%)</title><rect x="1122.7" y="181" width="1.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1125.74" y="191.5" ></text>
</g>
<g >
<title>main   (1,965 samples, 100.00%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >main  </text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (1 samples, 0.05%)</title><rect x="1172.6" y="229" width="0.6" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1175.59" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree_header::_Rb_tree_header   (1 samples, 0.05%)</title><rect x="742.6" y="245" width="0.6" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="745.62" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::allocate   (20 samples, 1.02%)</title><rect x="1098.7" y="165" width="12.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1101.72" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (39 samples, 1.98%)</title><rect x="226.8" y="261" width="23.4" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="229.78" y="271.5" >s..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (4 samples, 0.20%)</title><rect x="993.0" y="133" width="2.4" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="996.03" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_check_len   (5 samples, 0.25%)</title><rect x="247.2" y="229" width="3.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="250.20" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (1 samples, 0.05%)</title><rect x="621.3" y="149" width="0.6" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="624.32" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (122 samples, 6.21%)</title><rect x="621.3" y="165" width="73.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="624.32" y="175.5" >std::_Rb..</text>
</g>
<g >
<title>choose_next_point   (1,959 samples, 99.69%)</title><rect x="10.0" y="341" width="1176.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >choose_next_point  </text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (137 samples, 6.97%)</title><rect x="518.6" y="181" width="82.3" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="521.63" y="191.5" >std::_Rb_..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt; &gt;::deallocate   (4 samples, 0.20%)</title><rect x="1181.6" y="245" width="2.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1184.59" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (23 samples, 1.17%)</title><rect x="85.7" y="213" width="13.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="88.66" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (122 samples, 6.21%)</title><rect x="621.3" y="181" width="73.3" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="624.32" y="191.5" >std::_Rb..</text>
</g>
<g >
<title>operator delete   (1 samples, 0.05%)</title><rect x="1187.0" y="181" width="0.6" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1190.00" y="191.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (4 samples, 0.20%)</title><rect x="1181.6" y="229" width="2.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1184.59" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::deallocate   (1 samples, 0.05%)</title><rect x="1187.0" y="213" width="0.6" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1190.00" y="223.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (4 samples, 0.20%)</title><rect x="1049.5" y="213" width="2.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1052.48" y="223.5" ></text>
</g>
<g >
<title>operator delete   (3 samples, 0.15%)</title><rect x="1167.2" y="213" width="1.8" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1170.18" y="223.5" ></text>
</g>
<g >
<title>free   (33 samples, 1.68%)</title><rect x="1027.9" y="165" width="19.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1030.86" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;int, int&gt; const&amp;, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (15 samples, 0.76%)</title><rect x="1086.7" y="277" width="9.0" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="1089.71" y="287.5" ></text>
</g>
<g >
<title>std::fmod&lt;double, int&gt;   (70 samples, 3.56%)</title><rect x="179.3" y="261" width="42.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="182.34" y="271.5" >std..</text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::contains   (209 samples, 10.64%)</title><rect x="252.6" y="293" width="125.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="255.61" y="303.5" >std::set&lt;std::p..</text>
</g>
<g >
<title>std::abs   (5 samples, 0.25%)</title><rect x="176.3" y="261" width="3.0" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="179.34" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node::operator()&lt;std::pair&lt;int, int&gt; const&amp;&gt;   (1 samples, 0.05%)</title><rect x="1175.0" y="277" width="0.6" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1177.99" y="287.5" ></text>
</g>
<g >
<title>operator delete   (4 samples, 0.20%)</title><rect x="993.0" y="117" width="2.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="996.03" y="127.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::allocate   (28 samples, 1.42%)</title><rect x="228.6" y="197" width="16.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="231.59" y="207.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (23 samples, 1.17%)</title><rect x="85.7" y="197" width="13.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="88.66" y="207.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, int&gt; &gt;::operator()   (1 samples, 0.05%)</title><rect x="1174.4" y="277" width="0.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1177.39" y="287.5" ></text>
</g>
<g >
<title>std::local_Rb_tree_rotate_left   (1 samples, 0.05%)</title><rect x="495.8" y="229" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="498.81" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (2 samples, 0.10%)</title><rect x="1166.0" y="261" width="1.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1168.98" y="271.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (3 samples, 0.15%)</title><rect x="1184.6" y="261" width="1.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1187.60" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;int, int&gt; &gt;   (3 samples, 0.15%)</title><rect x="1169.0" y="277" width="1.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1171.98" y="287.5" ></text>
</g>
<g >
<title>get_inbetween_points   (1 samples, 0.05%)</title><rect x="1188.2" y="357" width="0.6" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1191.20" y="367.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::insert   (201 samples, 10.23%)</title><rect x="378.1" y="293" width="120.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="381.11" y="303.5" >std::set&lt;std::p..</text>
</g>
<g >
<title>operator delete   (26 samples, 1.32%)</title><rect x="1129.3" y="165" width="15.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1132.35" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_minimum   (3 samples, 0.15%)</title><rect x="1123.9" y="245" width="1.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1126.94" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_copy&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (64 samples, 3.26%)</title><rect x="694.6" y="197" width="38.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="697.58" y="207.5" >std..</text>
</g>
<g >
<title>malloc   (115 samples, 5.85%)</title><rect x="530.6" y="85" width="69.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="533.64" y="95.5" >malloc  </text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, int&gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::insert   (27 samples, 1.37%)</title><rect x="1079.5" y="309" width="16.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1082.51" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::~vector   (44 samples, 2.24%)</title><rect x="1021.9" y="293" width="26.4" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1024.86" y="303.5" >s..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, int&gt; &gt; &gt;::allocate   (121 samples, 6.16%)</title><rect x="621.9" y="101" width="72.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="624.92" y="111.5" >std::__n..</text>
</g>
<g >
<title>free   (24 samples, 1.22%)</title><rect x="1130.5" y="149" width="14.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1133.55" y="159.5" ></text>
</g>
<g >
<title>malloc   (40 samples, 2.04%)</title><rect x="704.8" y="53" width="24.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="707.79" y="63.5" >m..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_drop_node   (58 samples, 2.95%)</title><rect x="958.2" y="213" width="34.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="961.20" y="223.5" >st..</text>
</g>
<g >
<title>??   (1 samples, 0.05%)</title><rect x="1168.4" y="165" width="0.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1171.38" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (23 samples, 1.17%)</title><rect x="85.7" y="229" width="13.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="88.66" y="239.5" ></text>
</g>
<g >
<title>operator delete   (2 samples, 0.10%)</title><rect x="1051.9" y="165" width="1.2" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1054.88" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (1 samples, 0.05%)</title><rect x="1084.3" y="261" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1087.31" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;int, int&gt; &gt;   (3 samples, 0.15%)</title><rect x="1169.0" y="293" width="1.8" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1171.98" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (42 samples, 2.14%)</title><rect x="1023.1" y="261" width="25.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1026.06" y="271.5" >s..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::pair&lt;int, int&gt; &gt;::deallocate   (40 samples, 2.04%)</title><rect x="1024.3" y="213" width="24.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1027.26" y="223.5" >s..</text>
</g>
<g >
<title>operator new   (3 samples, 0.15%)</title><rect x="1169.0" y="197" width="1.8" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1171.98" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_put_node   (157 samples, 7.99%)</title><rect x="860.9" y="213" width="94.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="863.92" y="223.5" >std::_Rb_tr..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_clone_node&lt;false, std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_Alloc_node&gt;   (21 samples, 1.07%)</title><rect x="1098.1" y="229" width="12.6" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1101.12" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_get_node   (7 samples, 0.36%)</title><rect x="1088.5" y="229" width="4.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1091.51" y="239.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::pubsync   (2 samples, 0.10%)</title><rect x="1188.8" y="325" width="1.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1191.80" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::size   (2 samples, 0.10%)</title><rect x="249.0" y="213" width="1.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="252.00" y="223.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, int&gt;, std::pair&lt;int, int&gt;, std::_Identity&lt;std::pair&lt;int, int&gt; &gt;, std::less&lt;std::pair&lt;int, int&gt; &gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_S_right   (1 samples, 0.05%)</title><rect x="1165.4" y="245" width="0.6" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1168.38" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;int, int&gt;, std::allocator&lt;std::pair&lt;int, int&gt; &gt; &gt;::_M_deallocate   (2 samples, 0.10%)</title><rect x="1051.9" y="245" width="1.2" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1054.88" y="255.5" ></text>
</g>
</g>
</svg>
