<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="502.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="485" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="485" > </text>
<g id="frames">
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1062.7" y="245" width="1.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1065.72" y="255.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#83   (3 samples, 0.24%)</title><rect x="1107.7" y="245" width="2.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1110.70" y="255.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.08%)</title><rect x="1160.3" y="261" width="1.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1163.33" y="271.5" ></text>
</g>
<g >
<title>std::f64::{impl#0   (3 samples, 0.24%)</title><rect x="315.3" y="149" width="2.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="318.29" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity&lt;(isize, isize)&gt;   (10 samples, 0.81%)</title><rect x="318.2" y="245" width="9.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="321.16" y="255.5" ></text>
</g>
<g >
<title>core::iter::adapters::map::{impl#2   (1 samples, 0.08%)</title><rect x="181.3" y="181" width="1.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="184.31" y="191.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains_key&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (428 samples, 34.71%)</title><rect x="435.9" y="293" width="409.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="438.87" y="303.5" >hashbrown::map::HashMap&lt;(isize, isize), (), std::collec..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;&gt;   (2 samples, 0.16%)</title><rect x="1088.6" y="309" width="1.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1091.56" y="319.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;&gt;   (2 samples, 0.16%)</title><rect x="1088.6" y="293" width="1.9" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1091.56" y="303.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (6 samples, 0.49%)</title><rect x="1138.3" y="197" width="5.8" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1141.32" y="207.5" ></text>
</g>
<g >
<title>core::num::{impl#9   (2 samples, 0.16%)</title><rect x="747.9" y="165" width="1.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="750.86" y="175.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (13 samples, 1.05%)</title><rect x="885.7" y="117" width="12.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="888.67" y="127.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (10 samples, 0.81%)</title><rect x="318.2" y="197" width="9.5" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="321.16" y="207.5" ></text>
</g>
<g >
<title>core::option::Option&lt;&amp;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::gen_all_points::{closure#0   (3 samples, 0.24%)</title><rect x="168.9" y="181" width="2.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="171.86" y="191.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (2 samples, 0.16%)</title><rect x="1088.6" y="229" width="1.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1091.56" y="239.5" ></text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;((isize, isize), ())&gt;::write&lt;((isize, isize), ())&gt;   (1 samples, 0.08%)</title><rect x="1017.7" y="261" width="1.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1020.74" y="271.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::grow_impl   (1 samples, 0.08%)</title><rect x="1171.8" y="149" width="1.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1174.82" y="159.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;&gt;   (2 samples, 0.16%)</title><rect x="1088.6" y="341" width="1.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1091.56" y="351.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, (isize, isize)&gt;   (1 samples, 0.08%)</title><rect x="1187.1" y="373" width="1.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1190.13" y="383.5" ></text>
</g>
<g >
<title>core::iter::adapters::fuse::{impl#10   (1 samples, 0.08%)</title><rect x="181.3" y="197" width="1.0" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="184.31" y="207.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (17 samples, 1.38%)</title><rect x="1138.3" y="293" width="16.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1141.32" y="303.5" ></text>
</g>
<g >
<title>core::cmp::max_by&lt;usize, fn(&amp;usize, &amp;usize) -&gt; core::cmp::Ordering&gt;   (1 samples, 0.08%)</title><rect x="148.8" y="117" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="151.77" y="127.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (16 samples, 1.30%)</title><rect x="1092.4" y="149" width="15.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1095.38" y="159.5" ></text>
</g>
<g >
<title>??   (2 samples, 0.16%)</title><rect x="138.2" y="37" width="2.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="141.24" y="47.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::get_inner&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (1 samples, 0.08%)</title><rect x="1187.1" y="325" width="1.0" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1190.13" y="335.5" ></text>
</g>
<g >
<title>__rust_alloc   (1 samples, 0.08%)</title><rect x="67.4" y="133" width="1.0" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="70.42" y="143.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.08%)</title><rect x="1061.8" y="213" width="0.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1064.76" y="223.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (52 samples, 4.22%)</title><rect x="96.1" y="133" width="49.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="99.13" y="143.5" >alloc..</text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_inner   (11 samples, 0.89%)</title><rect x="1125.9" y="245" width="10.5" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1128.88" y="255.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (82 samples, 6.65%)</title><rect x="329.6" y="277" width="78.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="332.64" y="287.5" >alloc::ve..</text>
</g>
<g >
<title>alloc::alloc::alloc   (1 samples, 0.08%)</title><rect x="1079.9" y="165" width="1.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1082.94" y="175.5" ></text>
</g>
<g >
<title>core::ptr::read_volatile&lt;u8&gt;   (1 samples, 0.08%)</title><rect x="1030.2" y="165" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1033.18" y="175.5" ></text>
</g>
<g >
<title>attempt7::is_close_int   (4 samples, 0.32%)</title><rect x="1080.9" y="165" width="3.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1083.90" y="175.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (57 samples, 4.62%)</title><rect x="263.6" y="197" width="54.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="266.61" y="207.5" >core:..</text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (10 samples, 0.81%)</title><rect x="318.2" y="165" width="9.5" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="321.16" y="175.5" ></text>
</g>
<g >
<title>core::cmp::Ord::max&lt;usize&gt;   (1 samples, 0.08%)</title><rect x="148.8" y="133" width="0.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="151.77" y="143.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#18   (6 samples, 0.49%)</title><rect x="1138.3" y="229" width="5.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1141.32" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#15   (1 samples, 0.08%)</title><rect x="54.0" y="325" width="1.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="57.02" y="335.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (122 samples, 9.89%)</title><rect x="66.5" y="277" width="116.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="69.46" y="287.5" >alloc::vec::sp..</text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner   (2 samples, 0.16%)</title><rect x="1184.3" y="293" width="1.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1187.26" y="303.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (184 samples, 14.92%)</title><rect x="845.5" y="325" width="176.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="848.47" y="335.5" >std::collections::hash..</text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_byte   (12 samples, 0.97%)</title><rect x="833.0" y="197" width="11.5" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="836.03" y="207.5" ></text>
</g>
<g >
<title>alloc::alloc::realloc   (1 samples, 0.08%)</title><rect x="1171.8" y="133" width="1.0" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="1174.82" y="143.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find_or_find_insert_slot&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (1 samples, 0.08%)</title><rect x="1188.1" y="325" width="0.9" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1191.09" y="335.5" ></text>
</g>
<g >
<title>__rust_dealloc   (1 samples, 0.08%)</title><rect x="412.9" y="181" width="1.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="415.90" y="191.5" ></text>
</g>
<g >
<title>core::result::Result&lt;core::ptr::non_null::NonNull&lt;[u8]&gt;, core::alloc::AllocError&gt;::map_err&lt;core::ptr::non_null::NonNull&lt;[u8]&gt;, core::alloc::AllocError, alloc::collections::TryReserveError, alloc::raw_vec::finish_grow::{closure_env#1   (3 samples, 0.24%)</title><rect x="145.9" y="133" width="2.9" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="148.90" y="143.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (5 samples, 0.41%)</title><rect x="1182.3" y="325" width="4.8" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1185.34" y="335.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6   (2 samples, 0.16%)</title><rect x="261.7" y="197" width="1.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="264.70" y="207.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::reserve&lt;(isize, isize), alloc::alloc::Global&gt;   (11 samples, 0.89%)</title><rect x="1064.6" y="213" width="10.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1067.63" y="223.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::get_inner&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (48 samples, 3.89%)</title><rect x="1090.5" y="293" width="45.9" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1093.47" y="303.5" >hash..</text>
</g>
<g >
<title>attempt7::choose_next_point   (1,214 samples, 98.46%)</title><rect x="10.0" y="357" width="1161.8" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >attempt7::choose_next_point  </text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_empty   (12 samples, 0.97%)</title><rect x="833.0" y="213" width="11.5" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="836.03" y="223.5" ></text>
</g>
<g >
<title>??   (4 samples, 0.32%)</title><rect x="1069.4" y="69" width="3.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1072.42" y="79.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (3 samples, 0.24%)</title><rect x="1173.7" y="309" width="2.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1176.73" y="319.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#5   (45 samples, 3.65%)</title><rect x="855.0" y="245" width="43.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="858.04" y="255.5" >core..</text>
</g>
<g >
<title>core::iter::adapters::map::map_fold::{closure#0   (1 samples, 0.08%)</title><rect x="327.7" y="165" width="1.0" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="330.73" y="175.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#83   (14 samples, 1.14%)</title><rect x="898.1" y="245" width="13.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="901.11" y="255.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (24 samples, 1.95%)</title><rect x="1026.4" y="197" width="22.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1029.35" y="207.5" >a..</text>
</g>
<g >
<title>core::core_arch::x86::sse2::_mm_movemask_epi8   (4 samples, 0.32%)</title><rect x="1013.9" y="229" width="3.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1016.91" y="239.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (1 samples, 0.08%)</title><rect x="1176.6" y="213" width="1.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1179.60" y="223.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains_key&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (48 samples, 3.89%)</title><rect x="1090.5" y="309" width="45.9" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1093.47" y="319.5" >hash..</text>
</g>
<g >
<title>core::ptr::write&lt;((isize, isize), ())&gt;   (1 samples, 0.08%)</title><rect x="1017.7" y="229" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1020.74" y="239.5" ></text>
</g>
<g >
<title>alloc::raw_vec::{impl#1   (11 samples, 0.89%)</title><rect x="1064.6" y="197" width="10.6" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1067.63" y="207.5" ></text>
</g>
<g >
<title>??   (39 samples, 3.16%)</title><rect x="102.8" y="69" width="37.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="105.83" y="79.5" >??  </text>
</g>
<g >
<title>core::iter::adapters::flatten::{impl#18   (22 samples, 1.78%)</title><rect x="150.7" y="197" width="21.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="153.68" y="207.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, (isize, isize)&gt;   (48 samples, 3.89%)</title><rect x="1090.5" y="341" width="45.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1093.47" y="351.5" >std:..</text>
</g>
<g >
<title>core::iter::adapters::flatten::{impl#3   (3 samples, 0.24%)</title><rect x="180.3" y="245" width="2.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="183.35" y="255.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (11 samples, 0.89%)</title><rect x="1125.9" y="261" width="10.5" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1128.88" y="271.5" ></text>
</g>
<g >
<title>core::hash::sip::SipHasher13::new_with_keys   (13 samples, 1.05%)</title><rect x="590.0" y="213" width="12.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="592.95" y="223.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#83   (23 samples, 1.87%)</title><rect x="580.4" y="229" width="22.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="583.38" y="239.5" >s..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt7::get_inbetween_points::{closure_env#1   (70 samples, 5.68%)</title><rect x="251.2" y="229" width="67.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="254.17" y="239.5" >core::i..</text>
</g>
<g >
<title>std::collections::hash::set::{impl#3   (10 samples, 0.81%)</title><rect x="1162.2" y="341" width="9.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1165.25" y="351.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (23 samples, 1.87%)</title><rect x="226.3" y="165" width="22.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="229.29" y="175.5" >a..</text>
</g>
<g >
<title>core::hash::sip::{impl#4   (154 samples, 12.49%)</title><rect x="602.4" y="213" width="147.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="605.39" y="223.5" >core::hash::sip::{..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::extend_desugared&lt;(isize, isize), alloc::alloc::Global, core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt7::get_inbetween_points::{closure_env#1   (3 samples, 0.24%)</title><rect x="248.3" y="229" width="2.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="251.30" y="239.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::{impl#3   (2 samples, 0.16%)</title><rect x="1156.5" y="261" width="1.9" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1159.50" y="271.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::fix_insert_slot   (1 samples, 0.08%)</title><rect x="1188.1" y="213" width="0.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1191.09" y="223.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset&lt;core::hash::sip::Sip13Rounds&gt;   (1 samples, 0.08%)</title><rect x="1183.3" y="229" width="1.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1186.30" y="239.5" ></text>
</g>
<g >
<title>attempt7::get_inbetween_points   (3 samples, 0.24%)</title><rect x="1173.7" y="357" width="2.9" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1176.73" y="367.5" ></text>
</g>
<g >
<title>attempt7::choose_next_point   (1,230 samples, 99.76%)</title><rect x="10.0" y="373" width="1177.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >attempt7::choose_next_point  </text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::reserve_rehash_inner&lt;alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1188.1" y="277" width="0.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1191.09" y="287.5" ></text>
</g>
<g >
<title>alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;   (57 samples, 4.62%)</title><rect x="94.2" y="149" width="54.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="97.22" y="159.5" >alloc..</text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (3 samples, 0.24%)</title><rect x="248.3" y="213" width="2.9" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="251.30" y="223.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6   (1 samples, 0.08%)</title><rect x="328.7" y="229" width="0.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="331.69" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (2 samples, 0.16%)</title><rect x="1171.8" y="325" width="1.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1174.82" y="335.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (8 samples, 0.65%)</title><rect x="67.4" y="181" width="7.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="70.42" y="191.5" ></text>
</g>
<g >
<title>attempt7::choose_next_point   (12 samples, 0.97%)</title><rect x="55.0" y="325" width="11.5" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="57.98" y="335.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1079.9" y="245" width="1.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1082.94" y="255.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;&gt;   (29 samples, 2.35%)</title><rect x="408.1" y="293" width="27.8" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="411.12" y="303.5" >c..</text>
</g>
<g >
<title>??   (14 samples, 1.14%)</title><rect x="234.9" y="117" width="13.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="237.90" y="127.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (3 samples, 0.24%)</title><rect x="1131.6" y="229" width="2.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1134.62" y="239.5" ></text>
</g>
<g >
<title>hashbrown::map::{impl#0   (40 samples, 3.24%)</title><rect x="1024.4" y="293" width="38.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1027.44" y="303.5" >has..</text>
</g>
<g >
<title>alloc::vec::spec_extend::{impl#1   (1 samples, 0.08%)</title><rect x="327.7" y="245" width="1.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="330.73" y="255.5" ></text>
</g>
<g >
<title>core::hash::sip::SipHasher13::new_with_keys   (7 samples, 0.57%)</title><rect x="904.8" y="229" width="6.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="907.81" y="239.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::fix_insert_slot   (10 samples, 0.81%)</title><rect x="978.5" y="245" width="9.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="981.50" y="255.5" ></text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_alloc   (1 samples, 0.08%)</title><rect x="1048.4" y="165" width="0.9" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1051.36" y="175.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (123 samples, 9.98%)</title><rect x="853.1" y="261" width="117.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="856.13" y="271.5" >core::hash::Bu..</text>
</g>
<g >
<title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit   (14 samples, 1.14%)</title><rect x="783.3" y="197" width="13.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="786.27" y="207.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1079.9" y="213" width="1.0" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1082.94" y="223.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (123 samples, 9.98%)</title><rect x="462.7" y="117" width="117.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="465.67" y="127.5" >core::hash::si..</text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (4 samples, 0.32%)</title><rect x="1080.9" y="261" width="3.8" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1083.90" y="271.5" ></text>
</g>
<g >
<title>alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;   (9 samples, 0.73%)</title><rect x="1066.5" y="165" width="8.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1069.55" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::reserve_rehash&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::make_hasher::{closure_env#0   (1 samples, 0.08%)</title><rect x="1188.1" y="293" width="0.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1191.09" y="303.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (1 samples, 0.08%)</title><rect x="1187.1" y="293" width="1.0" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1190.13" y="303.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::flatten::FlatMap&lt;core::ops::range::Range&lt;isize&gt;, core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::gen_all_points::{closure#0   (2 samples, 0.16%)</title><rect x="1171.8" y="341" width="1.9" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1174.82" y="351.5" ></text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_byte   (1 samples, 0.08%)</title><rect x="1181.4" y="229" width="0.9" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1184.39" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::spec_extend::{impl#0   (3 samples, 0.24%)</title><rect x="248.3" y="245" width="2.9" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="251.30" y="255.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt7::get_inbetween_points::{closure_env#1   (6 samples, 0.49%)</title><rect x="1079.0" y="325" width="5.7" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1081.99" y="335.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#18   (17 samples, 1.38%)</title><rect x="1091.4" y="213" width="16.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1094.43" y="223.5" ></text>
</g>
<g >
<title>realloc   (7 samples, 0.57%)</title><rect x="1066.5" y="101" width="6.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1069.55" y="111.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (12 samples, 0.97%)</title><rect x="318.2" y="277" width="11.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="321.16" y="287.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (70 samples, 5.68%)</title><rect x="251.2" y="213" width="67.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="254.17" y="223.5" >core::i..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::flatten::FlatMap&lt;core::ops::range::Range&lt;isize&gt;, core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::gen_all_points::{closure#0   (16 samples, 1.30%)</title><rect x="1062.7" y="325" width="15.3" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1065.72" y="335.5" ></text>
</g>
<g >
<title>core::num::{impl#11   (1 samples, 0.08%)</title><rect x="149.7" y="133" width="1.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="152.72" y="143.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::new_uninitialized&lt;alloc::alloc::Global&gt;   (4 samples, 0.32%)</title><rect x="1163.2" y="261" width="3.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1166.20" y="271.5" ></text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_byte   (1 samples, 0.08%)</title><rect x="1134.5" y="213" width="1.0" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1137.49" y="223.5" ></text>
</g>
<g >
<title>all (1,233 samples, 100%)</title><rect x="10.0" y="453" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt7::get_inbetween_points::{closure_env#1   (3 samples, 0.24%)</title><rect x="1173.7" y="261" width="2.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1176.73" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (5 samples, 0.41%)</title><rect x="1079.9" y="277" width="4.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1082.94" y="287.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (23 samples, 1.87%)</title><rect x="226.3" y="197" width="22.0" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="229.29" y="207.5" >a..</text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::new_uninitialized&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (4 samples, 0.32%)</title><rect x="1163.2" y="277" width="3.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1166.20" y="287.5" ></text>
</g>
<g >
<title>hashbrown::raw::{impl#8   (1 samples, 0.08%)</title><rect x="1135.5" y="229" width="0.9" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1138.45" y="239.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (24 samples, 1.95%)</title><rect x="411.9" y="213" width="23.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="414.95" y="223.5" >a..</text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_empty   (1 samples, 0.08%)</title><rect x="1181.4" y="245" width="0.9" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1184.39" y="255.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (1 samples, 0.08%)</title><rect x="1171.8" y="165" width="1.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1174.82" y="175.5" ></text>
</g>
<g >
<title>attempt7::get_inbetween_points   (153 samples, 12.41%)</title><rect x="183.2" y="325" width="146.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="186.22" y="335.5" >attempt7::get_inbe..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (4 samples, 0.32%)</title><rect x="1084.7" y="341" width="3.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1087.73" y="351.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (2 samples, 0.16%)</title><rect x="1177.6" y="245" width="1.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1180.56" y="255.5" ></text>
</g>
<g >
<title>fmodf64   (1 samples, 0.08%)</title><rect x="1175.6" y="165" width="1.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1178.64" y="175.5" ></text>
</g>
<g >
<title>core::iter::adapters::flatten::{impl#18   (3 samples, 0.24%)</title><rect x="1075.2" y="213" width="2.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1078.16" y="223.5" ></text>
</g>
<g >
<title>core::ptr::write&lt;(isize, isize)&gt;   (9 samples, 0.73%)</title><rect x="171.7" y="213" width="8.6" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="174.74" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_inner   (1 samples, 0.08%)</title><rect x="1187.1" y="277" width="1.0" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1190.13" y="287.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::new_uninitialized&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (26 samples, 2.11%)</title><rect x="1024.4" y="261" width="24.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1027.44" y="271.5" >h..</text>
</g>
<g >
<title>core::hash::impls::{impl#5   (18 samples, 1.46%)</title><rect x="1090.5" y="245" width="17.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1093.47" y="255.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (8 samples, 0.65%)</title><rect x="67.4" y="229" width="7.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="70.42" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (3 samples, 0.24%)</title><rect x="1173.7" y="325" width="2.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1176.73" y="335.5" ></text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_dealloc   (1 samples, 0.08%)</title><rect x="406.2" y="197" width="1.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="409.20" y="207.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset&lt;core::hash::sip::Sip13Rounds&gt;   (13 samples, 1.05%)</title><rect x="590.0" y="181" width="12.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="592.95" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::record_item_insert_at   (3 samples, 0.24%)</title><rect x="1018.7" y="261" width="2.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1021.69" y="271.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (17 samples, 1.38%)</title><rect x="1091.4" y="197" width="16.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1094.43" y="207.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping&lt;u8&gt;   (1 samples, 0.08%)</title><rect x="1061.8" y="229" width="0.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1064.76" y="239.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (6 samples, 0.49%)</title><rect x="1138.3" y="165" width="5.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1141.32" y="175.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping&lt;((isize, isize), ())&gt;   (4 samples, 0.32%)</title><rect x="1167.0" y="245" width="3.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1170.03" y="255.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (23 samples, 1.87%)</title><rect x="226.3" y="181" width="22.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="229.29" y="191.5" >a..</text>
</g>
<g >
<title>alloc::alloc::alloc   (10 samples, 0.81%)</title><rect x="318.2" y="149" width="9.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="321.16" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::reserve&lt;(isize, isize), alloc::alloc::Global&gt;   (11 samples, 0.89%)</title><rect x="1064.6" y="229" width="10.6" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1067.63" y="239.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc   (24 samples, 1.95%)</title><rect x="1026.4" y="181" width="22.9" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1029.35" y="191.5" >a..</text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (3 samples, 0.24%)</title><rect x="1173.7" y="293" width="2.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1176.73" y="303.5" ></text>
</g>
<g >
<title>core::option::Option&lt;&amp;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::gen_all_points::{closure#0   (1 samples, 0.08%)</title><rect x="1077.1" y="197" width="0.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1080.07" y="207.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (23 samples, 1.87%)</title><rect x="226.3" y="229" width="22.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="229.29" y="239.5" >a..</text>
</g>
<g >
<title>alloc::alloc::Global::grow_impl   (52 samples, 4.22%)</title><rect x="96.1" y="117" width="49.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="99.13" y="127.5" >alloc..</text>
</g>
<g >
<title>alloc::vec::{impl#14   (16 samples, 1.30%)</title><rect x="1062.7" y="309" width="15.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1065.72" y="319.5" ></text>
</g>
<g >
<title>core::iter::adapters::flatten::and_then_or_clear&lt;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::gen_all_points::{closure#0   (2 samples, 0.16%)</title><rect x="1075.2" y="197" width="1.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1078.16" y="207.5" ></text>
</g>
<g >
<title>fmodf64   (29 samples, 2.35%)</title><rect x="287.5" y="133" width="27.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="290.53" y="143.5" >f..</text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.08%)</title><rect x="844.5" y="149" width="1.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="847.52" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (2 samples, 0.16%)</title><rect x="1179.5" y="245" width="1.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1182.47" y="255.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::adapters::map::map_fold::{closure_env#0   (1 samples, 0.08%)</title><rect x="327.7" y="181" width="1.0" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="330.73" y="191.5" ></text>
</g>
<g >
<title>alloc::alloc::realloc   (8 samples, 0.65%)</title><rect x="1066.5" y="117" width="7.7" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="1069.55" y="127.5" ></text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;((isize, isize), ())&gt;::as_ref&lt;((isize, isize), ())&gt;   (1 samples, 0.08%)</title><rect x="844.5" y="197" width="1.0" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="847.52" y="207.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (12 samples, 0.97%)</title><rect x="318.2" y="293" width="11.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="321.16" y="303.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::extend_desugared&lt;(isize, isize), alloc::alloc::Global, core::iter::adapters::flatten::FlatMap&lt;core::ops::range::Range&lt;isize&gt;, core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::gen_all_points::{closure#0   (15 samples, 1.22%)</title><rect x="1063.7" y="245" width="14.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1066.67" y="255.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (42 samples, 3.41%)</title><rect x="857.9" y="197" width="40.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="860.92" y="207.5" >cor..</text>
</g>
<g >
<title>core::iter::adapters::flatten::{impl#3   (1 samples, 0.08%)</title><rect x="1172.8" y="245" width="0.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1175.77" y="255.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#83   (1 samples, 0.08%)</title><rect x="1183.3" y="277" width="1.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1186.30" y="287.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (122 samples, 9.89%)</title><rect x="66.5" y="293" width="116.7" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="69.46" y="303.5" >alloc::vec::{i..</text>
</g>
<g >
<title>core::iter::range::{impl#5   (1 samples, 0.08%)</title><rect x="181.3" y="149" width="1.0" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="184.31" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner   (47 samples, 3.81%)</title><rect x="972.8" y="261" width="44.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="975.76" y="271.5" >hash..</text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (4 samples, 0.32%)</title><rect x="1084.7" y="293" width="3.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1087.73" y="303.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc   (4 samples, 0.32%)</title><rect x="1084.7" y="229" width="3.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1087.73" y="239.5" ></text>
</g>
<g >
<title>fmodf64   (4 samples, 0.32%)</title><rect x="1080.9" y="149" width="3.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1083.90" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::{impl#18   (29 samples, 2.35%)</title><rect x="408.1" y="261" width="27.8" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="411.12" y="271.5" >h..</text>
</g>
<g >
<title>core::core_arch::x86::sse2::_mm_movemask_epi8   (2 samples, 0.16%)</title><rect x="831.1" y="197" width="1.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="834.12" y="207.5" ></text>
</g>
<g >
<title>core::num::{impl#9   (1 samples, 0.08%)</title><rect x="1124.9" y="181" width="1.0" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1127.92" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (6 samples, 0.49%)</title><rect x="1079.0" y="293" width="5.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1081.99" y="303.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (3 samples, 0.24%)</title><rect x="1173.7" y="229" width="2.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1176.73" y="239.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::is_bucket_full   (2 samples, 0.16%)</title><rect x="1154.6" y="245" width="1.9" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1157.59" y="255.5" ></text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_realloc   (6 samples, 0.49%)</title><rect x="140.2" y="85" width="5.7" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="143.15" y="95.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (6 samples, 0.49%)</title><rect x="1138.3" y="213" width="5.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1141.32" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (3 samples, 0.24%)</title><rect x="1179.5" y="277" width="2.8" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1182.47" y="287.5" ></text>
</g>
<g >
<title>attempt7::gen_all_points   (16 samples, 1.30%)</title><rect x="1062.7" y="341" width="15.3" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1065.72" y="351.5" ></text>
</g>
<g >
<title>malloc   (22 samples, 1.78%)</title><rect x="227.2" y="133" width="21.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="230.24" y="143.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (113 samples, 9.16%)</title><rect x="210.0" y="277" width="108.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="213.02" y="287.5" >alloc::vec::s..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::current_memory&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="407.2" y="229" width="0.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="410.16" y="239.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (123 samples, 9.98%)</title><rect x="462.7" y="133" width="117.7" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="465.67" y="143.5" >core::hash::si..</text>
</g>
<g >
<title>core::hash::sip::{impl#5   (41 samples, 3.33%)</title><rect x="858.9" y="133" width="39.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="861.87" y="143.5" >cor..</text>
</g>
<g >
<title>core::mem::manually_drop::ManuallyDrop&lt;alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;::new&lt;alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (1 samples, 0.08%)</title><rect x="54.0" y="309" width="1.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="57.02" y="319.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (6 samples, 0.49%)</title><rect x="1079.0" y="309" width="5.7" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1081.99" y="319.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#18   (1 samples, 0.08%)</title><rect x="1176.6" y="229" width="1.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1179.60" y="239.5" ></text>
</g>
<g >
<title>core::cmp::max&lt;usize&gt;   (1 samples, 0.08%)</title><rect x="148.8" y="149" width="0.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="151.77" y="159.5" ></text>
</g>
<g >
<title>std::collections::hash::set::{impl#3   (1 samples, 0.08%)</title><rect x="1189.0" y="373" width="1.0" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1192.04" y="383.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (4 samples, 0.32%)</title><rect x="1084.7" y="245" width="3.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1087.73" y="255.5" ></text>
</g>
<g >
<title>hashbrown::raw::{impl#13   (40 samples, 3.24%)</title><rect x="1024.4" y="277" width="38.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1027.44" y="287.5" >has..</text>
</g>
<g >
<title>hashbrown::raw::{impl#13   (1 samples, 0.08%)</title><rect x="1189.0" y="325" width="1.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1192.04" y="335.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#83   (1 samples, 0.08%)</title><rect x="1144.1" y="261" width="0.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1147.06" y="271.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::{impl#3   (21 samples, 1.70%)</title><rect x="776.6" y="213" width="20.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="779.57" y="223.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (6 samples, 0.49%)</title><rect x="1102.0" y="117" width="5.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1104.95" y="127.5" ></text>
</g>
<g >
<title>alloc::alloc::realloc   (52 samples, 4.22%)</title><rect x="96.1" y="101" width="49.8" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="99.13" y="111.5" >alloc..</text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::get&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (1 samples, 0.08%)</title><rect x="1187.1" y="309" width="1.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1190.13" y="319.5" ></text>
</g>
<g >
<title>free   (76 samples, 6.16%)</title><rect x="333.5" y="197" width="72.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="336.47" y="207.5" >free  </text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt7::get_inbetween_points::{closure_env#1   (113 samples, 9.16%)</title><rect x="210.0" y="309" width="108.2" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="213.02" y="319.5" >core::iter::t..</text>
</g>
<g >
<title>core::hash::sip::{impl#4   (16 samples, 1.30%)</title><rect x="1110.6" y="229" width="15.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1113.57" y="239.5" ></text>
</g>
<g >
<title>__rust_alloc   (1 samples, 0.08%)</title><rect x="226.3" y="133" width="0.9" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="229.29" y="143.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#23   (6 samples, 0.49%)</title><rect x="1138.3" y="245" width="5.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1141.32" y="255.5" ></text>
</g>
<g >
<title>hashbrown::set::{impl#0   (43 samples, 3.49%)</title><rect x="1021.6" y="309" width="41.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1024.57" y="319.5" >has..</text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (16 samples, 1.30%)</title><rect x="1092.4" y="165" width="15.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1095.38" y="175.5" ></text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_realloc   (1 samples, 0.08%)</title><rect x="1073.2" y="101" width="1.0" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1076.24" y="111.5" ></text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_empty   (1 samples, 0.08%)</title><rect x="1134.5" y="229" width="1.0" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1137.49" y="239.5" ></text>
</g>
<g >
<title>attempt7::get_inbetween_points::{closure#1   (2 samples, 0.16%)</title><rect x="249.3" y="133" width="1.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="252.25" y="143.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::as_mut_ptr&lt;(isize, isize), alloc::alloc::Global&gt;   (3 samples, 0.24%)</title><rect x="81.8" y="213" width="2.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="84.78" y="223.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (183 samples, 14.84%)</title><rect x="846.4" y="293" width="175.2" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="849.43" y="303.5" >hashbrown::map::HashMa..</text>
</g>
<g >
<title>alloc::vec::{impl#19   (1 samples, 0.08%)</title><rect x="327.7" y="133" width="1.0" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="330.73" y="143.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping&lt;((isize, isize), ())&gt;   (1 samples, 0.08%)</title><rect x="1189.0" y="277" width="1.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1192.04" y="287.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (41 samples, 3.33%)</title><rect x="858.9" y="149" width="39.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="861.87" y="159.5" >cor..</text>
</g>
<g >
<title>core::iter::range::{impl#5   (2 samples, 0.16%)</title><rect x="261.7" y="181" width="1.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="264.70" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (16 samples, 1.30%)</title><rect x="1062.7" y="293" width="15.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1065.72" y="303.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::filter_map::FilterMap&lt;core::ops::range::Range&lt;isize&gt;, attempt7::get_inbetween_points::{closure_env#1   (3 samples, 0.24%)</title><rect x="1173.7" y="341" width="2.9" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1176.73" y="351.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (2 samples, 0.16%)</title><rect x="1177.6" y="229" width="1.9" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1180.56" y="239.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::get_inner&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (6 samples, 0.49%)</title><rect x="1176.6" y="309" width="5.7" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1179.60" y="319.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (3 samples, 0.24%)</title><rect x="1176.6" y="293" width="2.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1179.60" y="303.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (10 samples, 0.81%)</title><rect x="1116.3" y="197" width="9.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1119.31" y="207.5" ></text>
</g>
<g >
<title>alloc::vec::{impl#14   (113 samples, 9.16%)</title><rect x="210.0" y="293" width="108.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="213.02" y="303.5" >alloc::vec::{..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (10 samples, 0.81%)</title><rect x="318.2" y="213" width="9.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="321.16" y="223.5" ></text>
</g>
<g >
<title>attempt7::gen_all_points   (122 samples, 9.89%)</title><rect x="66.5" y="325" width="116.7" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="69.46" y="335.5" >attempt7::gen_..</text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains_key&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (6 samples, 0.49%)</title><rect x="1176.6" y="325" width="5.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1179.60" y="335.5" ></text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (1 samples, 0.08%)</title><rect x="1187.1" y="357" width="1.0" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1190.13" y="367.5" ></text>
</g>
<g >
<title>??   (2 samples, 0.16%)</title><rect x="1088.6" y="181" width="1.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1091.56" y="191.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (327 samples, 26.52%)</title><rect x="436.8" y="261" width="313.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="439.83" y="271.5" >hashbrown::map::make_hash&lt;(isize, isize), ..</text>
</g>
<g >
<title>core::hash::sip::SipHasher13::new_with_keys   (1 samples, 0.08%)</title><rect x="1183.3" y="261" width="1.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1186.30" y="271.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (3 samples, 0.24%)</title><rect x="1173.7" y="277" width="2.9" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="1176.73" y="287.5" ></text>
</g>
<g >
<title>core::ptr::write&lt;((isize, isize), ())&gt;   (1 samples, 0.08%)</title><rect x="1160.3" y="245" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1163.33" y="255.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.08%)</title><rect x="74.1" y="117" width="1.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="77.12" y="127.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, (isize, isize)&gt;   (428 samples, 34.71%)</title><rect x="435.9" y="325" width="409.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="438.87" y="335.5" >std::collections::hash::set::HashSet&lt;(isize, isize), st..</text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find_or_find_insert_slot&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (49 samples, 3.97%)</title><rect x="970.8" y="277" width="46.9" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="973.84" y="287.5" >hash..</text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (17 samples, 1.38%)</title><rect x="1091.4" y="181" width="16.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1094.43" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity&lt;(isize, isize)&gt;   (23 samples, 1.87%)</title><rect x="226.3" y="245" width="22.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="229.29" y="255.5" >a..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (8 samples, 0.65%)</title><rect x="67.4" y="213" width="7.7" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="70.42" y="223.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#23   (139 samples, 11.27%)</title><rect x="447.4" y="213" width="133.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="450.36" y="223.5" >core::hash::impl..</text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::get_inner&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (428 samples, 34.71%)</title><rect x="435.9" y="277" width="409.6" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="438.87" y="287.5" >hashbrown::map::HashMap&lt;(isize, isize), (), std::collec..</text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (16 samples, 1.30%)</title><rect x="1110.6" y="245" width="15.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1113.57" y="255.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::grow_amortized&lt;(isize, isize), alloc::alloc::Global&gt;   (67 samples, 5.43%)</title><rect x="86.6" y="165" width="64.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="89.56" y="175.5" >alloc::..</text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::extend_desugared&lt;(isize, isize), alloc::alloc::Global, core::iter::adapters::flatten::FlatMap&lt;core::ops::range::Range&lt;isize&gt;, core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::gen_all_points::{closure#0   (2 samples, 0.16%)</title><rect x="1171.8" y="261" width="1.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1174.82" y="271.5" ></text>
</g>
<g >
<title>hashbrown::map::{impl#0   (9 samples, 0.73%)</title><rect x="1163.2" y="309" width="8.6" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1166.20" y="319.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (1 samples, 0.08%)</title><rect x="1079.9" y="197" width="1.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1082.94" y="207.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_isize&lt;std::collections::hash::map::DefaultHasher&gt;   (131 samples, 10.62%)</title><rect x="455.0" y="181" width="125.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="458.01" y="191.5" >core::hash::Has..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (82 samples, 6.65%)</title><rect x="329.6" y="261" width="78.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="332.64" y="271.5" >core::ptr..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (8 samples, 0.65%)</title><rect x="67.4" y="197" width="7.7" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="70.42" y="207.5" ></text>
</g>
<g >
<title>attempt7::get_inbetween_points   (7 samples, 0.57%)</title><rect x="1078.0" y="341" width="6.7" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1081.03" y="351.5" ></text>
</g>
<g >
<title>hashbrown::raw::TableLayout::calculate_layout_for   (1 samples, 0.08%)</title><rect x="434.9" y="197" width="1.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="437.91" y="207.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (2 samples, 0.16%)</title><rect x="1182.3" y="309" width="2.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1185.34" y="319.5" ></text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_byte   (4 samples, 0.32%)</title><rect x="1013.9" y="245" width="3.8" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1016.91" y="255.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;&gt;   (29 samples, 2.35%)</title><rect x="408.1" y="309" width="27.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="411.12" y="319.5" >c..</text>
</g>
<g >
<title>core::hash::impls::{impl#5   (6 samples, 0.49%)</title><rect x="1138.3" y="261" width="5.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1141.32" y="271.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains_key&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (1 samples, 0.08%)</title><rect x="1187.1" y="341" width="1.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1190.13" y="351.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (22 samples, 1.78%)</title><rect x="992.9" y="245" width="21.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="995.85" y="255.5" ></text>
</g>
<g >
<title>hashbrown::raw::alloc::inner::do_alloc&lt;alloc::alloc::Global&gt;   (4 samples, 0.32%)</title><rect x="1163.2" y="245" width="3.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1166.20" y="255.5" ></text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (184 samples, 14.92%)</title><rect x="845.5" y="309" width="176.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="848.47" y="319.5" >hashbrown::set::HashSe..</text>
</g>
<g >
<title>attempt7::is_close_int   (1 samples, 0.08%)</title><rect x="1175.6" y="181" width="1.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1178.64" y="191.5" ></text>
</g>
<g >
<title>core::num::{impl#9   (1 samples, 0.08%)</title><rect x="969.9" y="181" width="0.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="972.89" y="191.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;&gt;   (29 samples, 2.35%)</title><rect x="408.1" y="277" width="27.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="411.12" y="287.5" >c..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (3 samples, 0.24%)</title><rect x="1173.7" y="245" width="2.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1176.73" y="255.5" ></text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (5 samples, 0.41%)</title><rect x="1182.3" y="341" width="4.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1185.34" y="351.5" ></text>
</g>
<g >
<title>roundf64   (3 samples, 0.24%)</title><rect x="315.3" y="133" width="2.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="318.29" y="143.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.08%)</title><rect x="1017.7" y="245" width="1.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1020.74" y="255.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping&lt;u8&gt;   (1 samples, 0.08%)</title><rect x="1170.9" y="245" width="0.9" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="1173.86" y="255.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (57 samples, 4.62%)</title><rect x="263.6" y="181" width="54.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="266.61" y="191.5" >core:..</text>
</g>
<g >
<title>alloc::alloc::dealloc   (2 samples, 0.16%)</title><rect x="1088.6" y="213" width="1.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1091.56" y="223.5" ></text>
</g>
<g >
<title>alloc::raw_vec::{impl#3   (4 samples, 0.32%)</title><rect x="1084.7" y="261" width="3.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1087.73" y="271.5" ></text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;((isize, isize), ())&gt;::as_ptr&lt;((isize, isize), ())&gt;   (1 samples, 0.08%)</title><rect x="844.5" y="181" width="1.0" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="847.52" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (1 samples, 0.08%)</title><rect x="1187.1" y="261" width="1.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1190.13" y="271.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::prepare_insert_slot   (1 samples, 0.08%)</title><rect x="1188.1" y="245" width="0.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1191.09" y="255.5" ></text>
</g>
<g >
<title>??   (7 samples, 0.57%)</title><rect x="1066.5" y="85" width="6.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1069.55" y="95.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#18   (134 samples, 10.87%)</title><rect x="452.1" y="197" width="128.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="455.14" y="207.5" >core::hash::impl..</text>
</g>
<g >
<title>hashbrown::raw::alloc::inner::do_alloc&lt;alloc::alloc::Global&gt;   (24 samples, 1.95%)</title><rect x="1026.4" y="229" width="22.9" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1029.35" y="239.5" >h..</text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (2 samples, 0.16%)</title><rect x="1182.3" y="293" width="2.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1185.34" y="303.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (4 samples, 0.32%)</title><rect x="1080.9" y="229" width="3.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1083.90" y="239.5" ></text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1188.1" y="341" width="0.9" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1191.09" y="351.5" ></text>
</g>
<g >
<title>malloc   (8 samples, 0.65%)</title><rect x="320.1" y="133" width="7.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="323.07" y="143.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1079.9" y="229" width="1.0" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1082.94" y="239.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::fix_insert_slot   (2 samples, 0.16%)</title><rect x="1154.6" y="261" width="1.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1157.59" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity&lt;(isize, isize)&gt;   (1 samples, 0.08%)</title><rect x="1062.7" y="261" width="1.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1065.72" y="271.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_inner   (100 samples, 8.11%)</title><rect x="749.8" y="229" width="95.7" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="752.77" y="239.5" >hashbrown::..</text>
</g>
<g >
<title>core::hash::sip::{impl#5   (10 samples, 0.81%)</title><rect x="1145.0" y="229" width="9.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1148.02" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::extend_trusted&lt;(isize, isize), alloc::alloc::Global, core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::get_inbetween_points::{closure_env#0   (1 samples, 0.08%)</title><rect x="327.7" y="229" width="1.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="330.73" y="239.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_inner   (3 samples, 0.24%)</title><rect x="1179.5" y="261" width="2.8" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1182.47" y="271.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit   (1 samples, 0.08%)</title><rect x="1130.7" y="213" width="0.9" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1133.67" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::{impl#18   (2 samples, 0.16%)</title><rect x="1088.6" y="277" width="1.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1091.56" y="287.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#1   (12 samples, 0.97%)</title><rect x="318.2" y="261" width="11.4" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="321.16" y="271.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (1 samples, 0.08%)</title><rect x="1176.6" y="197" width="1.0" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1179.60" y="207.5" ></text>
</g>
<g >
<title>__rust_dealloc   (3 samples, 0.24%)</title><rect x="330.6" y="197" width="2.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="333.60" y="207.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (5 samples, 0.41%)</title><rect x="1149.8" y="213" width="4.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1152.81" y="223.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (1 samples, 0.08%)</title><rect x="1178.5" y="213" width="1.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1181.52" y="223.5" ></text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1188.1" y="357" width="0.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1191.09" y="367.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (1 samples, 0.08%)</title><rect x="1176.6" y="165" width="1.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1179.60" y="175.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::flatten::FlatMap&lt;core::ops::range::Range&lt;isize&gt;, core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::gen_all_points::{closure#0   (122 samples, 9.89%)</title><rect x="66.5" y="309" width="116.7" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="69.46" y="319.5" >core::iter::tr..</text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::record_item_insert_at   (1 samples, 0.08%)</title><rect x="1161.3" y="277" width="0.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1164.29" y="287.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (23 samples, 1.87%)</title><rect x="226.3" y="213" width="22.0" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="229.29" y="223.5" >a..</text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::get&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (11 samples, 0.89%)</title><rect x="1125.9" y="277" width="10.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1128.88" y="287.5" ></text>
</g>
<g >
<title>hashbrown::raw::{impl#8   (1 samples, 0.08%)</title><rect x="844.5" y="213" width="1.0" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="847.52" y="223.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#23   (45 samples, 3.65%)</title><rect x="855.0" y="229" width="43.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="858.04" y="239.5" >core..</text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_insert_slot   (1 samples, 0.08%)</title><rect x="1188.1" y="229" width="0.9" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1191.09" y="239.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::{impl#3   (2 samples, 0.16%)</title><rect x="1129.7" y="229" width="1.9" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1132.71" y="239.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1062.7" y="229" width="1.0" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1065.72" y="239.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::new&lt;(isize, isize)&gt;   (2 samples, 0.16%)</title><rect x="224.4" y="245" width="1.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="227.37" y="255.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (4 samples, 0.32%)</title><rect x="1163.2" y="229" width="3.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1166.20" y="239.5" ></text>
</g>
<g >
<title>attempt7::choose_next_point   (1,094 samples, 88.73%)</title><rect x="15.7" y="341" width="1047.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="18.74" y="351.5" >attempt7::choose_next_point  </text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (428 samples, 34.71%)</title><rect x="435.9" y="309" width="409.6" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="438.87" y="319.5" >hashbrown::set::HashSet&lt;(isize, isize), std::collection..</text>
</g>
<g >
<title>core::hash::sip::{impl#5   (16 samples, 1.30%)</title><rect x="1092.4" y="133" width="15.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1095.38" y="143.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.08%)</title><rect x="1189.0" y="293" width="1.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1192.04" y="303.5" ></text>
</g>
<g >
<title>core::iter::adapters::flatten::{impl#3   (22 samples, 1.78%)</title><rect x="150.7" y="213" width="21.0" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="153.68" y="223.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (154 samples, 12.49%)</title><rect x="602.4" y="229" width="147.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="605.39" y="239.5" >std::collections::..</text>
</g>
<g >
<title>std::alloc::__default_lib_allocator::__rdl_dealloc   (1 samples, 0.08%)</title><rect x="434.0" y="181" width="0.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="436.96" y="191.5" ></text>
</g>
<g >
<title>core::iter::range::{impl#6   (1 samples, 0.08%)</title><rect x="181.3" y="165" width="1.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="184.31" y="175.5" ></text>
</g>
<g >
<title>??   (10 samples, 0.81%)</title><rect x="1052.2" y="213" width="9.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1055.19" y="223.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys&lt;core::hash::sip::Sip13Rounds&gt;   (1 samples, 0.08%)</title><rect x="1183.3" y="245" width="1.0" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1186.30" y="255.5" ></text>
</g>
<g >
<title>free   (2 samples, 0.16%)</title><rect x="1086.6" y="213" width="2.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1089.64" y="223.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (12 samples, 0.97%)</title><rect x="1051.2" y="245" width="11.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1054.23" y="255.5" ></text>
</g>
<g >
<title>hashbrown::raw::{impl#15   (1 samples, 0.08%)</title><rect x="1189.0" y="309" width="1.0" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1192.04" y="319.5" ></text>
</g>
<g >
<title>??   (2 samples, 0.16%)</title><rect x="1086.6" y="197" width="2.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1089.64" y="207.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (3 samples, 0.24%)</title><rect x="1173.7" y="213" width="2.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1176.73" y="223.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.08%)</title><rect x="1072.3" y="53" width="0.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1075.29" y="63.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity_in&lt;(isize, isize), alloc::alloc::Global&gt;   (10 samples, 0.81%)</title><rect x="318.2" y="229" width="9.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="321.16" y="239.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::try_fold&lt;core::ops::range::Range&lt;isize&gt;, (), core::iter::traits::iterator::Iterator::find_map::check::{closure_env#0   (3 samples, 0.24%)</title><rect x="248.3" y="181" width="2.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="251.30" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (122 samples, 9.89%)</title><rect x="66.5" y="261" width="116.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="69.46" y="271.5" >alloc::vec::sp..</text>
</g>
<g >
<title>hashbrown::raw::Bucket&lt;((isize, isize), ())&gt;::write&lt;((isize, isize), ())&gt;   (1 samples, 0.08%)</title><rect x="1160.3" y="277" width="1.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1163.33" y="287.5" ></text>
</g>
<g >
<title>attempt7::get_inbetween_points::{closure#1   (3 samples, 0.24%)</title><rect x="1173.7" y="197" width="2.9" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1176.73" y="207.5" ></text>
</g>
<g >
<title>core::core_arch::x86::sse2::_mm_movemask_epi8   (1 samples, 0.08%)</title><rect x="1134.5" y="197" width="1.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1137.49" y="207.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (100 samples, 8.11%)</title><rect x="749.8" y="245" width="95.7" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="752.77" y="255.5" >hashbrown::..</text>
</g>
<g >
<title>core::iter::adapters::flatten::{impl#18   (1 samples, 0.08%)</title><rect x="1172.8" y="229" width="0.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1175.77" y="239.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (103 samples, 8.35%)</title><rect x="651.2" y="181" width="98.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="654.20" y="191.5" >core::hash:..</text>
</g>
<g >
<title>core::hash::sip::{impl#4   (62 samples, 5.03%)</title><rect x="911.5" y="229" width="59.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="914.51" y="239.5" >core::..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::collect&lt;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::get_inbetween_points::{closure_env#0   (12 samples, 0.97%)</title><rect x="318.2" y="309" width="11.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="321.16" y="319.5" ></text>
</g>
<g >
<title>??   (29 samples, 2.35%)</title><rect x="112.4" y="53" width="27.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="115.40" y="63.5" >?..</text>
</g>
<g >
<title>core::hash::sip::{impl#5   (154 samples, 12.49%)</title><rect x="602.4" y="197" width="147.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="605.39" y="207.5" >core::hash::sip::{..</text>
</g>
<g >
<title>core::hash::sip::{impl#5   (1 samples, 0.08%)</title><rect x="1176.6" y="149" width="1.0" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1179.60" y="159.5" ></text>
</g>
<g >
<title>free   (2 samples, 0.16%)</title><rect x="1088.6" y="197" width="1.9" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1091.56" y="207.5" ></text>
</g>
<g >
<title>core::hash::sip::u8to64_le   (4 samples, 0.32%)</title><rect x="881.8" y="117" width="3.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="884.84" y="127.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::reserve&lt;(isize, isize), alloc::alloc::Global&gt;   (69 samples, 5.60%)</title><rect x="84.6" y="197" width="66.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="87.65" y="207.5" >alloc::..</text>
</g>
<g >
<title>__rust_alloc   (2 samples, 0.16%)</title><rect x="1028.3" y="165" width="1.9" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1031.26" y="175.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc   (23 samples, 1.87%)</title><rect x="226.3" y="149" width="22.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="229.29" y="159.5" >a..</text>
</g>
<g >
<title>core::option::Option&lt;&amp;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::gen_all_points::{closure#0   (1 samples, 0.08%)</title><rect x="182.3" y="213" width="0.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="185.26" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (1 samples, 0.08%)</title><rect x="1185.2" y="277" width="1.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1188.21" y="287.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_insert_slot_in_group   (1 samples, 0.08%)</title><rect x="977.5" y="245" width="1.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="980.54" y="255.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (41 samples, 3.33%)</title><rect x="858.9" y="165" width="39.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="861.87" y="175.5" >std..</text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (6 samples, 0.49%)</title><rect x="1176.6" y="341" width="5.7" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1179.60" y="351.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (123 samples, 9.98%)</title><rect x="462.7" y="149" width="117.7" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="465.67" y="159.5" >std::collectio..</text>
</g>
<g >
<title>core::num::{impl#11   (1 samples, 0.08%)</title><rect x="149.7" y="149" width="1.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="152.72" y="159.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (4 samples, 0.32%)</title><rect x="1084.7" y="325" width="3.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1087.73" y="335.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (4 samples, 0.32%)</title><rect x="1080.9" y="197" width="3.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1083.90" y="207.5" ></text>
</g>
<g >
<title>attempt7::choose_next_point   (1,233 samples, 100.00%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >attempt7::choose_next_point  </text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (123 samples, 9.98%)</title><rect x="853.1" y="277" width="117.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="856.13" y="287.5" >hashbrown::map..</text>
</g>
<g >
<title>malloc   (18 samples, 1.46%)</title><rect x="1031.1" y="165" width="17.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1034.14" y="175.5" ></text>
</g>
<g >
<title>core::iter::adapters::flatten::and_then_or_clear&lt;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::gen_all_points::{closure#0   (15 samples, 1.22%)</title><rect x="154.5" y="181" width="14.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="157.51" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (2 samples, 0.16%)</title><rect x="1158.4" y="261" width="1.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1161.42" y="271.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#18   (43 samples, 3.49%)</title><rect x="857.0" y="213" width="41.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="859.96" y="223.5" >cor..</text>
</g>
<g >
<title>??   (11 samples, 0.89%)</title><rect x="423.4" y="165" width="10.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="426.43" y="175.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#5   (16 samples, 1.30%)</title><rect x="1110.6" y="213" width="15.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1113.57" y="223.5" ></text>
</g>
<g >
<title>attempt7::get_inbetween_points::{closure#1   (57 samples, 4.62%)</title><rect x="263.6" y="165" width="54.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="266.61" y="175.5" >attem..</text>
</g>
<g >
<title>std::sys::unix::alloc::{impl#0   (4 samples, 0.32%)</title><rect x="142.1" y="69" width="3.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="145.07" y="79.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (81 samples, 6.57%)</title><rect x="329.6" y="229" width="77.6" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="332.64" y="239.5" >alloc::a..</text>
</g>
<g >
<title>hashbrown::raw::TableLayout::calculate_layout_for   (1 samples, 0.08%)</title><rect x="1025.4" y="229" width="1.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1028.39" y="239.5" ></text>
</g>
<g >
<title>attempt7::main   (1,233 samples, 100.00%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >attempt7::main  </text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;&gt;   (29 samples, 2.35%)</title><rect x="408.1" y="325" width="27.8" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="411.12" y="335.5" >c..</text>
</g>
<g >
<title>realloc   (1 samples, 0.08%)</title><rect x="1171.8" y="117" width="1.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1174.82" y="127.5" ></text>
</g>
<g >
<title>hashbrown::raw::sse2::Group::match_byte   (2 samples, 0.16%)</title><rect x="831.1" y="213" width="1.9" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="834.12" y="223.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (5 samples, 0.41%)</title><rect x="1167.0" y="261" width="4.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1170.03" y="271.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#23   (17 samples, 1.38%)</title><rect x="1091.4" y="229" width="16.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1094.43" y="239.5" ></text>
</g>
<g >
<title>attempt7::choose_next_point   (1,233 samples, 100.00%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >attempt7::choose_next_point  </text>
</g>
<g >
<title>free   (21 samples, 1.70%)</title><rect x="413.9" y="181" width="20.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="416.86" y="191.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (1 samples, 0.08%)</title><rect x="1176.6" y="181" width="1.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1179.60" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::reserve&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::make_hasher::{closure_env#0   (1 samples, 0.08%)</title><rect x="1188.1" y="309" width="0.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1191.09" y="319.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::grow_amortized&lt;(isize, isize), alloc::alloc::Global&gt;   (10 samples, 0.81%)</title><rect x="1065.6" y="181" width="9.6" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1068.59" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find_or_find_insert_slot&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (6 samples, 0.49%)</title><rect x="1154.6" y="293" width="5.7" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1157.59" y="303.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::extend_desugared&lt;(isize, isize), alloc::alloc::Global, core::iter::adapters::flatten::FlatMap&lt;core::ops::range::Range&lt;isize&gt;, core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::gen_all_points::{closure#0   (110 samples, 8.92%)</title><rect x="75.1" y="229" width="105.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="78.08" y="239.5" >alloc::vec::..</text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (1 samples, 0.08%)</title><rect x="1188.1" y="373" width="0.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1191.09" y="383.5" ></text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (27 samples, 2.19%)</title><rect x="1136.4" y="325" width="25.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1139.41" y="335.5" >h..</text>
</g>
<g >
<title>alloc::raw_vec::{impl#1   (1 samples, 0.08%)</title><rect x="1171.8" y="213" width="1.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1174.82" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::free_buckets&lt;alloc::alloc::Global&gt;   (2 samples, 0.16%)</title><rect x="1088.6" y="245" width="1.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1091.56" y="255.5" ></text>
</g>
<g >
<title>attempt7::get_inbetween_points::{closure#1   (4 samples, 0.32%)</title><rect x="1080.9" y="181" width="3.8" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1083.90" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::reserve&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1171.8" y="245" width="1.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1174.82" y="255.5" ></text>
</g>
<g >
<title>core::iter::adapters::map::{impl#2   (1 samples, 0.08%)</title><rect x="328.7" y="245" width="0.9" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="331.69" y="255.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (27 samples, 2.19%)</title><rect x="1136.4" y="341" width="25.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1139.41" y="351.5" >s..</text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (4 samples, 0.32%)</title><rect x="1084.7" y="277" width="3.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1087.73" y="287.5" ></text>
</g>
<g >
<title>__rust_dealloc   (1 samples, 0.08%)</title><rect x="1085.7" y="213" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1088.69" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::{impl#13   (9 samples, 0.73%)</title><rect x="1163.2" y="293" width="8.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1166.20" y="303.5" ></text>
</g>
<g >
<title>malloc   (4 samples, 0.32%)</title><rect x="1163.2" y="181" width="3.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1166.20" y="191.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys&lt;core::hash::sip::Sip13Rounds&gt;   (7 samples, 0.57%)</title><rect x="904.8" y="213" width="6.7" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="907.81" y="223.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::insert&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (5 samples, 0.41%)</title><rect x="1182.3" y="357" width="4.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1185.34" y="367.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (45 samples, 3.65%)</title><rect x="537.3" y="101" width="43.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="540.32" y="111.5" >core..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (2 samples, 0.16%)</title><rect x="249.3" y="165" width="1.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="252.25" y="175.5" ></text>
</g>
<g >
<title>core::hash::sip::SipHasher13::new_with_keys   (1 samples, 0.08%)</title><rect x="1144.1" y="245" width="0.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1147.06" y="255.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (62 samples, 5.03%)</title><rect x="911.5" y="245" width="59.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="914.51" y="255.5" >std::c..</text>
</g>
<g >
<title>malloc   (7 samples, 0.57%)</title><rect x="68.4" y="133" width="6.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="71.38" y="143.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each&lt;core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::get_inbetween_points::{closure_env#0   (1 samples, 0.08%)</title><rect x="327.7" y="213" width="1.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="330.73" y="223.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#23   (1 samples, 0.08%)</title><rect x="1176.6" y="245" width="1.0" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1179.60" y="255.5" ></text>
</g>
<g >
<title>core::ops::function::impls::{impl#3   (2 samples, 0.16%)</title><rect x="249.3" y="149" width="1.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="252.25" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::h2   (36 samples, 2.92%)</title><rect x="796.7" y="213" width="34.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="799.67" y="223.5" >ha..</text>
</g>
<g >
<title>hashbrown::map::HashMap&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::insert&lt;(isize, isize), (), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;   (27 samples, 2.19%)</title><rect x="1136.4" y="309" width="25.8" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1139.41" y="319.5" >h..</text>
</g>
<g >
<title>alloc::alloc::{impl#1   (1 samples, 0.08%)</title><rect x="1062.7" y="197" width="1.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1065.72" y="207.5" ></text>
</g>
<g >
<title>attempt7::gen_all_points   (2 samples, 0.16%)</title><rect x="1171.8" y="357" width="1.9" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="1174.82" y="367.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::insert_in_slot&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1186.2" y="309" width="0.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1189.17" y="319.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#5   (140 samples, 11.35%)</title><rect x="446.4" y="229" width="134.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="449.40" y="239.5" >core::hash::impl..</text>
</g>
<g >
<title>??   (54 samples, 4.38%)</title><rect x="354.5" y="165" width="51.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="357.53" y="175.5" >??  </text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::get&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (100 samples, 8.11%)</title><rect x="749.8" y="261" width="95.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="752.77" y="271.5" >hashbrown::..</text>
</g>
<g >
<title>malloc   (1 samples, 0.08%)</title><rect x="1079.9" y="149" width="1.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1082.94" y="159.5" ></text>
</g>
<g >
<title>attempt7::is_close_int   (32 samples, 2.60%)</title><rect x="284.7" y="149" width="30.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="287.66" y="159.5" >at..</text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (16 samples, 1.30%)</title><rect x="1062.7" y="277" width="15.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1065.72" y="287.5" ></text>
</g>
<g >
<title>alloc::vec::spec_extend::{impl#0   (15 samples, 1.22%)</title><rect x="1063.7" y="261" width="14.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1066.67" y="271.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::is_bucket_full   (1 samples, 0.08%)</title><rect x="1184.3" y="261" width="0.9" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1187.26" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::spec_extend::{impl#0   (110 samples, 8.92%)</title><rect x="75.1" y="245" width="105.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="78.08" y="255.5" >alloc::vec::..</text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::allocation_info   (1 samples, 0.08%)</title><rect x="434.9" y="213" width="1.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="437.91" y="223.5" ></text>
</g>
<g >
<title>core::hash::sip::u8to64_le   (2 samples, 0.16%)</title><rect x="1100.0" y="117" width="2.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1103.04" y="127.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (3 samples, 0.24%)</title><rect x="1176.6" y="277" width="2.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1179.60" y="287.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (1 samples, 0.08%)</title><rect x="1062.7" y="181" width="1.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1065.72" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::insert_in_slot&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (2 samples, 0.16%)</title><rect x="1160.3" y="293" width="1.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1163.33" y="303.5" ></text>
</g>
<g >
<title>hashbrown::map::make_hash&lt;(isize, isize), std::collections::hash::map::RandomState&gt;   (37 samples, 3.00%)</title><rect x="1090.5" y="277" width="35.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1093.47" y="287.5" >has..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::reserve&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1171.8" y="229" width="1.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1174.82" y="239.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::ptr&lt;(isize, isize), alloc::alloc::Global&gt;   (3 samples, 0.24%)</title><rect x="81.8" y="197" width="2.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="84.78" y="207.5" ></text>
</g>
<g >
<title>core::ptr::read&lt;(isize, isize)&gt;   (7 samples, 0.57%)</title><rect x="47.3" y="309" width="6.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="50.32" y="319.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::for_each::call::{closure#0   (1 samples, 0.08%)</title><rect x="327.7" y="149" width="1.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="330.73" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::drop_inner_table&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (27 samples, 2.19%)</title><rect x="410.0" y="245" width="25.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="413.03" y="255.5" >h..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::allocate_in&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1062.7" y="213" width="1.0" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1065.72" y="223.5" ></text>
</g>
<g >
<title>std::collections::hash::set::{impl#3   (43 samples, 3.49%)</title><rect x="1021.6" y="325" width="41.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1024.57" y="335.5" >std..</text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#5   (11 samples, 0.89%)</title><rect x="43.5" y="325" width="10.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="46.50" y="335.5" ></text>
</g>
<g >
<title>core::core_arch::x86::sse2::_mm_movemask_epi8   (1 samples, 0.08%)</title><rect x="1181.4" y="213" width="0.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1184.39" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner   (6 samples, 0.49%)</title><rect x="1154.6" y="277" width="5.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1157.59" y="287.5" ></text>
</g>
<g >
<title>hashbrown::set::{impl#0   (1 samples, 0.08%)</title><rect x="1189.0" y="357" width="1.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1192.04" y="367.5" ></text>
</g>
<g >
<title>core::ptr::read_volatile&lt;u8&gt;   (1 samples, 0.08%)</title><rect x="319.1" y="133" width="1.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="322.12" y="143.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::record_item_insert_at   (1 samples, 0.08%)</title><rect x="1186.2" y="293" width="0.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1189.17" y="303.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::free_buckets&lt;alloc::alloc::Global&gt;   (26 samples, 2.11%)</title><rect x="411.0" y="229" width="24.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="413.99" y="239.5" >h..</text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (8 samples, 0.65%)</title><rect x="67.4" y="165" width="7.7" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="70.42" y="175.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc   (4 samples, 0.32%)</title><rect x="1163.2" y="197" width="3.8" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1166.20" y="207.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc   (24 samples, 1.95%)</title><rect x="411.9" y="197" width="23.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="414.95" y="207.5" >a..</text>
</g>
<g >
<title>realloc   (46 samples, 3.73%)</title><rect x="96.1" y="85" width="44.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="99.13" y="95.5" >real..</text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::find_or_find_insert_slot&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (2 samples, 0.16%)</title><rect x="1184.3" y="309" width="1.9" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1187.26" y="319.5" ></text>
</g>
<g >
<title>alloc::raw_vec::finish_grow&lt;alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1171.8" y="181" width="1.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1174.82" y="191.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity&lt;(isize, isize)&gt;   (1 samples, 0.08%)</title><rect x="1079.9" y="261" width="1.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1082.94" y="271.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::resize_inner&lt;alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1188.1" y="261" width="0.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1191.09" y="271.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(isize, isize), alloc::alloc::Global&gt;&gt;   (82 samples, 6.65%)</title><rect x="329.6" y="325" width="78.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="332.64" y="335.5" >core::ptr..</text>
</g>
<g >
<title>attempt7::choose_next_point   (1,233 samples, 100.00%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >attempt7::choose_next_point  </text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (1 samples, 0.08%)</title><rect x="1079.9" y="181" width="1.0" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1082.94" y="191.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::insert_in_slot&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (4 samples, 0.32%)</title><rect x="1017.7" y="277" width="3.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1020.74" y="287.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (10 samples, 0.81%)</title><rect x="1145.0" y="261" width="9.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1148.02" y="271.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::{impl#14   (4 samples, 0.32%)</title><rect x="1084.7" y="309" width="3.9" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1087.73" y="319.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.08%)</title><rect x="1189.0" y="261" width="1.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1192.04" y="271.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.08%)</title><rect x="405.2" y="149" width="1.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="408.25" y="159.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (41 samples, 3.33%)</title><rect x="931.6" y="197" width="39.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="934.61" y="207.5" >cor..</text>
</g>
<g >
<title>core::hash::sip::{impl#5   (62 samples, 5.03%)</title><rect x="911.5" y="213" width="59.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="914.51" y="223.5" >core::..</text>
</g>
<g >
<title>core::hash::sip::{impl#5   (6 samples, 0.49%)</title><rect x="1138.3" y="149" width="5.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1141.32" y="159.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (8 samples, 0.65%)</title><rect x="1066.5" y="149" width="7.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1069.55" y="159.5" ></text>
</g>
<g >
<title>??   (69 samples, 5.60%)</title><rect x="340.2" y="181" width="66.0" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="343.17" y="191.5" >??  </text>
</g>
<g >
<title>core::result::Result&lt;core::ptr::non_null::NonNull&lt;[u8]&gt;, core::alloc::AllocError&gt;::map_err&lt;core::ptr::non_null::NonNull&lt;[u8]&gt;, core::alloc::AllocError, alloc::collections::TryReserveError, alloc::raw_vec::finish_grow::{closure_env#1   (1 samples, 0.08%)</title><rect x="1074.2" y="149" width="1.0" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="1077.20" y="159.5" ></text>
</g>
<g >
<title>hashbrown::raw::{impl#15   (14 samples, 1.14%)</title><rect x="1049.3" y="261" width="13.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1052.32" y="271.5" ></text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping&lt;((isize, isize), ())&gt;   (11 samples, 0.89%)</title><rect x="1051.2" y="229" width="10.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1054.23" y="239.5" ></text>
</g>
<g >
<title>core::iter::adapters::map::{impl#2   (1 samples, 0.08%)</title><rect x="327.7" y="197" width="1.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="330.73" y="207.5" ></text>
</g>
<g >
<title>hashbrown::raw::bitmask::{impl#3   (5 samples, 0.41%)</title><rect x="988.1" y="245" width="4.8" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="991.07" y="255.5" ></text>
</g>
<g >
<title>??   (1 samples, 0.08%)</title><rect x="1170.9" y="229" width="0.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1173.86" y="239.5" ></text>
</g>
<g >
<title>alloc::alloc::dealloc   (81 samples, 6.57%)</title><rect x="329.6" y="213" width="77.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="332.64" y="223.5" >alloc::a..</text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (131 samples, 10.62%)</title><rect x="455.0" y="165" width="125.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="458.01" y="175.5" >core::hash::Has..</text>
</g>
<g >
<title>hashbrown::set::{impl#0   (10 samples, 0.81%)</title><rect x="1162.2" y="325" width="9.6" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1165.25" y="335.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (6 samples, 0.49%)</title><rect x="1138.3" y="181" width="5.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1141.32" y="191.5" ></text>
</g>
<g >
<title>core::hash::Hasher::write_usize&lt;std::collections::hash::map::DefaultHasher&gt;   (42 samples, 3.41%)</title><rect x="857.9" y="181" width="40.2" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="860.92" y="191.5" >cor..</text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::new_uninitialized&lt;alloc::alloc::Global&gt;   (26 samples, 2.11%)</title><rect x="1024.4" y="245" width="24.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1027.44" y="255.5" >h..</text>
</g>
<g >
<title>alloc::raw_vec::{impl#1   (69 samples, 5.60%)</title><rect x="84.6" y="181" width="66.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="87.65" y="191.5" >alloc::..</text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (37 samples, 3.00%)</title><rect x="1090.5" y="261" width="35.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1093.47" y="271.5" >cor..</text>
</g>
<g >
<title>alloc::vec::spec_extend::{impl#0   (2 samples, 0.16%)</title><rect x="1171.8" y="277" width="1.9" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1174.82" y="287.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt7::get_inbetween_points::{closure_env#1   (4 samples, 0.32%)</title><rect x="1080.9" y="245" width="3.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1083.90" y="255.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (24 samples, 1.95%)</title><rect x="1026.4" y="213" width="22.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1029.35" y="223.5" >a..</text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map::check::{closure#0   (4 samples, 0.32%)</title><rect x="1080.9" y="213" width="3.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1083.90" y="223.5" ></text>
</g>
<g >
<title>__rust_alloc   (1 samples, 0.08%)</title><rect x="318.2" y="133" width="0.9" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="321.16" y="143.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys&lt;core::hash::sip::Sip13Rounds&gt;   (1 samples, 0.08%)</title><rect x="1144.1" y="229" width="0.9" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1147.06" y="239.5" ></text>
</g>
<g >
<title>alloc::alloc::{impl#1   (10 samples, 0.81%)</title><rect x="318.2" y="181" width="9.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="321.16" y="191.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (17 samples, 1.38%)</title><rect x="1138.3" y="277" width="16.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1141.32" y="287.5" ></text>
</g>
<g >
<title>std::f64::{impl#0   (1 samples, 0.08%)</title><rect x="250.2" y="117" width="1.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="253.21" y="127.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset&lt;core::hash::sip::Sip13Rounds&gt;   (7 samples, 0.57%)</title><rect x="904.8" y="197" width="6.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="907.81" y="207.5" ></text>
</g>
<g >
<title>core::iter::adapters::flatten::{impl#3   (3 samples, 0.24%)</title><rect x="1075.2" y="229" width="2.8" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1078.16" y="239.5" ></text>
</g>
<g >
<title>core::iter::adapters::flatten::{impl#18   (3 samples, 0.24%)</title><rect x="180.3" y="229" width="2.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="183.35" y="239.5" ></text>
</g>
<g >
<title>core::iter::adapters::fuse::{impl#2   (1 samples, 0.08%)</title><rect x="181.3" y="213" width="1.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="184.31" y="223.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::with_capacity&lt;(isize, isize)&gt;   (8 samples, 0.65%)</title><rect x="67.4" y="245" width="7.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="70.42" y="255.5" ></text>
</g>
<g >
<title>core::iter::traits::iterator::Iterator::find_map&lt;core::ops::range::Range&lt;isize&gt;, (isize, isize), &amp;mut attempt7::get_inbetween_points::{closure_env#1   (3 samples, 0.24%)</title><rect x="248.3" y="197" width="2.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="251.30" y="207.5" ></text>
</g>
<g >
<title>roundf64   (1 samples, 0.08%)</title><rect x="250.2" y="101" width="1.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="253.21" y="111.5" ></text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.08%)</title><rect x="1024.4" y="229" width="1.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1027.44" y="239.5" ></text>
</g>
<g >
<title>??   (2 samples, 0.16%)</title><rect x="246.4" y="101" width="1.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="249.38" y="111.5" ></text>
</g>
<g >
<title>core::hash::sip::u8to64_le   (2 samples, 0.16%)</title><rect x="1141.2" y="133" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1144.19" y="143.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;(isize, isize), alloc::alloc::Global&gt;::reserve&lt;(isize, isize), alloc::alloc::Global&gt;   (69 samples, 5.60%)</title><rect x="84.6" y="213" width="66.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="87.65" y="223.5" >alloc::..</text>
</g>
<g >
<title>alloc::vec::spec_from_iter::{impl#0   (2 samples, 0.16%)</title><rect x="1171.8" y="309" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.82" y="319.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::is_bucket_full   (8 samples, 0.65%)</title><rect x="980.4" y="229" width="7.7" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="983.41" y="239.5" ></text>
</g>
<g >
<title>core::hash::impls::{impl#5   (1 samples, 0.08%)</title><rect x="1176.6" y="261" width="1.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1179.60" y="271.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc   (8 samples, 0.65%)</title><rect x="67.4" y="149" width="7.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="70.42" y="159.5" ></text>
</g>
<g >
<title>core::core_arch::x86::sse2::_mm_movemask_epi8   (12 samples, 0.97%)</title><rect x="833.0" y="181" width="11.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="836.03" y="191.5" ></text>
</g>
<g >
<title>core::hash::sip::u8to64_le   (13 samples, 1.05%)</title><rect x="524.9" y="101" width="12.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="527.87" y="111.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#8   (1 samples, 0.08%)</title><rect x="1143.1" y="133" width="1.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1146.11" y="143.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (2 samples, 0.16%)</title><rect x="1171.8" y="293" width="1.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1174.82" y="303.5" ></text>
</g>
<g >
<title>alloc::vec::spec_from_iter_nested::{impl#0   (102 samples, 8.27%)</title><rect x="220.5" y="261" width="97.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="223.54" y="271.5" >alloc::vec:..</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;(isize, isize), alloc::alloc::Global&gt;::grow_amortized&lt;(isize, isize), alloc::alloc::Global&gt;   (1 samples, 0.08%)</title><rect x="1171.8" y="197" width="1.0" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1174.82" y="207.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::grow_impl   (8 samples, 0.65%)</title><rect x="1066.5" y="133" width="7.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1069.55" y="143.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::new_with_keys&lt;core::hash::sip::Sip13Rounds&gt;   (13 samples, 1.05%)</title><rect x="590.0" y="197" width="12.4" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="592.95" y="207.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;&gt;   (2 samples, 0.16%)</title><rect x="1088.6" y="325" width="1.9" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1091.56" y="335.5" ></text>
</g>
<g >
<title>std::collections::hash::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, (isize, isize)&gt;   (6 samples, 0.49%)</title><rect x="1176.6" y="357" width="5.7" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1179.60" y="367.5" ></text>
</g>
<g >
<title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::{impl#14   (82 samples, 6.65%)</title><rect x="329.6" y="293" width="78.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="332.64" y="303.5" >core::ptr..</text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl   (4 samples, 0.32%)</title><rect x="1163.2" y="213" width="3.8" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1166.20" y="223.5" ></text>
</g>
<g >
<title>alloc::raw_vec::{impl#3   (82 samples, 6.65%)</title><rect x="329.6" y="245" width="78.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="332.64" y="255.5" >alloc::ra..</text>
</g>
<g >
<title>hashbrown::raw::{impl#15   (5 samples, 0.41%)</title><rect x="1167.0" y="277" width="4.8" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1170.03" y="287.5" ></text>
</g>
<g >
<title>std::collections::hash::map::{impl#86   (2 samples, 0.16%)</title><rect x="1177.6" y="261" width="1.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1180.56" y="271.5" ></text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once&lt;fn(&amp;mut core::iter::adapters::map::Map&lt;core::ops::range::Range&lt;isize&gt;, attempt7::gen_all_points::{closure#0   (1 samples, 0.08%)</title><rect x="1076.1" y="181" width="1.0" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1079.12" y="191.5" ></text>
</g>
<g >
<title>core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;::reset&lt;core::hash::sip::Sip13Rounds&gt;   (1 samples, 0.08%)</title><rect x="1144.1" y="213" width="0.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1147.06" y="223.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTable&lt;((isize, isize), ()), alloc::alloc::Global&gt;::get&lt;((isize, isize), ()), alloc::alloc::Global, hashbrown::map::equivalent_key::{closure_env#0   (3 samples, 0.24%)</title><rect x="1179.5" y="293" width="2.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1182.47" y="303.5" ></text>
</g>
<g >
<title>core::hash::sip::{impl#4   (10 samples, 0.81%)</title><rect x="1145.0" y="245" width="9.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1148.02" y="255.5" ></text>
</g>
<g >
<title>core::hash::BuildHasher::hash_one&lt;std::collections::hash::map::RandomState, &amp;(isize, isize)&gt;   (326 samples, 26.44%)</title><rect x="437.8" y="245" width="312.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="440.79" y="255.5" >core::hash::BuildHasher::hash_one&lt;std::col..</text>
</g>
<g >
<title>??   (3 samples, 0.24%)</title><rect x="1168.0" y="229" width="2.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1170.99" y="239.5" ></text>
</g>
<g >
<title>hashbrown::map::{impl#0   (1 samples, 0.08%)</title><rect x="1189.0" y="341" width="1.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1192.04" y="351.5" ></text>
</g>
<g >
<title>core::iter::adapters::filter_map::{impl#2   (70 samples, 5.68%)</title><rect x="251.2" y="245" width="67.0" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="254.17" y="255.5" >core::i..</text>
</g>
<g >
<title>hashbrown::set::HashSet&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global&gt;::contains&lt;(isize, isize), std::collections::hash::map::RandomState, alloc::alloc::Global, (isize, isize)&gt;   (48 samples, 3.89%)</title><rect x="1090.5" y="325" width="45.9" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1093.47" y="335.5" >hash..</text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::drop_inner_table&lt;((isize, isize), ()), alloc::alloc::Global&gt;   (2 samples, 0.16%)</title><rect x="1088.6" y="261" width="1.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1091.56" y="271.5" ></text>
</g>
<g >
<title>alloc::vec::into_iter::{impl#14   (82 samples, 6.65%)</title><rect x="329.6" y="309" width="78.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="332.64" y="319.5" >alloc::ve..</text>
</g>
<g >
<title>core::ptr::mut_ptr::{impl#0   (1 samples, 0.08%)</title><rect x="844.5" y="165" width="1.0" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="847.52" y="175.5" ></text>
</g>
<g >
<title>hashbrown::raw::RawTableInner::fix_insert_slot   (1 samples, 0.08%)</title><rect x="1184.3" y="277" width="0.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1187.26" y="287.5" ></text>
</g>
<g >
<title>core::iter::adapters::map::{impl#2   (1 samples, 0.08%)</title><rect x="1076.1" y="165" width="1.0" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1079.12" y="175.5" ></text>
</g>
</g>
</svg>
