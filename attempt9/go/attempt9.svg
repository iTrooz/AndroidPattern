<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.26%)</title><rect x="340.0" y="133" width="3.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="343.03" y="143.5" ></text>
</g>
<g >
<title>runtime.mcall (4 samples, 1.06%)</title><rect x="1168.2" y="373" width="12.5" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1171.21" y="383.5" ></text>
</g>
<g >
<title>runtime.growslice (7 samples, 1.85%)</title><rect x="1127.7" y="261" width="21.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1130.73" y="271.5" >r..</text>
</g>
<g >
<title>runtime.(*scavengerState).run (1 samples, 0.26%)</title><rect x="10.0" y="357" width="3.1" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (1 samples, 0.26%)</title><rect x="1000.1" y="165" width="3.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1003.08" y="175.5" ></text>
</g>
<g >
<title>math.Mod (2 samples, 0.53%)</title><rect x="1071.7" y="245" width="6.2" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1074.69" y="255.5" ></text>
</g>
<g >
<title>runtime.releasem (1 samples, 0.26%)</title><rect x="1040.6" y="229" width="3.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1043.55" y="239.5" ></text>
</g>
<g >
<title>runtime.scanstack (3 samples, 0.79%)</title><rect x="59.8" y="277" width="9.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="62.82" y="287.5" ></text>
</g>
<g >
<title>runtime.pageIndexOf (1 samples, 0.26%)</title><rect x="31.8" y="293" width="3.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="34.79" y="303.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (2 samples, 0.53%)</title><rect x="1003.2" y="149" width="6.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1006.19" y="159.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination (1 samples, 0.26%)</title><rect x="38.0" y="341" width="3.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="41.02" y="351.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.26%)</title><rect x="340.0" y="165" width="3.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="343.03" y="175.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.26%)</title><rect x="343.1" y="213" width="3.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="346.14" y="223.5" ></text>
</g>
<g >
<title>runtime.notetsleep (2 samples, 0.53%)</title><rect x="41.1" y="293" width="6.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="44.13" y="303.5" ></text>
</g>
<g >
<title>math.normalize (1 samples, 0.26%)</title><rect x="526.8" y="197" width="3.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="529.83" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).initHeapBits (1 samples, 0.26%)</title><rect x="997.0" y="149" width="3.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="999.97" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).freeSpan (6 samples, 1.58%)</title><rect x="16.2" y="341" width="18.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="19.23" y="351.5" ></text>
</g>
<g >
<title>math.IsInf (1 samples, 0.26%)</title><rect x="514.4" y="197" width="3.1" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="517.38" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mspan).init (1 samples, 0.26%)</title><rect x="993.9" y="69" width="3.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="996.85" y="79.5" ></text>
</g>
<g >
<title>runtime.morestack (2 samples, 0.53%)</title><rect x="1180.7" y="373" width="6.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1183.66" y="383.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (6 samples, 1.58%)</title><rect x="984.5" y="197" width="18.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="987.51" y="207.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (1 samples, 0.26%)</title><rect x="50.5" y="293" width="3.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="53.47" y="303.5" ></text>
</g>
<g >
<title>runtime.releasem (1 samples, 0.26%)</title><rect x="1084.1" y="229" width="3.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1087.14" y="239.5" ></text>
</g>
<g >
<title>main.chooseNextPoint (185 samples, 48.81%)</title><rect x="115.9" y="261" width="575.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="118.86" y="271.5" >main.chooseNextPoint</text>
</g>
<g >
<title>runtime.roundupsize (1 samples, 0.26%)</title><rect x="688.7" y="229" width="3.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="691.73" y="239.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.26%)</title><rect x="1183.8" y="293" width="3.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1186.77" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.26%)</title><rect x="330.7" y="133" width="3.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="333.69" y="143.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (1 samples, 0.26%)</title><rect x="59.8" y="229" width="3.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="62.82" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (6 samples, 1.58%)</title><rect x="984.5" y="213" width="18.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="987.51" y="223.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (3 samples, 0.79%)</title><rect x="59.8" y="261" width="9.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="62.82" y="271.5" ></text>
</g>
<g >
<title>runtime.heapBits.nextFast (2 samples, 0.53%)</title><rect x="53.6" y="309" width="6.2" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="56.59" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (2 samples, 0.53%)</title><rect x="327.6" y="181" width="6.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="330.57" y="191.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (2 samples, 0.53%)</title><rect x="41.1" y="325" width="6.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="44.13" y="335.5" ></text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.53%)</title><rect x="1140.2" y="245" width="6.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1143.18" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (1 samples, 0.26%)</title><rect x="1000.1" y="181" width="3.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1003.08" y="191.5" ></text>
</g>
<g >
<title>main.chooseNextPoint (345 samples, 91.03%)</title><rect x="94.1" y="341" width="1074.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="97.06" y="351.5" >main.chooseNextPoint</text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.26%)</title><rect x="330.7" y="149" width="3.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="333.69" y="159.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (3 samples, 0.79%)</title><rect x="1012.5" y="229" width="9.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1015.53" y="239.5" ></text>
</g>
<g >
<title>main.containsPoint (45 samples, 11.87%)</title><rect x="691.8" y="261" width="140.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="694.85" y="271.5" >main.containsPoint</text>
</g>
<g >
<title>runtime.(*pageAlloc).free (3 samples, 0.79%)</title><rect x="16.2" y="277" width="9.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="19.23" y="287.5" ></text>
</g>
<g >
<title>runtime.sweepone (8 samples, 2.11%)</title><rect x="13.1" y="357" width="24.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="16.11" y="367.5" >r..</text>
</g>
<g >
<title>runtime.deductAssistCredit (1 samples, 0.26%)</title><rect x="1134.0" y="229" width="3.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1136.96" y="239.5" ></text>
</g>
<g >
<title>main.getInbetweenPoints (10 samples, 2.64%)</title><rect x="1056.1" y="261" width="31.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1059.12" y="271.5" >ma..</text>
</g>
<g >
<title>runtime.deductAssistCredit (2 samples, 0.53%)</title><rect x="336.9" y="197" width="6.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="339.91" y="207.5" ></text>
</g>
<g >
<title>math.frexp (1 samples, 0.26%)</title><rect x="1071.7" y="213" width="3.1" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1074.69" y="223.5" ></text>
</g>
<g >
<title>runtime.mallocgc (21 samples, 5.54%)</title><rect x="277.8" y="213" width="65.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="280.76" y="223.5" >runtime..</text>
</g>
<g >
<title>runtime.(*mheap).initSpan (1 samples, 0.26%)</title><rect x="1155.8" y="117" width="3.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1158.75" y="127.5" ></text>
</g>
<g >
<title>main.chooseNextPoint (316 samples, 83.38%)</title><rect x="103.4" y="277" width="983.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="106.40" y="287.5" >main.chooseNextPoint</text>
</g>
<g >
<title>runtime.deductAssistCredit (1 samples, 0.26%)</title><rect x="841.3" y="213" width="3.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="844.29" y="223.5" ></text>
</g>
<g >
<title>runtime.forEachP (2 samples, 0.53%)</title><rect x="41.1" y="309" width="6.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="44.13" y="319.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (1 samples, 0.26%)</title><rect x="1155.8" y="133" width="3.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1158.75" y="143.5" ></text>
</g>
<g >
<title>math.IsNaN (1 samples, 0.26%)</title><rect x="517.5" y="197" width="3.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="520.49" y="207.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.26%)</title><rect x="1006.3" y="85" width="3.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1009.31" y="95.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (1 samples, 0.26%)</title><rect x="1155.8" y="197" width="3.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1158.75" y="207.5" ></text>
</g>
<g >
<title>main.genAllPoints (12 samples, 3.17%)</title><rect x="1112.2" y="277" width="37.3" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1115.16" y="287.5" >mai..</text>
</g>
<g >
<title>math.IsInf (4 samples, 1.06%)</title><rect x="529.9" y="213" width="12.5" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="532.95" y="223.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (1 samples, 0.26%)</title><rect x="10.0" y="373" width="3.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Uint64).Add (1 samples, 0.26%)</title><rect x="1000.1" y="149" width="3.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1003.08" y="159.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).pop (1 samples, 0.26%)</title><rect x="34.9" y="325" width="3.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="37.91" y="335.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.79%)</title><rect x="987.6" y="133" width="9.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="990.63" y="143.5" ></text>
</g>
<g >
<title>math.normalize (1 samples, 0.26%)</title><rect x="1074.8" y="213" width="3.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1077.80" y="223.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (1 samples, 0.26%)</title><rect x="340.0" y="85" width="3.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="343.03" y="95.5" ></text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.26%)</title><rect x="1183.8" y="309" width="3.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1186.77" y="319.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.26%)</title><rect x="847.5" y="229" width="3.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="850.52" y="239.5" ></text>
</g>
<g >
<title>runtime.(*pallocBits).summarize (1 samples, 0.26%)</title><rect x="19.3" y="245" width="3.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="22.34" y="255.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (2 samples, 0.53%)</title><rect x="1003.2" y="213" width="6.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1006.19" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.26%)</title><rect x="1155.8" y="165" width="3.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1158.75" y="175.5" ></text>
</g>
<g >
<title>main.chooseNextPoint (345 samples, 91.03%)</title><rect x="94.1" y="325" width="1074.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="97.06" y="335.5" >main.chooseNextPoint</text>
</g>
<g >
<title>main.getInbetweenPoints (99 samples, 26.12%)</title><rect x="383.6" y="245" width="308.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="386.61" y="255.5" >main.getInbetweenPoints</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.26%)</title><rect x="1009.4" y="197" width="3.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1012.42" y="207.5" ></text>
</g>
<g >
<title>runtime.spanOfUnchecked (1 samples, 0.26%)</title><rect x="90.9" y="309" width="3.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="93.95" y="319.5" ></text>
</g>
<g >
<title>runtime.(*gcBitsArena).tryAlloc (1 samples, 0.26%)</title><rect x="990.7" y="69" width="3.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="993.74" y="79.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.26%)</title><rect x="1174.4" y="309" width="3.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1177.43" y="319.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.26%)</title><rect x="841.3" y="117" width="3.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="844.29" y="127.5" ></text>
</g>
<g >
<title>runtime.(*consistentHeapStats).acquire (1 samples, 0.26%)</title><rect x="327.6" y="165" width="3.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="330.57" y="175.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (18 samples, 4.75%)</title><rect x="38.0" y="373" width="56.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="41.02" y="383.5" >runti..</text>
</g>
<g >
<title>runtime.(*scavengeIndex).free (1 samples, 0.26%)</title><rect x="22.5" y="261" width="3.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="25.45" y="271.5" ></text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.26%)</title><rect x="1155.8" y="261" width="3.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1158.75" y="271.5" ></text>
</g>
<g >
<title>runtime.newstack (2 samples, 0.53%)</title><rect x="1180.7" y="357" width="6.2" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1183.66" y="367.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.26%)</title><rect x="1009.4" y="149" width="3.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1012.42" y="159.5" ></text>
</g>
<g >
<title>runtime.markroot (4 samples, 1.06%)</title><rect x="59.8" y="309" width="12.5" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="62.82" y="319.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (3 samples, 0.79%)</title><rect x="59.8" y="293" width="9.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="62.82" y="303.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func4 (1 samples, 0.26%)</title><rect x="38.0" y="309" width="3.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="41.02" y="319.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.26%)</title><rect x="841.3" y="133" width="3.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="844.29" y="143.5" ></text>
</g>
<g >
<title>runtime.growslice (1 samples, 0.26%)</title><rect x="1109.1" y="261" width="3.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1112.05" y="271.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (3 samples, 0.79%)</title><rect x="38.0" y="357" width="9.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="41.02" y="367.5" ></text>
</g>
<g >
<title>math.Mod (31 samples, 8.18%)</title><rect x="508.2" y="229" width="96.5" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="511.15" y="239.5" >math.Mod</text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.53%)</title><rect x="1003.2" y="181" width="6.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1006.19" y="191.5" ></text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.26%)</title><rect x="38.0" y="293" width="3.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="41.02" y="303.5" ></text>
</g>
<g >
<title>runtime.(*mspan).nextFreeIndex (1 samples, 0.26%)</title><rect x="333.8" y="181" width="3.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="336.80" y="191.5" ></text>
</g>
<g >
<title>main.exclRange (6 samples, 1.58%)</title><rect x="832.0" y="261" width="18.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="834.95" y="271.5" ></text>
</g>
<g >
<title>runtime.scanblock (2 samples, 0.53%)</title><rect x="62.9" y="245" width="6.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="65.93" y="255.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.26%)</title><rect x="62.9" y="229" width="3.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="65.93" y="239.5" ></text>
</g>
<g >
<title>runtime.stealWork (1 samples, 0.26%)</title><rect x="1177.5" y="309" width="3.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1180.55" y="319.5" ></text>
</g>
<g >
<title>runtime.growslice (41 samples, 10.82%)</title><rect x="240.4" y="229" width="127.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="243.40" y="239.5" >runtime.growslice</text>
</g>
<g >
<title>math.Frexp (2 samples, 0.53%)</title><rect x="1071.7" y="229" width="6.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1074.69" y="239.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.26%)</title><rect x="340.0" y="181" width="3.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="343.03" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.26%)</title><rect x="330.7" y="101" width="3.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="333.69" y="111.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (1 samples, 0.26%)</title><rect x="1003.2" y="69" width="3.1" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1006.19" y="79.5" ></text>
</g>
<g >
<title>runtime.notesleep (2 samples, 0.53%)</title><rect x="1168.2" y="293" width="6.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1171.21" y="303.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.26%)</title><rect x="340.0" y="69" width="3.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="343.03" y="79.5" ></text>
</g>
<g >
<title>runtime.gcmarknewobject (1 samples, 0.26%)</title><rect x="844.4" y="213" width="3.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="847.41" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.26%)</title><rect x="1155.8" y="181" width="3.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1158.75" y="191.5" ></text>
</g>
<g >
<title>main.chooseNextPoint (3 samples, 0.79%)</title><rect x="209.3" y="245" width="9.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="212.26" y="255.5" ></text>
</g>
<g >
<title>math.normalize (1 samples, 0.26%)</title><rect x="558.0" y="197" width="3.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="560.97" y="207.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.26%)</title><rect x="1180.7" y="245" width="3.1" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="1183.66" y="255.5" ></text>
</g>
<g >
<title>runtime.futexsleep (1 samples, 0.26%)</title><rect x="44.2" y="261" width="3.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="47.25" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (3 samples, 0.79%)</title><rect x="987.6" y="101" width="9.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="990.63" y="111.5" ></text>
</g>
<g >
<title>runtime.mallocgc (22 samples, 5.80%)</title><rect x="944.0" y="229" width="68.5" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="947.04" y="239.5" >runtime..</text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.26%)</title><rect x="1180.7" y="325" width="3.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1183.66" y="335.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.53%)</title><rect x="1130.8" y="245" width="6.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1133.84" y="255.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (1 samples, 0.26%)</title><rect x="841.3" y="101" width="3.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="844.29" y="111.5" ></text>
</g>
<g >
<title>math.Ldexp (4 samples, 1.06%)</title><rect x="548.6" y="213" width="12.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="551.63" y="223.5" ></text>
</g>
<g >
<title>runtime.bgsweep (8 samples, 2.11%)</title><rect x="13.1" y="373" width="24.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="16.11" y="383.5" >r..</text>
</g>
<g >
<title>runtime.(*mcache).nextFree (1 samples, 0.26%)</title><rect x="1155.8" y="245" width="3.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1158.75" y="255.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.26%)</title><rect x="1155.8" y="213" width="3.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1158.75" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (3 samples, 0.79%)</title><rect x="987.6" y="149" width="9.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="990.63" y="159.5" ></text>
</g>
<g >
<title>runtime.markroot (1 samples, 0.26%)</title><rect x="340.0" y="101" width="3.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="343.03" y="111.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (2 samples, 0.53%)</title><rect x="1180.7" y="341" width="6.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1183.66" y="351.5" ></text>
</g>
<g >
<title>runtime.roundupsize (4 samples, 1.06%)</title><rect x="1043.7" y="245" width="12.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1046.67" y="255.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bitp (1 samples, 0.26%)</title><rect x="69.2" y="261" width="3.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="72.16" y="271.5" ></text>
</g>
<g >
<title>runtime.memmove (3 samples, 0.79%)</title><rect x="346.3" y="213" width="9.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="349.25" y="223.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (2 samples, 0.53%)</title><rect x="1003.2" y="165" width="6.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1006.19" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (1 samples, 0.26%)</title><rect x="330.7" y="165" width="3.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="333.69" y="175.5" ></text>
</g>
<g >
<title>runtime.(*sysMemStat).add (1 samples, 0.26%)</title><rect x="25.6" y="277" width="3.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="28.57" y="287.5" ></text>
</g>
<g >
<title>main.containsPoint (1 samples, 0.26%)</title><rect x="1162.0" y="293" width="3.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1164.98" y="303.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (1 samples, 0.26%)</title><rect x="1146.4" y="245" width="3.1" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1149.41" y="255.5" ></text>
</g>
<g >
<title>runtime.releasem (2 samples, 0.53%)</title><rect x="361.8" y="213" width="6.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="364.82" y="223.5" ></text>
</g>
<g >
<title>runtime.getMCache (1 samples, 0.26%)</title><rect x="1077.9" y="229" width="3.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1080.92" y="239.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (15 samples, 3.96%)</title><rect x="47.4" y="341" width="46.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="50.36" y="351.5" >runt..</text>
</g>
<g >
<title>runtime.(*mheap).freeSpanLocked (4 samples, 1.06%)</title><rect x="16.2" y="293" width="12.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="19.23" y="303.5" ></text>
</g>
<g >
<title>runtime.growslice (3 samples, 0.79%)</title><rect x="1077.9" y="245" width="9.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1080.92" y="255.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.26%)</title><rect x="841.3" y="165" width="3.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="844.29" y="175.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (2 samples, 0.53%)</title><rect x="16.2" y="261" width="6.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="19.23" y="271.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (1 samples, 0.26%)</title><rect x="1180.7" y="197" width="3.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1183.66" y="207.5" ></text>
</g>
<g >
<title>runtime.releasem (1 samples, 0.26%)</title><rect x="685.6" y="213" width="3.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="688.62" y="223.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc1 (1 samples, 0.26%)</title><rect x="841.3" y="149" width="3.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="844.29" y="159.5" ></text>
</g>
<g >
<title>runtime.markroot (2 samples, 0.53%)</title><rect x="1003.2" y="117" width="6.2" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1006.19" y="127.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep.(*mheap).freeSpan.func2 (6 samples, 1.58%)</title><rect x="16.2" y="309" width="18.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="19.23" y="319.5" ></text>
</g>
<g >
<title>runtime.roundupsize (5 samples, 1.32%)</title><rect x="368.0" y="229" width="15.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="371.05" y="239.5" ></text>
</g>
<g >
<title>math.mod (14 samples, 3.69%)</title><rect x="561.1" y="213" width="43.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="564.08" y="223.5" >math..</text>
</g>
<g >
<title>runtime.growslice (46 samples, 12.14%)</title><rect x="900.4" y="245" width="143.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="903.45" y="255.5" >runtime.growslice</text>
</g>
<g >
<title>runtime.gcDrainN (1 samples, 0.26%)</title><rect x="340.0" y="117" width="3.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="343.03" y="127.5" ></text>
</g>
<g >
<title>runtime.scanobject (6 samples, 1.58%)</title><rect x="72.3" y="309" width="18.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="75.27" y="319.5" ></text>
</g>
<g >
<title>runtime.gcDrainN (2 samples, 0.53%)</title><rect x="1003.2" y="133" width="6.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1006.19" y="143.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.26%)</title><rect x="41.1" y="277" width="3.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="44.13" y="287.5" ></text>
</g>
<g >
<title>runtime.gcDrain (15 samples, 3.96%)</title><rect x="47.4" y="325" width="46.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="50.36" y="335.5" >runt..</text>
</g>
<g >
<title>runtime.gcStart (1 samples, 0.26%)</title><rect x="1009.4" y="213" width="3.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1012.42" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mspan).refillAllocCache (1 samples, 0.26%)</title><rect x="333.8" y="165" width="3.1" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="336.80" y="175.5" ></text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.26%)</title><rect x="1180.7" y="277" width="3.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1183.66" y="287.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.26%)</title><rect x="1180.7" y="309" width="3.1" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1183.66" y="319.5" ></text>
</g>
<g >
<title>runtime.mPark (2 samples, 0.53%)</title><rect x="1168.2" y="309" width="6.2" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1171.21" y="319.5" ></text>
</g>
<g >
<title>runtime.(*consistentHeapStats).release (1 samples, 0.26%)</title><rect x="984.5" y="181" width="3.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="987.51" y="191.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.26%)</title><rect x="841.3" y="85" width="3.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="844.29" y="95.5" ></text>
</g>
<g >
<title>runtime.heapBits.next (1 samples, 0.26%)</title><rect x="87.8" y="293" width="3.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="90.84" y="303.5" ></text>
</g>
<g >
<title>main.containsPoint (7 samples, 1.85%)</title><rect x="1087.3" y="277" width="21.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1090.26" y="287.5" >m..</text>
</g>
<g >
<title>runtime.nextFreeFast (2 samples, 0.53%)</title><rect x="679.4" y="213" width="6.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="682.39" y="223.5" ></text>
</g>
<g >
<title>runtime.(*mheap).initSpan (3 samples, 0.79%)</title><rect x="987.6" y="85" width="9.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="990.63" y="95.5" ></text>
</g>
<g >
<title>runtime.(*stkframe).getStackMap (1 samples, 0.26%)</title><rect x="59.8" y="245" width="3.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="62.82" y="255.5" ></text>
</g>
<g >
<title>main.isCloseInt (5 samples, 1.32%)</title><rect x="480.1" y="229" width="15.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="483.13" y="239.5" ></text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.26%)</title><rect x="59.8" y="213" width="3.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="62.82" y="223.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.26%)</title><rect x="69.2" y="277" width="3.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="72.16" y="287.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (2 samples, 0.53%)</title><rect x="1003.2" y="197" width="6.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1006.19" y="207.5" ></text>
</g>
<g >
<title>runtime.getMCache (1 samples, 0.26%)</title><rect x="940.9" y="229" width="3.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="943.92" y="239.5" ></text>
</g>
<g >
<title>math.Abs (1 samples, 0.26%)</title><rect x="495.7" y="229" width="3.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="498.70" y="239.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (1 samples, 0.26%)</title><rect x="1006.3" y="101" width="3.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1009.31" y="111.5" ></text>
</g>
<g >
<title>math.Float64frombits (3 samples, 0.79%)</title><rect x="498.8" y="229" width="9.4" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="501.81" y="239.5" ></text>
</g>
<g >
<title>runtime.(*stackScanState).addObject (1 samples, 0.26%)</title><rect x="1003.2" y="53" width="3.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="1006.19" y="63.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.26%)</title><rect x="1158.9" y="261" width="3.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1161.87" y="271.5" ></text>
</g>
<g >
<title>math.ldexp (2 samples, 0.53%)</title><rect x="551.7" y="197" width="6.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="554.74" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mcache).refill (1 samples, 0.26%)</title><rect x="1155.8" y="229" width="3.1" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1158.75" y="239.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (1 samples, 0.26%)</title><rect x="1180.7" y="181" width="3.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1183.66" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (3 samples, 0.79%)</title><rect x="987.6" y="117" width="9.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="990.63" y="127.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (1 samples, 0.26%)</title><rect x="50.5" y="309" width="3.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="53.47" y="319.5" ></text>
</g>
<g >
<title>runtime.park_m (4 samples, 1.06%)</title><rect x="1168.2" y="357" width="12.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1171.21" y="367.5" ></text>
</g>
<g >
<title>runtime.futexsleep (2 samples, 0.53%)</title><rect x="1168.2" y="277" width="6.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1171.21" y="287.5" ></text>
</g>
<g >
<title>main.getInbetweenPoints (1 samples, 0.26%)</title><rect x="1149.5" y="277" width="3.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1152.53" y="287.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (1 samples, 0.26%)</title><rect x="28.7" y="293" width="3.1" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="31.68" y="303.5" ></text>
</g>
<g >
<title>runtime.growslice (3 samples, 0.79%)</title><rect x="1152.6" y="277" width="9.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1155.64" y="287.5" ></text>
</g>
<g >
<title>runtime.step (1 samples, 0.26%)</title><rect x="59.8" y="197" width="3.1" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="62.82" y="207.5" ></text>
</g>
<g >
<title>runtime.writeHeapBits.flush (1 samples, 0.26%)</title><rect x="997.0" y="133" width="3.1" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="999.97" y="143.5" ></text>
</g>
<g >
<title>runtime.memmove (2 samples, 0.53%)</title><rect x="1021.9" y="229" width="6.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1024.87" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).cacheSpan (4 samples, 1.06%)</title><rect x="987.6" y="181" width="12.5" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="990.63" y="191.5" ></text>
</g>
<g >
<title>main.main (345 samples, 91.03%)</title><rect x="94.1" y="357" width="1074.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="97.06" y="367.5" >main.main</text>
</g>
<g >
<title>runtime.nextFreeFast (2 samples, 0.53%)</title><rect x="355.6" y="213" width="6.2" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="358.59" y="223.5" ></text>
</g>
<g >
<title>runtime.findRunnable (1 samples, 0.26%)</title><rect x="1180.7" y="293" width="3.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1183.66" y="303.5" ></text>
</g>
<g >
<title>main.exclRange (53 samples, 13.98%)</title><rect x="218.6" y="245" width="165.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="221.60" y="255.5" >main.exclRange</text>
</g>
<g >
<title>runtime.mallocgc (1 samples, 0.26%)</title><rect x="1081.0" y="229" width="3.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1084.03" y="239.5" ></text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.26%)</title><rect x="1009.4" y="133" width="3.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1012.42" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (6 samples, 1.58%)</title><rect x="16.2" y="325" width="18.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="19.23" y="335.5" ></text>
</g>
<g >
<title>runtime.findRunnable (4 samples, 1.06%)</title><rect x="1168.2" y="325" width="12.5" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1171.21" y="335.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc.func1 (1 samples, 0.26%)</title><rect x="340.0" y="149" width="3.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="343.03" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocNeedsZero (1 samples, 0.26%)</title><rect x="1155.8" y="101" width="3.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1158.75" y="111.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (1 samples, 0.26%)</title><rect x="1003.2" y="101" width="3.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1006.19" y="111.5" ></text>
</g>
<g >
<title>runtime.getempty (1 samples, 0.26%)</title><rect x="1003.2" y="37" width="3.1" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1006.19" y="47.5" ></text>
</g>
<g >
<title>runtime.notetsleep (1 samples, 0.26%)</title><rect x="38.0" y="277" width="3.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="41.02" y="287.5" ></text>
</g>
<g >
<title>runtime.main (345 samples, 91.03%)</title><rect x="94.1" y="373" width="1074.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="97.06" y="383.5" >runtime.main</text>
</g>
<g >
<title>runtime.schedule (4 samples, 1.06%)</title><rect x="1168.2" y="341" width="12.5" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1171.21" y="351.5" ></text>
</g>
<g >
<title>runtime.gcStart.func2 (1 samples, 0.26%)</title><rect x="1009.4" y="181" width="3.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1012.42" y="191.5" ></text>
</g>
<g >
<title>main.genAllPoints (66 samples, 17.41%)</title><rect x="850.6" y="261" width="205.5" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="853.63" y="271.5" >main.genAllPoints</text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.26%)</title><rect x="841.3" y="181" width="3.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="844.29" y="191.5" ></text>
</g>
<g >
<title>main.chooseNextPoint (345 samples, 91.03%)</title><rect x="94.1" y="309" width="1074.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="97.06" y="319.5" >main.chooseNextPoint</text>
</g>
<g >
<title>runtime.(*mcache).releaseAll (1 samples, 0.26%)</title><rect x="1180.7" y="213" width="3.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1183.66" y="223.5" ></text>
</g>
<g >
<title>runtime.notetsleep_internal (1 samples, 0.26%)</title><rect x="44.2" y="277" width="3.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="47.25" y="287.5" ></text>
</g>
<g >
<title>runtime.growslice (27 samples, 7.12%)</title><rect x="604.7" y="229" width="84.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="607.67" y="239.5" >runtime.g..</text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.53%)</title><rect x="41.1" y="341" width="6.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="44.13" y="351.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.26%)</title><rect x="38.0" y="261" width="3.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="41.02" y="271.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.26%)</title><rect x="1177.5" y="293" width="3.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1180.55" y="303.5" ></text>
</g>
<g >
<title>main.genAllPoints (1 samples, 0.26%)</title><rect x="1165.1" y="293" width="3.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1168.09" y="303.5" ></text>
</g>
<g >
<title>runtime.finishsweep_m (1 samples, 0.26%)</title><rect x="1009.4" y="165" width="3.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1012.42" y="175.5" ></text>
</g>
<g >
<title>runtime.deductAssistCredit (1 samples, 0.26%)</title><rect x="676.3" y="197" width="3.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="679.28" y="207.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt (1 samples, 0.26%)</title><rect x="828.8" y="245" width="3.2" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="831.84" y="255.5" ></text>
</g>
<g >
<title>runtime.futex (2 samples, 0.53%)</title><rect x="1168.2" y="261" width="6.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1171.21" y="271.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.26%)</title><rect x="1186.9" y="373" width="3.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1189.89" y="383.5" ></text>
</g>
<g >
<title>main.exclRange (1 samples, 0.26%)</title><rect x="1109.1" y="277" width="3.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1112.05" y="287.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.26%)</title><rect x="1180.7" y="229" width="3.1" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="1183.66" y="239.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (1 samples, 0.26%)</title><rect x="69.2" y="293" width="3.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="72.16" y="303.5" ></text>
</g>
<g >
<title>runtime.mallocgc (4 samples, 1.06%)</title><rect x="835.1" y="229" width="12.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="838.07" y="239.5" ></text>
</g>
<g >
<title>all (379 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).grow (4 samples, 1.06%)</title><rect x="987.6" y="165" width="12.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="990.63" y="175.5" ></text>
</g>
<g >
<title>runtime.nextFreeFast (4 samples, 1.06%)</title><rect x="1028.1" y="229" width="12.5" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1031.10" y="239.5" ></text>
</g>
<g >
<title>runtime.mallocgc (13 samples, 3.43%)</title><rect x="638.9" y="213" width="40.5" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="641.92" y="223.5" >run..</text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (1 samples, 0.26%)</title><rect x="1137.1" y="245" width="3.1" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1140.07" y="255.5" ></text>
</g>
<g >
<title>runtime.gcAssistAlloc (1 samples, 0.26%)</title><rect x="841.3" y="197" width="3.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="844.29" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.26%)</title><rect x="1155.8" y="149" width="3.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1158.75" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mcache).nextFree (3 samples, 0.79%)</title><rect x="327.6" y="197" width="9.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="330.57" y="207.5" ></text>
</g>
<g >
<title>runtime.stopm (1 samples, 0.26%)</title><rect x="1180.7" y="261" width="3.1" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1183.66" y="271.5" ></text>
</g>
<g >
<title>math.IsInf (1 samples, 0.26%)</title><rect x="548.6" y="197" width="3.1" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="551.63" y="207.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.26%)</title><rect x="330.7" y="117" width="3.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="333.69" y="127.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (1 samples, 0.26%)</title><rect x="1180.7" y="165" width="3.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1183.66" y="175.5" ></text>
</g>
<g >
<title>main.chooseNextPoint (343 samples, 90.50%)</title><rect x="94.1" y="293" width="1067.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="97.06" y="303.5" >main.chooseNextPoint</text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.26%)</title><rect x="10.0" y="341" width="3.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>math.frexp (2 samples, 0.53%)</title><rect x="520.6" y="197" width="6.2" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="523.61" y="207.5" ></text>
</g>
<g >
<title>runtime.scanstack (1 samples, 0.26%)</title><rect x="1003.2" y="85" width="3.1" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1006.19" y="95.5" ></text>
</g>
<g >
<title>runtime.greyobject (1 samples, 0.26%)</title><rect x="66.0" y="229" width="3.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="69.04" y="239.5" ></text>
</g>
<g >
<title>runtime.(*mheap).nextSpanForSweep (1 samples, 0.26%)</title><rect x="34.9" y="341" width="3.1" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="37.91" y="351.5" ></text>
</g>
<g >
<title>math.IsNaN (2 samples, 0.53%)</title><rect x="542.4" y="213" width="6.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="545.40" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.26%)</title><rect x="38.0" y="325" width="3.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="41.02" y="335.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.26%)</title><rect x="1183.8" y="325" width="3.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1186.77" y="335.5" ></text>
</g>
<g >
<title>runtime.systemstack (15 samples, 3.96%)</title><rect x="47.4" y="357" width="46.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="50.36" y="367.5" >runt..</text>
</g>
<g >
<title>runtime.growslice (5 samples, 1.32%)</title><rect x="835.1" y="245" width="15.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="838.07" y="255.5" ></text>
</g>
<g >
<title>math.Frexp (7 samples, 1.85%)</title><rect x="508.2" y="213" width="21.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="511.15" y="223.5" >m..</text>
</g>
</g>
</svg>
